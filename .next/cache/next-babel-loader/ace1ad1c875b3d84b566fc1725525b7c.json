{"ast":null,"code":"var __jsx = React.createElement;\n\nfunction ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); if (enumerableOnly) { symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; }); } keys.push.apply(keys, symbols); } return keys; }\n\nfunction _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; if (i % 2) { ownKeys(Object(source), true).forEach(function (key) { _defineProperty(target, key, source[key]); }); } else if (Object.getOwnPropertyDescriptors) { Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)); } else { ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } } return target; }\n\nfunction _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }\n\nimport { CloseOutlined } from '@ant-design/icons';\nimport { AutoComplete, Button, Card, Col, Form, Icon, Input, Radio, Row, Select, Tooltip } from 'antd';\nimport axios from 'axios';\nimport _, { isObject } from 'lodash';\nimport queryString from 'query-string';\nimport React, { useEffect, useState } from 'react';\nimport { connect } from 'react-redux';\nimport { convertRangeFormatBack, convertToRangeFormat, formatNumber, isValidNumber, notEmptyLength, objectRemoveEmptyValue } from '../../common-function';\nimport client from '../../feathers';\nimport { carspecNotFoundImage, cnyLionHead } from '../../icon';\nimport { getBodyType } from '../../params/bodyTypeList';\nimport { getCarBrand } from '../../params/carBrandsList';\nimport { getColor } from '../../params/colorList';\nimport { getDrivenWheel } from '../../params/drivenWheelList';\nimport { getFuelType } from '../../params/fuelTypeList';\nimport { getState } from '../../params/stateList';\nimport { clearProductFilterOptions, fetchFilterModalState, fetchProductFilterOptions } from '../../redux/actions/productsList-actions';\nimport { withRouter } from 'next/dist/client/router';\nimport MakeModal from './filter-modal/MakeModal';\nimport ModelModal from './filter-modal/ModelModal';\nimport StateModal from './filter-modal/StateModal';\nimport AreaModal from './filter-modal/AreaModal';\nimport BodyTypeModal from './filter-modal/BodyTypeModal';\nimport FuelTypeModal from './filter-modal/FuelTypeModal';\nimport DrivenWheelModal from './filter-modal/DrivenWheelModal';\nimport ColorModal from './filter-modal/ColorModal';\nimport moment from 'moment';\nconst {\n  Option\n} = Select;\nconst modalWidth = 250;\nconst moreOptionModalWidth = 200;\nconst modalMargin = 20;\nconst containerRef = React.createRef();\nconst formRef = React.createRef();\nconst moreOptionButtonRef = React.createRef();\nconst moreOptionModalRef = React.createRef();\nconst makeInputRef = React.createRef();\nconst modelInputRef = React.createRef();\nconst stateInputRef = React.createRef();\nconst bodyTypeInputRef = React.createRef();\nconst drivenwheelInputRef = React.createRef();\nconst colorInputRef = React.createRef();\nconst fuelTypeInputRef = React.createRef();\nconst makeCloseInputRef = React.createRef();\nconst modelCloseInputRef = React.createRef();\nconst stateCloseInputRef = React.createRef();\nconst areaCloseInputRef = React.createRef();\nconst bodyTypeCloseInputRef = React.createRef();\nconst drivenwheelCloseInputRef = React.createRef();\nconst colorCloseInputRef = React.createRef();\nconst fuelTypeCloseInputRef = React.createRef();\nlet latestYear = moment().year();\nlet yearRange = latestYear - 1990 + 1;\nlet years = [];\n\n_.forEach(_.range(0, yearRange), function (index) {\n  years.push(`${latestYear - index}`);\n}); // const years = [2021, 2020, 2019, 2018, 2017, 2016, 2015, 2014, 2013, 2012, 2011, 2010, 2009, 2008, 2007, 2006, 2005, 2004, 2003, 2002, 2001, 2000, 1999, 1998, 1997, 1996, 1995, 1994, 1993, 1992, 1991, 1990]\n\n\nconst prices = ['5000000', '4000000', '3000000', '2000000', '1000000', '950000', '900000', '850000', '800000', '750000', '700000', '650000', '600000', '550000', '500000', '450000', '400000', '350000', '300000', '275000', '250000', '225000', '200000', '175000', '150000', '125000', '100000', '90000', '80000', '70000', '60000', '50000', '40000', '30000', '20000', '10000'];\nconst mileages = ['500000', '450000', '400000', '350000', '300000', '275000', '250000', '225000', '200000', '175000', '150000', '125000', '100000', '90000', '80000', '70000', '60000', '50000', '40000', '30000', '20000', '10000'];\nconst engineCapacities = ['4', '3.5', '3', '2.5', '2', '1.5', '1', '0.1'];\nconst modals = ['make', 'model', 'state', 'area', 'bodyType', 'color', 'fuelType'];\nconst optionsFields = ['title', 'transmission', 'make', 'model', 'state', 'area', 'year', 'price', 'mileage', 'engineCapacity', 'bodyType', 'color', 'fuelType'];\nlet inputRefs = {};\n\nfor (let index = 0; index < optionsFields.length; index++) {\n  inputRefs[optionsFields[index] + 'Ref'] = React.createRef();\n}\n\nconst ProductsListFilterForm = props => {\n  const {\n    0: title,\n    1: setTitle\n  } = useState('');\n  const {\n    0: moreOptionModalVisible,\n    1: setMoreOptionModalVisible\n  } = useState(false);\n  const {\n    0: makeModalVisible,\n    1: setMakeModalVisible\n  } = useState(false);\n  const {\n    0: modelModalVisible,\n    1: setModelModalVisible\n  } = useState(false);\n  const {\n    0: stateModalVisible,\n    1: setStateModalVisible\n  } = useState(false);\n  const {\n    0: areaModalVisible,\n    1: setAreaModalVisible\n  } = useState(false);\n  const {\n    0: bodyTypeModalVisible,\n    1: setBodyTypeModalVisible\n  } = useState(false);\n  const {\n    0: drivenwheelModalVisible,\n    1: setDrivenWheelModalVisible\n  } = useState(false);\n  const {\n    0: colorModalVisible,\n    1: setColorModalVisible\n  } = useState(false);\n  const {\n    0: fuelTypeModalVisible,\n    1: setFuelTypeModalVisible\n  } = useState(false);\n  const {\n    0: fieldThatShowRangeTitle,\n    1: setFieldThatShowRangeTitle\n  } = useState('year');\n  const {\n    0: isDropDownOpen,\n    1: setIsDropDownOpen\n  } = useState(false);\n  const {\n    0: collapseFields,\n    1: setCollapseFields\n  } = useState([]);\n  const {\n    0: containerHeight,\n    1: setContainerHeight\n  } = useState(400);\n  const {\n    0: formActualHeight,\n    1: setFormActualHeight\n  } = useState();\n  const {\n    0: filterGroup,\n    1: setFilterGroup\n  } = useState({});\n  const {\n    0: dropDownSearchValue,\n    1: setDropDownSearchValue\n  } = useState({});\n  const {\n    0: dropDownOptions,\n    1: setDropDownOptions\n  } = useState({\n    minYears: _.reverse(_.cloneDeep(years)),\n    maxYears: years,\n    minPrices: _.reverse(_.cloneDeep(prices)),\n    maxPrices: prices,\n    minMileages: _.reverse(_.cloneDeep(mileages)),\n    maxMileages: mileages,\n    minEngineCapacities: _.reverse(_.cloneDeep(engineCapacities)),\n    maxEngineCapacities: engineCapacities\n  });\n  const {\n    0: origOptions,\n    1: setOrigOptions\n  } = useState({\n    makeList: [],\n    modelList: [],\n    stateList: [],\n    areaList: [],\n    conditionList: [],\n    transmissionList: [],\n    yearList: [],\n    priceList: [],\n    mileageList: [],\n    bodyTypeList: [],\n    drivenWheelList: [],\n    colorList: [],\n    fuelTypeList: []\n  });\n  const {\n    0: modelOptions,\n    1: setModelOptions\n  } = useState([]);\n  const {\n    0: areaOptions,\n    1: setAreaOptions\n  } = useState([]);\n  const {\n    0: modelLoading,\n    1: setModelLoading\n  } = useState(false); //Use for collapse filter fields\n\n  const {\n    0: initFormConfig,\n    1: setInitFormConfig\n  } = useState();\n  const {\n    0: startWatching,\n    1: setStartWatching\n  } = useState(false);\n  useEffect(() => {\n    setStartWatching(false);\n    setFilterGroup(_.isPlainObject(props.initFilterGroup) && !_.isEmpty(props.initFilterGroup) ? props.initFilterGroup : {});\n    setTimeout(() => {\n      setStartWatching(true);\n    }, 500);\n  }, [props.initFilterGroup]);\n  useEffect(() => {\n    if (!_.isPlainObject(props.productsList.filterOptions) || _.isEmpty(props.productsList.filterOptions)) {\n      getOrigOptions();\n    }\n  }, []);\n  useEffect(() => {\n    if (filterGroup.title) {\n      setTitle(filterGroup.title);\n    } else {\n      setTitle('');\n    }\n\n    let dropdownsearch = {};\n\n    if (_.get(filterGroup, 'yearRange[0]')) {\n      dropdownsearch.minYear = `${_.get(filterGroup, 'yearRange[0]')}`;\n    }\n\n    if (_.get(filterGroup, 'yearRange[1]')) {\n      dropdownsearch.maxYear = `${_.get(filterGroup, 'yearRange[1]')}`;\n    }\n\n    if (_.get(filterGroup, 'priceRange[0]')) {\n      dropdownsearch.minPrice = `${_.get(filterGroup, 'priceRange[0]')}`;\n    }\n\n    if (_.get(filterGroup, 'priceRange[1]')) {\n      dropdownsearch.maxPrice = `${_.get(filterGroup, 'priceRange[1]')}`;\n    }\n\n    if (_.get(filterGroup, 'mileageRange[0]')) {\n      dropdownsearch.minMileage = `${_.get(filterGroup, 'mileageRange[0]')}`;\n    }\n\n    if (_.get(filterGroup, 'mileageRange[1]')) {\n      dropdownsearch.maxMileage = `${_.get(filterGroup, 'mileageRange[1]')}`;\n    }\n\n    if (_.get(filterGroup, 'engineCapacityRange[0]')) {\n      dropdownsearch.minEngineCapacity = `${_.get(filterGroup, 'engineCapacityRange[0]')}`;\n    }\n\n    if (_.get(filterGroup, 'engineCapacityRange[1]')) {\n      dropdownsearch.maxEngineCapacity = `${_.get(filterGroup, 'engineCapacityRange[1]')}`;\n    }\n\n    setDropDownSearchValue(dropdownsearch);\n    setDropDownOptions(getFilteredDropDownOptions() || []);\n\n    if (props.onChange && startWatching) {\n      controlModalOpen();\n\n      let data = _.cloneDeep(filterGroup);\n\n      data = objectRemoveEmptyValue(data);\n      props.onChange(data);\n    }\n  }, [filterGroup]);\n  useEffect(() => {\n    setOrigOptions(_.isPlainObject(props.productsList.filterOptions) && !_.isEmpty(props.productsList.filterOptions) ? props.productsList.filterOptions : {});\n  }, [props.productsList.filterOptions]);\n  useEffect(() => {\n    // Bind the event listener\n    document.addEventListener(\"mousedown\", handleClickOutside);\n    return () => {\n      // Unbind the event listener on clean up\n      document.removeEventListener(\"mousedown\", handleClickOutside);\n    };\n  }, [makeModalVisible, modelModalVisible, stateModalVisible, areaModalVisible, bodyTypeModalVisible, colorModalVisible, fuelTypeModalVisible, drivenwheelModalVisible, isDropDownOpen]);\n  useEffect(() => {\n    props.fetchFilterModalState(isModalOpen());\n  }, [makeModalVisible, modelModalVisible, stateModalVisible, areaModalVisible, bodyTypeModalVisible, colorModalVisible, fuelTypeModalVisible, drivenwheelModalVisible]);\n  useEffect(() => {\n    if (filterGroup.make) {\n      getModelOptions(!_.isPlainObject(props.availableFilterOption) || !_.isArray(props.availableFilterOption.modelList) || _.isEmpty(props.availableFilterOption.modelList) ? [] : props.availableFilterOption.modelList);\n    }\n  }, [props.availableFilterOption, filterGroup]);\n  useEffect(() => {}, [moreOptionModalVisible]);\n\n  function handleClickOutside(event) {\n    if ((!moreOptionModalRef.current || !moreOptionModalRef.current.contains(event.target)) && (!containerRef.current || !containerRef.current.contains(event.target)) && !isModalOpen() && !isDropDownOpen) {\n      setMoreOptionModalVisible(false);\n    }\n  }\n\n  function getFilteredDropDownOptions() {\n    let newDropDownOptions = {\n      minYears: _.reverse(_.cloneDeep(years)),\n      maxYears: years,\n      minPrices: _.reverse(_.cloneDeep(prices)),\n      maxPrices: prices,\n      minMileages: _.reverse(_.cloneDeep(mileages)),\n      maxMileages: mileages,\n      minEngineCapacities: _.reverse(_.cloneDeep(engineCapacities)),\n      maxEngineCapacities: engineCapacities\n    };\n\n    if (_.get(filterGroup, 'yearRange[0]')) {\n      newDropDownOptions.maxYears = _.filter(newDropDownOptions.maxYears || [], function (item) {\n        let value = parseFloat(_.get(filterGroup, 'yearRange[0]'));\n        return parseFloat(item) > value;\n      });\n    }\n\n    if (_.get(filterGroup, 'yearRange[1]')) {\n      newDropDownOptions.minYears = _.filter(newDropDownOptions.minYears || [], function (item) {\n        let value = parseFloat(_.get(filterGroup, 'yearRange[1]'));\n        return parseFloat(item) < value;\n      });\n    }\n\n    if (_.get(filterGroup, 'priceRange[0]')) {\n      newDropDownOptions.maxPrices = _.filter(newDropDownOptions.maxPrices || [], function (item) {\n        let value = parseFloat(_.get(filterGroup, 'priceRange[0]'));\n        return parseFloat(item) > value;\n      });\n    }\n\n    if (_.get(filterGroup, 'priceRange[1]')) {\n      newDropDownOptions.minPrices = _.filter(newDropDownOptions.minPrices || [], function (item) {\n        let value = parseFloat(_.get(filterGroup, 'priceRange[1]'));\n        return parseFloat(item) < value;\n      });\n    }\n\n    if (_.get(filterGroup, 'mileageRange[0]')) {\n      newDropDownOptions.maxMileages = _.filter(newDropDownOptions.maxMileages || [], function (item) {\n        let value = parseFloat(_.get(filterGroup, 'mileageRange[0]'));\n        return parseFloat(item) > value;\n      });\n    }\n\n    if (_.get(filterGroup, 'mileageRange[1]')) {\n      newDropDownOptions.minMileages = _.filter(newDropDownOptions.minMileages || [], function (item) {\n        let value = parseFloat(_.get(filterGroup, 'mileageRange[1]'));\n        return parseFloat(item) < value;\n      });\n    }\n\n    if (_.get(filterGroup, 'engineCapacityRange[0]')) {\n      newDropDownOptions.maxEngineCapacities = _.filter(newDropDownOptions.maxEngineCapacities || [], function (item) {\n        let value = parseFloat(_.get(filterGroup, 'engineCapacityRange[0]'));\n        return parseFloat(item) > value;\n      });\n    }\n\n    if (_.get(filterGroup, 'engineCapacityRange[1]')) {\n      newDropDownOptions.minEngineCapacities = _.filter(newDropDownOptions.minEngineCapacities || [], function (item) {\n        let value = parseFloat(_.get(filterGroup, 'engineCapacityRange[1]'));\n        return parseFloat(item) < value;\n      });\n    }\n\n    return newDropDownOptions;\n  }\n\n  function getOrigOptions() {\n    let promises = [];\n\n    _.forEach(modals, function (modal) {\n      promises.push(axios.get(`${client.io.io.uri}brandFilterTotalV3`, {\n        params: {\n          filterType: modal\n        },\n        headers: {\n          'Authorization': client.settings.storage.storage.storage['feathers-jwt']\n        }\n      }));\n    });\n\n    Promise.all(promises).then(responses => {\n      if (_.isArray(responses) && !_.isEmpty(responses)) {\n        let options = {};\n\n        _.forEach(responses, function (response, index) {\n          options[`${modals[index]}List`] = response.data.uniqueInfo[`${modals[index]}List`];\n        });\n\n        props.fetchProductFilterOptions(options);\n      }\n    }).catch(err => {// message.error(err.message);\n    });\n  }\n\n  function getModelOptions(models) {\n    if (_.isArray(models) && notEmptyLength(models) && filterGroup.make) {\n      setModelOptions([]);\n      setModelLoading(true);\n      axios.get(`${client.io.io.uri}priceRangeSearchUsed`, {\n        params: {\n          match: {\n            make: filterGroup.make\n          }\n        }\n      }).then(res => {\n        setModelLoading(false);\n\n        if (notEmptyLength(res.data.usedCarPrice)) {\n          let uniqModels = _.filter(_.cloneDeep(_.uniqBy(res.data.usedCarPrice, 'model')));\n\n          uniqModels = _.compact(_.map(uniqModels, function (model) {\n            let selectedOption = _.find(_.get(props.availableFilterOption, ['modelList']) || [], function (item) {\n              return _.toLower(item.value) == _.toLower(model.model);\n            });\n\n            if (selectedOption) {\n              model.count = selectedOption.count;\n              model.uri = model.uri || carspecNotFoundImage;\n              return model;\n            } else {\n              return null;\n            }\n          }));\n          setModelOptions(_.isArray(uniqModels) && notEmptyLength(uniqModels) ? uniqModels : []);\n        } else {\n          setModelOptions([]);\n        }\n      }).catch(err => {\n        console.log(err);\n        setModelLoading(false);\n        setModelOptions([]);\n      });\n    } else {\n      setModelOptions([]);\n    }\n  }\n\n  function controlModalOpen(selectedModal) {\n    _.forEach(modals, function (modal) {\n      switch (modal) {\n        case 'make':\n          setMakeModalVisible(selectedModal == modal);\n          break;\n\n        case 'model':\n          setModelModalVisible(selectedModal == modal);\n          break;\n\n        case 'state':\n          setStateModalVisible(selectedModal == modal);\n          break;\n\n        case 'area':\n          setAreaModalVisible(selectedModal == modal);\n          break;\n\n        case 'bodyType':\n          setBodyTypeModalVisible(selectedModal == modal);\n          break;\n\n        case 'drivenwheel':\n          setDrivenWheelModalVisible(selectedModal == modal);\n          break;\n\n        case 'color':\n          setColorModalVisible(selectedModal == modal);\n          break;\n\n        case 'fuelType':\n          setFuelTypeModalVisible(selectedModal == modal);\n          break;\n\n        default:\n          setMakeModalVisible(false);\n          setModelModalVisible(false);\n          setStateModalVisible(false);\n          setAreaModalVisible(false);\n          setBodyTypeModalVisible(false);\n          setDrivenWheelModalVisible(false);\n          setColorModalVisible(false);\n          setFuelTypeModalVisible(false);\n          break;\n      }\n    });\n  }\n\n  function isModalOpen() {\n    let gotModalOpen = false;\n\n    _.forEach(modals, function (modal, index) {\n      switch (modal) {\n        case 'make':\n          gotModalOpen = makeModalVisible;\n          break;\n\n        case 'model':\n          gotModalOpen = modelModalVisible;\n          break;\n\n        case 'state':\n          gotModalOpen = stateModalVisible;\n          break;\n\n        case 'area':\n          gotModalOpen = areaModalVisible;\n          break;\n\n        case 'bodyType':\n          gotModalOpen = bodyTypeModalVisible;\n          break;\n\n        case 'drivenwheel':\n          gotModalOpen = drivenwheelModalVisible;\n          break;\n\n        case 'color':\n          gotModalOpen = colorModalVisible;\n          break;\n\n        case 'fuelType':\n          gotModalOpen = fuelTypeModalVisible;\n          break;\n\n        default:\n          gotModalOpen = false;\n          break;\n      } //Break Loop\n\n\n      if (gotModalOpen) {\n        return false;\n      }\n    });\n\n    return gotModalOpen;\n  }\n\n  function resetFilterGroup() {\n    setFilterGroup({});\n  }\n\n  const _renderRangeTitle = () => {\n    return __jsx(Row, null, __jsx(Col, {\n      xs: 12,\n      sm: 12,\n      md: 12,\n      lg: 12,\n      xl: 12\n    }, __jsx(\"div\", {\n      className: \"width-100 flex-justify-center flex-items-align-center black headline\"\n    }, \"Min\")), __jsx(Col, {\n      xs: 12,\n      sm: 12,\n      md: 12,\n      lg: 12,\n      xl: 12\n    }, __jsx(\"div\", {\n      className: \"width-100 flex-justify-center flex-items-align-center black headline\"\n    }, \"Max\")));\n  };\n\n  const _renderFormItem = item => {\n    switch (item) {\n      case 'title':\n        return __jsx(React.Fragment, null, __jsx(\"div\", {\n          className: \"padding-bottom-xs\"\n        }, __jsx(Input, {\n          placeholder: \"Search Title\",\n          suffix: __jsx(Icon, {\n            type: \"search\",\n            className: \"cursor-pointer\",\n            onClick: e => {\n              setFilterGroup(_objectSpread(_objectSpread({}, filterGroup), {}, {\n                title: title\n              }));\n            }\n          }),\n          value: title,\n          onChange: e => {\n            setTitle(e.target.value);\n          },\n          onPressEnter: e => {\n            setFilterGroup(_objectSpread(_objectSpread({}, filterGroup), {}, {\n              title: e.target.value\n            }));\n          }\n        })));\n\n      case 'condition':\n        return __jsx(React.Fragment, null, __jsx(Form.Item, {\n          style: {\n            margin: '0px',\n            marginBottom: '0px',\n            padding: '2px 2px 0px 0px'\n          }\n        }, __jsx(Radio.Group, {\n          className: \"condition-form \",\n          style: {\n            textAlign: 'center',\n            width: '100%',\n            padding: '0px'\n          },\n          value: filterGroup.condition || '',\n          onChange: e => {\n            setFilterGroup(_objectSpread(_objectSpread({}, filterGroup), {}, {\n              condition: _.toLower(e.target.value) == _.toLower(filterGroup.condition) ? '' : _.toLower(e.target.value)\n            }));\n          }\n        }, __jsx(Row, {\n          gutter: [10, 0],\n          type: \"flex\",\n          align: \"middle\",\n          justify: \"space-around\",\n          className: \"fill-parent\"\n        }, __jsx(Col, {\n          xs: 12,\n          sm: 12,\n          md: 6,\n          lg: 6,\n          xl: 6\n        }, __jsx(Radio.Button, {\n          className: \"w-100\",\n          style: {\n            backgroundColor: \"\",\n            padding: 0\n          },\n          value: \"used\",\n          onClick: e => {\n            if (filterGroup.condition == 'used') {\n              setFilterGroup(_objectSpread(_objectSpread({}, filterGroup), {}, {\n                condition: ''\n              }));\n            }\n          }\n        }, __jsx(\"p\", {\n          style: {\n            fontSize: \"10px\",\n            textAlign: \"center\",\n            fontWeight: \"bold\"\n          }\n        }, \"USED\"))), __jsx(Col, {\n          xs: 12,\n          sm: 12,\n          md: 6,\n          lg: 6,\n          xl: 6\n        }, __jsx(Radio.Button, {\n          className: \"w-100\",\n          style: {\n            backgroundColor: \"\",\n            padding: 0\n          },\n          value: \"recon\",\n          onClick: e => {\n            if (filterGroup.condition == 'recon') {\n              setFilterGroup(_objectSpread(_objectSpread({}, filterGroup), {}, {\n                condition: ''\n              }));\n            }\n          }\n        }, __jsx(\"p\", {\n          style: {\n            fontSize: \"10px\",\n            textAlign: \"center\",\n            fontWeight: \"bold\"\n          }\n        }, \"RECON\"))), __jsx(Col, {\n          xs: 12,\n          sm: 12,\n          md: 6,\n          lg: 6,\n          xl: 6\n        }, __jsx(Radio.Button, {\n          className: \"w-100\",\n          style: {\n            backgroundColor: \"\",\n            padding: 0\n          },\n          value: \"new\",\n          onClick: e => {\n            if (filterGroup.condition == 'new') {\n              setFilterGroup(_objectSpread(_objectSpread({}, filterGroup), {}, {\n                condition: ''\n              }));\n            }\n          }\n        }, __jsx(\"p\", {\n          style: {\n            fontSize: \"10px\",\n            textAlign: \"center\",\n            fontWeight: \"bold\"\n          }\n        }, \"NEW\")))))));\n\n      case 'transmission':\n        return __jsx(React.Fragment, null, __jsx(\"div\", {\n          className: \"padding-bottom-xs\"\n        }, __jsx(Radio.Group, {\n          className: \"w-100 condition-form\",\n          style: {\n            textAlign: 'center'\n          },\n          value: filterGroup.transmission || '',\n          onChange: e => {\n            setFilterGroup(_objectSpread(_objectSpread({}, filterGroup), {}, {\n              transmission: _.toLower(e.target.value)\n            }));\n          }\n        }, __jsx(Row, {\n          type: \"flex\",\n          align: \"middle\",\n          justify: \"center\",\n          className: \"fill-parent\"\n        }, __jsx(Col, {\n          xs: 24,\n          sm: 24,\n          md: 24,\n          lg: 10,\n          xl: 10\n        }, __jsx(Radio.Button, {\n          className: `w-100 `,\n          style: {\n            padding: 0\n          },\n          value: \"automatic\",\n          onClick: e => {\n            if (filterGroup.transmission == 'automatic') {\n              setFilterGroup(_objectSpread(_objectSpread({}, filterGroup), {}, {\n                transmission: ''\n              }));\n            }\n          }\n        }, \" \", __jsx(\"p\", {\n          style: {\n            fontSize: \"10px\",\n            textAlign: \"center\",\n            fontWeight: \"bold\"\n          }\n        }, \" Automatic \"), \" \")), __jsx(Col, {\n          xs: 24,\n          sm: 24,\n          md: 24,\n          lg: {\n            span: 10,\n            offset: 4\n          },\n          xl: {\n            span: 10,\n            offset: 4\n          }\n        }, __jsx(Radio.Button, {\n          className: `w-100 `,\n          style: {\n            padding: 0\n          },\n          value: \"manual\",\n          onClick: e => {\n            if (filterGroup.transmission == 'manual') {\n              setFilterGroup(_objectSpread(_objectSpread({}, filterGroup), {}, {\n                transmission: ''\n              }));\n            }\n          }\n        }, \" \", __jsx(\"p\", {\n          style: {\n            fontSize: \"10px\",\n            textAlign: \"center\",\n            fontWeight: \"bold\"\n          }\n        }, \" Manual\"), \" \"))))));\n\n      case 'make':\n        return __jsx(React.Fragment, null, __jsx(\"div\", {\n          className: \"thin-border round-border-light border-ccar-yellow cursor-pointer flex-justify-space-between flex-items-align-center padding-x-md margin-bottom-xs\",\n          style: {\n            height: 30\n          },\n          ref: makeInputRef,\n          onClick: e => {\n            if (!makeCloseInputRef.current || !makeCloseInputRef.current.contains(e.target)) {\n              controlModalOpen('make');\n            }\n          }\n        }, filterGroup.make ? __jsx(React.Fragment, null, __jsx(\"span\", {\n          className: \"d-inline-block\"\n        }, _.get(getCarBrand(filterGroup.make), ['value']) || \"\"), __jsx(\"span\", {\n          className: \"d-inline-block\",\n          ref: makeCloseInputRef\n        }, __jsx(CloseOutlined, {\n          className: \"cursor-pointer\",\n          onClick: e => {\n            setFilterGroup(_objectSpread(_objectSpread({}, filterGroup), {}, {\n              make: '',\n              model: ''\n            }));\n          }\n        }))) : __jsx(React.Fragment, null, __jsx(\"span\", {\n          className: \"d-inline-block grey\"\n        }, \"Brand\"), __jsx(\"span\", {\n          className: \"d-inline-block\"\n        }, __jsx(\"img\", {\n          style: {\n            width: 25\n          },\n          src: \"/assets/carDetails/Car Maker@3x.png\"\n        })))));\n\n      case 'model':\n        return __jsx(React.Fragment, null, __jsx(\"div\", {\n          className: `thin-border round-border-light border-ccar-yellow ${filterGroup.make ? 'cursor-pointer' : 'cursor-not-allowed background-grey-lighten-3'} flex-justify-space-between flex-items-align-center padding-x-md  margin-bottom-xs`,\n          style: {\n            height: 30\n          },\n          ref: modelInputRef,\n          onClick: e => {\n            if (filterGroup.make && (!modelCloseInputRef.current || !modelCloseInputRef.current.contains(e.target))) {\n              controlModalOpen('model');\n            }\n          }\n        }, filterGroup.model ? __jsx(React.Fragment, null, __jsx(\"span\", {\n          className: \"d-inline-block capitalize\"\n        }, filterGroup.model || \"\"), __jsx(\"span\", {\n          className: \"d-inline-block\",\n          ref: modelCloseInputRef\n        }, __jsx(CloseOutlined, {\n          className: \"cursor-pointer\",\n          onClick: e => {\n            setFilterGroup(_objectSpread(_objectSpread({}, filterGroup), {}, {\n              model: ''\n            }));\n          }\n        }))) : __jsx(React.Fragment, null, __jsx(\"span\", {\n          className: \"d-inline-block grey\"\n        }, \"Model\"), __jsx(\"span\", {\n          className: \"d-inline-block\"\n        }, __jsx(\"img\", {\n          style: {\n            width: 25\n          },\n          src: \"/assets/carDetails/Car Maker@3x.png\"\n        })))));\n\n      case 'state':\n        return __jsx(React.Fragment, null, __jsx(\"div\", {\n          className: `thin-border round-border-light border-ccar-yellow cursor-pointer flex-justify-space-between flex-items-align-center padding-x-md  margin-bottom-xs`,\n          style: {\n            height: 30\n          },\n          ref: stateInputRef,\n          onClick: e => {\n            if (!stateCloseInputRef.current || !stateCloseInputRef.current.contains(e.target)) {\n              controlModalOpen('state');\n            }\n          }\n        }, filterGroup.state ? __jsx(React.Fragment, null, __jsx(\"span\", {\n          className: \"d-inline-block capitalize\"\n        }, _.get(getState(filterGroup.state), ['value']) || \"\"), __jsx(\"span\", {\n          className: \"d-inline-block\",\n          ref: stateCloseInputRef\n        }, __jsx(CloseOutlined, {\n          className: \"cursor-pointer\",\n          onClick: e => {\n            setFilterGroup(_objectSpread(_objectSpread({}, filterGroup), {}, {\n              state: '',\n              area: ''\n            }));\n          }\n        }))) : __jsx(React.Fragment, null, __jsx(\"span\", {\n          className: \"d-inline-block grey\"\n        }, \"State\"), __jsx(\"span\", {\n          className: \"d-inline-block\"\n        }, __jsx(\"img\", {\n          style: {\n            width: 25\n          },\n          src: \"/assets/carDetails/Location@3x.png\"\n        })))));\n\n      case 'area':\n        return __jsx(React.Fragment, null, __jsx(\"div\", {\n          className: ` ${filterGroup.state ? 'cursor-pointer' : 'cursor-not-allowed background-grey-lighten-3'} thin-border round-border-light border-ccar-yellow flex-justify-space-between flex-items-align-center padding-x-md  margin-bottom-xs`,\n          style: {\n            height: 30\n          },\n          onClick: e => {\n            if (filterGroup.state && (!areaCloseInputRef.current || !areaCloseInputRef.current.contains(e.target))) {\n              controlModalOpen('area');\n            }\n          }\n        }, filterGroup.area ? __jsx(React.Fragment, null, __jsx(\"span\", {\n          className: \"d-inline-block capitalize\"\n        }, filterGroup.area || \"\"), __jsx(\"span\", {\n          className: \"d-inline-block\",\n          ref: areaCloseInputRef\n        }, __jsx(CloseOutlined, {\n          className: \"cursor-pointer\",\n          onClick: e => {\n            setFilterGroup(_objectSpread(_objectSpread({}, filterGroup), {}, {\n              area: ''\n            }));\n          }\n        }))) : __jsx(React.Fragment, null, __jsx(\"span\", {\n          className: \"d-inline-block grey\"\n        }, \"Area\"), __jsx(\"span\", {\n          className: \"d-inline-block\"\n        }, __jsx(\"img\", {\n          style: {\n            width: 25\n          },\n          src: \"/assets/carDetails/Location@3x.png\"\n        })))));\n\n      case 'bodyType':\n        return __jsx(React.Fragment, null, __jsx(\"div\", {\n          className: `thin-border round-border-light border-ccar-yellow cursor-pointer flex-justify-space-between flex-items-align-center padding-x-md  margin-bottom-xs`,\n          style: {\n            height: 30\n          },\n          ref: bodyTypeInputRef,\n          onClick: e => {\n            if (!bodyTypeCloseInputRef.current || !bodyTypeCloseInputRef.current.contains(e.target)) {\n              controlModalOpen('bodyType');\n            }\n          }\n        }, filterGroup.bodyType ? __jsx(React.Fragment, null, __jsx(\"span\", {\n          className: \"d-inline-block\"\n        }, _.get(getBodyType(filterGroup.bodyType), ['value']) || \"\"), __jsx(\"span\", {\n          className: \"d-inline-block\",\n          ref: bodyTypeCloseInputRef\n        }, __jsx(CloseOutlined, {\n          className: \"cursor-pointer\",\n          onClick: e => {\n            setFilterGroup(_objectSpread(_objectSpread({}, filterGroup), {}, {\n              bodyType: ''\n            }));\n          }\n        }))) : __jsx(React.Fragment, null, __jsx(\"span\", {\n          className: \"d-inline-block grey\"\n        }, \"Body Type\"), __jsx(\"span\", {\n          className: \"d-inline-block\"\n        }, __jsx(\"img\", {\n          style: {\n            width: 25\n          },\n          src: \"/assets/carDetails/Body Type@3x.png\"\n        })))));\n\n      case 'color':\n        return __jsx(React.Fragment, null, __jsx(\"div\", {\n          className: `thin-border round-border-light border-ccar-yellow cursor-pointer flex-justify-space-between flex-items-align-center padding-x-md  margin-bottom-xs`,\n          style: {\n            height: 30\n          },\n          ref: colorInputRef,\n          onClick: e => {\n            if (!colorCloseInputRef.current || !colorCloseInputRef.current.contains(e.target)) {\n              controlModalOpen('color');\n            }\n          }\n        }, filterGroup.color ? __jsx(React.Fragment, null, __jsx(\"span\", {\n          className: \"d-inline-block capitalize\"\n        }, _.capitalize(_.get(getColor(filterGroup.color), ['value'])) || \"\"), __jsx(\"span\", {\n          className: \"d-inline-block\",\n          ref: colorCloseInputRef\n        }, __jsx(CloseOutlined, {\n          className: \"cursor-pointer\",\n          onClick: e => {\n            setFilterGroup(_objectSpread(_objectSpread({}, filterGroup), {}, {\n              color: ''\n            }));\n          }\n        }))) : __jsx(React.Fragment, null, __jsx(\"span\", {\n          className: \"d-inline-block grey\"\n        }, \"Color\"), __jsx(\"span\", {\n          className: \"d-inline-block\"\n        }, __jsx(\"img\", {\n          style: {\n            width: 25\n          },\n          src: \"/assets/carDetails/Car Color@3x.png\"\n        })))));\n\n      case 'drivenwheel':\n        return __jsx(React.Fragment, null, __jsx(\"div\", {\n          className: `thin-border round-border-light border-ccar-yellow cursor-pointer flex-justify-space-between flex-items-align-center padding-x-md  margin-bottom-xs`,\n          style: {\n            height: 30\n          },\n          ref: drivenwheelInputRef,\n          onClick: e => {\n            if (!drivenwheelCloseInputRef.current || !drivenwheelCloseInputRef.current.contains(e.target)) {\n              controlModalOpen('drivenwheel');\n            }\n          }\n        }, filterGroup.drivenwheel ? __jsx(React.Fragment, null, __jsx(\"span\", {\n          className: \"d-inline-block capitalize\"\n        }, _.capitalize(_.get(getDrivenWheel(filterGroup.drivenwheel), ['value'])) || \"\"), __jsx(\"span\", {\n          className: \"d-inline-block\",\n          ref: drivenwheelCloseInputRef\n        }, __jsx(CloseOutlined, {\n          className: \"cursor-pointer\",\n          onClick: e => {\n            setFilterGroup(_objectSpread(_objectSpread({}, filterGroup), {}, {\n              drivenwheel: ''\n            }));\n          }\n        }))) : __jsx(React.Fragment, null, __jsx(\"span\", {\n          className: \"d-inline-block grey\"\n        }, \"Driven Wheel\"), __jsx(\"span\", {\n          className: \"d-inline-block\"\n        }, __jsx(\"img\", {\n          style: {\n            width: 25\n          },\n          src: \"/assets/carDetails/Wheel@3x.png\"\n        })))));\n\n      case 'fuelType':\n        return __jsx(React.Fragment, null, __jsx(\"div\", {\n          className: `thin-border round-border-light border-ccar-yellow cursor-pointer flex-justify-space-between flex-items-align-center padding-x-md  margin-bottom-xs`,\n          style: {\n            height: 30\n          },\n          ref: fuelTypeInputRef,\n          onClick: e => {\n            if (!fuelTypeCloseInputRef.current || !fuelTypeCloseInputRef.current.contains(e.target)) {\n              controlModalOpen('fuelType');\n            }\n          }\n        }, filterGroup.fuelType ? __jsx(React.Fragment, null, __jsx(\"span\", {\n          className: \"d-inline-block capitalize\"\n        }, _.capitalize(_.get(getFuelType(filterGroup.fuelType), ['value'])) || \"\"), __jsx(\"span\", {\n          className: \"d-inline-block\",\n          ref: fuelTypeCloseInputRef\n        }, __jsx(CloseOutlined, {\n          className: \"cursor-pointer\",\n          onClick: e => {\n            setFilterGroup(_objectSpread(_objectSpread({}, filterGroup), {}, {\n              fuelType: ''\n            }));\n          }\n        }))) : __jsx(React.Fragment, null, __jsx(\"span\", {\n          className: \"d-inline-block grey\"\n        }, \"Fuel Type\"), __jsx(\"span\", {\n          className: \"d-inline-block\"\n        }, __jsx(\"img\", {\n          style: {\n            width: 25\n          },\n          src: \"/assets/carDetails/Fuel Type.png\"\n        })))));\n\n      case 'year':\n        return __jsx(React.Fragment, null, fieldThatShowRangeTitle == item ? _renderRangeTitle() : null, __jsx(Row, {\n          style: {\n            width: '100%',\n            padding: '2px 0px'\n          }\n        }, __jsx(Col, {\n          span: 11\n        }, __jsx(\"div\", {\n          id: \"yearPopUpContainer-1\"\n        }, __jsx(AutoComplete, {\n          allowClear: true,\n          placeholder: \"Year\",\n          dropdownMatchSelectWidth: false,\n          dropdownMenuStyle: {\n            height: \"130px\"\n          },\n          value: _.get(dropDownSearchValue, 'minYear') || undefined,\n          onSelect: e => {\n            setFilterGroup(_objectSpread(_objectSpread({}, filterGroup), {}, {\n              yearRange: [e, _.get(filterGroup, 'yearRange[1]')]\n            }));\n          },\n          onDropdownVisibleChange: open => {\n            setIsDropDownOpen(open);\n          },\n          onBlur: () => {\n            setDropDownSearchValue(_objectSpread(_objectSpread({}, dropDownSearchValue), {}, {\n              minYear: _.get(filterGroup, 'yearRange[0]')\n            }));\n          },\n          onChange: v => {\n            //On clear\n            if (!v && _.indexOf(_.get(getFilteredDropDownOptions(), 'minYears') || [], dropDownSearchValue.minYear) != -1 && _.get(filterGroup, 'yearRange[0]') == dropDownSearchValue.minYear) {\n              setFilterGroup(_objectSpread(_objectSpread({}, filterGroup), {}, {\n                yearRange: [v, !_.isArray(filterGroup.yearRange) || !isValidNumber(filterGroup.yearRange[1]) ? undefined : parseInt(filterGroup.yearRange[1])]\n              }));\n            } else {\n              setDropDownSearchValue(_objectSpread(_objectSpread({}, dropDownSearchValue), {}, {\n                minYear: v\n              }));\n            }\n          },\n          onSearch: v => {\n            if (!v || _.get(filterGroup, 'yearRange[0]') == v) {\n              setDropDownOptions(_objectSpread(_objectSpread({}, dropDownOptions), {}, {\n                minYears: _.get(getFilteredDropDownOptions(), 'minYears')\n              }));\n            } else {\n              let newData = _.filter(_.get(getFilteredDropDownOptions(), 'minYears') || [], function (item) {\n                let regex = new RegExp(`^${v}`, 'i');\n                return regex.test(`${item}`);\n              });\n\n              setDropDownOptions(_objectSpread(_objectSpread({}, dropDownOptions), {}, {\n                minYears: newData\n              }));\n            }\n          },\n          getPopupContainer: () => document.getElementById('yearPopUpContainer-1')\n        }, _.isArray(_.get(dropDownOptions, 'minYears')) && !_.isEmpty(_.get(dropDownOptions, 'minYears')) ? _.map(dropDownOptions.minYears, function (item, index) {\n          return __jsx(AutoComplete.Option, {\n            key: `minYear-${index}`,\n            value: `${item}`\n          }, item);\n        }) : null))), __jsx(Col, {\n          span: 11,\n          offset: 2\n        }, __jsx(\"div\", {\n          id: \"yearPopUpContainer-2\"\n        }, __jsx(AutoComplete, {\n          allowClear: true,\n          placeholder: \"Year\",\n          dropdownMatchSelectWidth: false,\n          dropdownMenuStyle: {\n            height: \"130px\"\n          },\n          value: _.get(dropDownSearchValue, 'maxYear') || undefined,\n          onSelect: v => {\n            setFilterGroup(_objectSpread(_objectSpread({}, filterGroup), {}, {\n              yearRange: [_.get(filterGroup, 'yearRange[0]'), v]\n            }));\n          },\n          onDropdownVisibleChange: open => {\n            setIsDropDownOpen(open);\n          },\n          onBlur: () => {\n            setDropDownSearchValue(_objectSpread(_objectSpread({}, dropDownSearchValue), {}, {\n              maxYear: _.get(filterGroup, 'yearRange[1]')\n            }));\n          },\n          onChange: v => {\n            //On clear\n            if (!v && _.indexOf(_.get(getFilteredDropDownOptions(), 'maxYears') || [], dropDownSearchValue.maxYear) != -1 && _.get(filterGroup, 'yearRange[1]') == dropDownSearchValue.maxYear) {\n              setFilterGroup(_objectSpread(_objectSpread({}, filterGroup), {}, {\n                yearRange: [_.get(filterGroup, 'yearRange[0]'), v]\n              }));\n            } else {\n              setDropDownSearchValue(_objectSpread(_objectSpread({}, dropDownSearchValue), {}, {\n                maxYear: v\n              }));\n            }\n          },\n          onSearch: v => {\n            if (!v || _.get(filterGroup, 'yearRange[1]') == v) {\n              setDropDownOptions(_objectSpread(_objectSpread({}, dropDownOptions), {}, {\n                maxYears: _.get(getFilteredDropDownOptions(), 'maxYears')\n              }));\n            } else {\n              let newData = _.filter(_.get(getFilteredDropDownOptions(), 'maxYears') || [], function (item) {\n                let regex = new RegExp(`^${v}`, 'i');\n                return regex.test(`${item}`);\n              });\n\n              setDropDownOptions(_objectSpread(_objectSpread({}, dropDownOptions), {}, {\n                maxYears: newData\n              }));\n            }\n          },\n          getPopupContainer: () => document.getElementById('yearPopUpContainer-2')\n        }, _.isArray(_.get(dropDownOptions, 'maxYears')) && !_.isEmpty(_.get(dropDownOptions, 'maxYears')) ? _.map(dropDownOptions.maxYears, function (item, index) {\n          return __jsx(AutoComplete.Option, {\n            key: `maxYear-${index}`,\n            value: `${item}`\n          }, item);\n        }) : null)))));\n\n      case 'price':\n        return __jsx(React.Fragment, null, fieldThatShowRangeTitle == item ? _renderRangeTitle() : null, __jsx(Row, {\n          style: {\n            width: '100%',\n            padding: '2px 0px'\n          }\n        }, __jsx(Col, {\n          span: 11\n        }, __jsx(\"div\", {\n          id: \"pricePopUpContainer-1\"\n        }, __jsx(AutoComplete, {\n          allowClear: true,\n          placeholder: \"Price\",\n          dropdownMenuStyle: {\n            height: \"130px\"\n          },\n          dropdownMatchSelectWidth: false,\n          value: dropDownSearchValue.minPrice || undefined,\n          onSelect: e => {\n            setFilterGroup(_objectSpread(_objectSpread({}, filterGroup), {}, {\n              priceRange: [e, _.get(filterGroup, 'priceRange[1]')]\n            }));\n          },\n          onDropdownVisibleChange: open => {\n            setIsDropDownOpen(open);\n          },\n          dataSource: _.map(dropDownOptions.minPrices, function (item, index) {\n            return __jsx(AutoComplete.Option, {\n              key: `minPrice-${index}`,\n              value: item\n            }, _.upperCase(formatNumber(item, 'auto', true, 0)));\n          }),\n          onBlur: () => {\n            setDropDownSearchValue(_objectSpread(_objectSpread({}, dropDownSearchValue), {}, {\n              minPrice: `${_.get(filterGroup, 'priceRange[0]') || ''}`\n            }));\n          },\n          onChange: v => {\n            //On clear\n            if (!v && _.indexOf(_.get(getFilteredDropDownOptions(), 'minPrices') || [], dropDownSearchValue.minPrice) != -1 && _.get(filterGroup, 'priceRange[0]') == dropDownSearchValue.minPrice) {\n              setFilterGroup(_objectSpread(_objectSpread({}, filterGroup), {}, {\n                priceRange: [v, !_.isArray(filterGroup.priceRange) || !isValidNumber(filterGroup.priceRange[1]) ? undefined : parseInt(filterGroup.priceRange[1])]\n              }));\n            } else {\n              setDropDownSearchValue(_objectSpread(_objectSpread({}, dropDownSearchValue), {}, {\n                minPrice: parseFloat(v) || 0\n              }));\n            }\n          },\n          onSearch: v => {\n            if (!v || _.get(filterGroup, 'priceRange[0]') == v) {\n              setDropDownOptions(_objectSpread(_objectSpread({}, dropDownOptions), {}, {\n                minPrices: _.get(getFilteredDropDownOptions(), 'minPrices')\n              }));\n            } else {\n              let newData = _.compact([_.find(_.get(getFilteredDropDownOptions(), 'minPrices') || [], function (item) {\n                return parseFloat(v) <= parseFloat(item);\n              })]);\n\n              setDropDownOptions(_objectSpread(_objectSpread({}, dropDownOptions), {}, {\n                minPrices: newData\n              }));\n            }\n          },\n          getPopupContainer: () => document.getElementById('pricePopUpContainer-1')\n        }))), __jsx(Col, {\n          span: 11,\n          offset: 2\n        }, __jsx(\"div\", {\n          id: \"pricePopUpContainer-2\"\n        }, __jsx(AutoComplete, {\n          allowClear: true,\n          placeholder: \"Price\",\n          dropdownMenuStyle: {\n            height: \"130px\"\n          },\n          dropdownMatchSelectWidth: false,\n          value: dropDownSearchValue.maxPrice || undefined,\n          onSelect: e => {\n            setFilterGroup(_objectSpread(_objectSpread({}, filterGroup), {}, {\n              priceRange: [_.get(filterGroup, 'priceRange[0]'), e]\n            }));\n          },\n          onDropdownVisibleChange: open => {\n            setIsDropDownOpen(open);\n          },\n          dataSource: _.map(dropDownOptions.maxPrices, function (item, index) {\n            return __jsx(AutoComplete.Option, {\n              key: `maxPrice-${index}`,\n              value: item\n            }, _.upperCase(formatNumber(item, 'auto', true, 0)));\n          }),\n          onBlur: () => {\n            setDropDownSearchValue(_objectSpread(_objectSpread({}, dropDownSearchValue), {}, {\n              maxPrice: `${_.get(filterGroup, 'priceRange[1]') || ''}`\n            }));\n          },\n          onChange: v => {\n            //On clear\n            if (!v && _.indexOf(_.get(getFilteredDropDownOptions(), 'maxPrices') || [], dropDownSearchValue.maxPrice) != -1 && _.get(filterGroup, 'priceRange[1]') == dropDownSearchValue.maxPrice) {\n              setFilterGroup(_objectSpread(_objectSpread({}, filterGroup), {}, {\n                priceRange: [_.get(filterGroup, 'priceRange[0]'), v]\n              }));\n            } else {\n              setDropDownSearchValue(_objectSpread(_objectSpread({}, dropDownSearchValue), {}, {\n                maxPrice: parseFloat(v) || 0\n              }));\n            }\n          },\n          onSearch: v => {\n            if (!v || _.get(filterGroup, 'priceRange[1]') == v) {\n              setDropDownOptions(_objectSpread(_objectSpread({}, dropDownOptions), {}, {\n                maxPrices: _.get(getFilteredDropDownOptions(), 'maxPrices')\n              }));\n            } else {\n              let newData = _.compact([_.find(_.reverse(_.get(getFilteredDropDownOptions(), 'maxPrices')) || [], function (item) {\n                return parseFloat(v) <= parseFloat(item);\n              })]);\n\n              setDropDownOptions(_objectSpread(_objectSpread({}, dropDownOptions), {}, {\n                maxPrices: newData\n              }));\n            }\n          },\n          getPopupContainer: () => document.getElementById('pricePopUpContainer-2')\n        })))));\n\n      case 'engineCapacity':\n        return __jsx(React.Fragment, null, fieldThatShowRangeTitle == item ? _renderRangeTitle() : null, __jsx(Row, {\n          style: {\n            width: '100%',\n            padding: '2px 0px'\n          }\n        }, __jsx(Col, {\n          span: 11\n        }, __jsx(\"div\", {\n          className: \"margin-bottom-xs\",\n          id: \"engineCapacityPopUpContainer-1\"\n        }, __jsx(AutoComplete, {\n          allowClear: true,\n          placeholder: \"Engine Capacity\",\n          dropdownMenuStyle: {\n            height: \"130px\"\n          },\n          dropdownMatchSelectWidth: false,\n          value: dropDownSearchValue.minEngineCapacity || undefined,\n          onSelect: e => {\n            setFilterGroup(_objectSpread(_objectSpread({}, filterGroup), {}, {\n              engineCapacityRange: [e, _.get(filterGroup, 'engineCapacityRange[1]')]\n            }));\n          },\n          onDropdownVisibleChange: open => {\n            setIsDropDownOpen(open);\n          },\n          dataSource: _.map(dropDownOptions.minEngineCapacities, function (item, index) {\n            return {\n              text: `${formatNumber(item, null, true, 1)} cc`,\n              value: item\n            };\n          }),\n          onBlur: () => {\n            setDropDownSearchValue(_objectSpread(_objectSpread({}, dropDownSearchValue), {}, {\n              minEngineCapacity: `${_.get(filterGroup, 'engineCapacityRange[0]') || ''}`\n            }));\n          },\n          onChange: v => {\n            //On clear\n            if (!v && _.indexOf(_.get(getFilteredDropDownOptions(), 'minEngineCapacities') || [], dropDownSearchValue.minEngineCapacity) != -1 && _.get(filterGroup, 'engineCapacityRange[0]') == dropDownSearchValue.minEngineCapacity) {\n              setFilterGroup(_objectSpread(_objectSpread({}, filterGroup), {}, {\n                engineCapacityRange: [v, !_.isArray(filterGroup.engineCapacityRange) || !isValidNumber(filterGroup.engineCapacityRange[1]) ? undefined : parseInt(filterGroup.engineCapacityRange[1])]\n              }));\n            } else {\n              setDropDownSearchValue(_objectSpread(_objectSpread({}, dropDownSearchValue), {}, {\n                minEngineCapacity: parseFloat(v) || 0\n              }));\n            }\n          },\n          onSearch: v => {\n            if (!v || _.get(filterGroup, 'engineCapacityRange[0]') == v) {\n              setDropDownOptions(_objectSpread(_objectSpread({}, dropDownOptions), {}, {\n                minEngineCapacities: _.get(getFilteredDropDownOptions(), 'minEngineCapacities')\n              }));\n            } else {\n              let newData = _.compact([_.find(_.get(getFilteredDropDownOptions(), 'minEngineCapacities') || [], function (item) {\n                return parseFloat(v) <= parseFloat(item);\n              })]);\n\n              setDropDownOptions(_objectSpread(_objectSpread({}, dropDownOptions), {}, {\n                minEngineCapacities: newData\n              }));\n            }\n          },\n          getPopupContainer: () => document.getElementById('engineCapacityPopUpContainer-1')\n        }))), __jsx(Col, {\n          span: 11,\n          offset: 2\n        }, __jsx(\"div\", {\n          id: \"engineCapacityPopUpContainer-2\"\n        }, __jsx(AutoComplete, {\n          allowClear: true,\n          placeholder: \"Engine Capacity\",\n          dropdownMenuStyle: {\n            height: \"130px\"\n          },\n          dropdownMatchSelectWidth: false,\n          value: dropDownSearchValue.maxEngineCapacity || undefined,\n          onSelect: e => {\n            setFilterGroup(_objectSpread(_objectSpread({}, filterGroup), {}, {\n              engineCapacityRange: [_.get(filterGroup, 'engineCapacityRange[0]'), e]\n            }));\n          },\n          onDropdownVisibleChange: open => {\n            setIsDropDownOpen(open);\n          },\n          dataSource: _.map(dropDownOptions.maxEngineCapacities, function (item, index) {\n            return {\n              text: `${formatNumber(item, null, true, 1)} cc`,\n              value: item\n            };\n          }),\n          onBlur: () => {\n            setDropDownSearchValue(_objectSpread(_objectSpread({}, dropDownSearchValue), {}, {\n              maxEngineCapacity: `${_.get(filterGroup, 'engineCapacityRange[1]') || ''}`\n            }));\n          },\n          onChange: v => {\n            //On clear\n            if (!v && _.indexOf(_.get(getFilteredDropDownOptions(), 'maxEngineCapacities') || [], dropDownSearchValue.maxEngineCapacity) != -1 && _.get(filterGroup, 'engineCapacityRange[1]') == dropDownSearchValue.maxEngineCapacity) {\n              setFilterGroup(_objectSpread(_objectSpread({}, filterGroup), {}, {\n                engineCapacityRange: [_.get(filterGroup, 'engineCapacityRange[0]'), v]\n              }));\n            } else {\n              setDropDownSearchValue(_objectSpread(_objectSpread({}, dropDownSearchValue), {}, {\n                maxEngineCapacity: parseFloat(v) || 0\n              }));\n            }\n          },\n          onSearch: v => {\n            if (!v || _.get(filterGroup, 'engineCapacityRange[1]') == v) {\n              setDropDownOptions(_objectSpread(_objectSpread({}, dropDownOptions), {}, {\n                maxEngineCapacities: _.get(getFilteredDropDownOptions(), 'maxEngineCapacities')\n              }));\n            } else {\n              let newData = _.compact([_.find(_.reverse(_.get(getFilteredDropDownOptions(), 'maxEngineCapacities')) || [], function (item) {\n                return parseFloat(v) <= parseFloat(item);\n              })]);\n\n              setDropDownOptions(_objectSpread(_objectSpread({}, dropDownOptions), {}, {\n                maxEngineCapacities: newData\n              }));\n            }\n          },\n          getPopupContainer: () => document.getElementById('engineCapacityPopUpContainer-2')\n        })))));\n\n      case 'mileage':\n        return __jsx(React.Fragment, null, fieldThatShowRangeTitle == item ? _renderRangeTitle() : null, __jsx(Row, {\n          style: {\n            width: '100%',\n            padding: '2px 0px'\n          }\n        }, __jsx(Col, {\n          span: 11\n        }, __jsx(\"div\", {\n          id: \"mileagePopUpContainer-1\"\n        }, __jsx(AutoComplete, {\n          allowClear: true,\n          placeholder: \"Mileage\",\n          dropdownMenuStyle: {\n            height: \"130px\"\n          },\n          dropdownMatchSelectWidth: false,\n          value: dropDownSearchValue.minMileage || undefined,\n          onSelect: e => {\n            setFilterGroup(_objectSpread(_objectSpread({}, filterGroup), {}, {\n              mileageRange: [e, _.get(filterGroup, 'mileageRange[1]')]\n            }));\n          },\n          onDropdownVisibleChange: open => {\n            setIsDropDownOpen(open);\n          },\n          dataSource: _.map(dropDownOptions.minMileages, function (item, index) {\n            return {\n              text: `${formatNumber(item, null, true, 0)} KM`,\n              value: item\n            };\n          }),\n          onBlur: () => {\n            setDropDownSearchValue(_objectSpread(_objectSpread({}, dropDownSearchValue), {}, {\n              minMileage: `${_.get(filterGroup, 'mileageRange[0]') || ''}`\n            }));\n          },\n          onChange: v => {\n            //On clear\n            if (!v && _.indexOf(_.get(getFilteredDropDownOptions(), 'minMileages') || [], dropDownSearchValue.minMileage) != -1 && _.get(filterGroup, 'mileageRange[0]') == dropDownSearchValue.minMileage) {\n              setFilterGroup(_objectSpread(_objectSpread({}, filterGroup), {}, {\n                mileageRange: [v, !_.isArray(filterGroup.mileageRange) || !isValidNumber(filterGroup.mileageRange[1]) ? undefined : parseInt(filterGroup.mileageRange[1])]\n              }));\n            } else {\n              setDropDownSearchValue(_objectSpread(_objectSpread({}, dropDownSearchValue), {}, {\n                minMileage: parseFloat(v) || 0\n              }));\n            }\n          },\n          onSearch: v => {\n            if (!v || _.get(filterGroup, 'mileageRange[0]') == v) {\n              setDropDownOptions(_objectSpread(_objectSpread({}, dropDownOptions), {}, {\n                minMileages: _.get(getFilteredDropDownOptions(), 'minMileages')\n              }));\n            } else {\n              let newData = _.compact([_.find(_.get(getFilteredDropDownOptions(), 'minMileages') || [], function (item) {\n                return parseFloat(v) <= parseFloat(item);\n              })]);\n\n              setDropDownOptions(_objectSpread(_objectSpread({}, dropDownOptions), {}, {\n                minMileages: newData\n              }));\n            }\n          },\n          getPopupContainer: () => document.getElementById('mileagePopUpContainer-1')\n        }))), __jsx(Col, {\n          span: 11,\n          offset: 2\n        }, __jsx(\"div\", {\n          id: \"mileagePopUpContainer-2\"\n        }, __jsx(AutoComplete, {\n          allowClear: true,\n          placeholder: \"Mileage\",\n          dropdownMenuStyle: {\n            height: \"130px\"\n          },\n          dropdownMatchSelectWidth: false,\n          value: dropDownSearchValue.maxMileage || undefined,\n          onSelect: e => {\n            setFilterGroup(_objectSpread(_objectSpread({}, filterGroup), {}, {\n              mileageRange: [_.get(filterGroup, 'mileageRange[0]'), e]\n            }));\n          },\n          onDropdownVisibleChange: open => {\n            setIsDropDownOpen(open);\n          },\n          dataSource: _.map(dropDownOptions.maxMileages, function (item, index) {\n            return {\n              text: `${formatNumber(item, null, true, 0)} KM`,\n              value: item\n            };\n          }),\n          onBlur: () => {\n            setDropDownSearchValue(_objectSpread(_objectSpread({}, dropDownSearchValue), {}, {\n              maxMileage: `${_.get(filterGroup, 'mileageRange[1]') || ''}`\n            }));\n          },\n          onChange: v => {\n            //On clear\n            if (!v && _.indexOf(_.get(getFilteredDropDownOptions(), 'maxMileages') || [], dropDownSearchValue.maxMileage) != -1 && _.get(filterGroup, 'mileageRange[1]') == dropDownSearchValue.maxMileage) {\n              setFilterGroup(_objectSpread(_objectSpread({}, filterGroup), {}, {\n                mileageRange: [_.get(filterGroup, 'mileageRange[0]'), v]\n              }));\n            } else {\n              setDropDownSearchValue(_objectSpread(_objectSpread({}, dropDownSearchValue), {}, {\n                maxMileage: parseFloat(v) || 0\n              }));\n            }\n          },\n          onSearch: v => {\n            if (!v || _.get(filterGroup, 'mileageRange[1]') == v) {\n              setDropDownOptions(_objectSpread(_objectSpread({}, dropDownOptions), {}, {\n                maxMileages: _.get(getFilteredDropDownOptions(), 'maxMileages')\n              }));\n            } else {\n              let newData = _.compact([_.find(_.reverse(_.get(getFilteredDropDownOptions(), 'maxMileages')) || [], function (item) {\n                return parseFloat(v) <= parseFloat(item);\n              })]);\n\n              setDropDownOptions(_objectSpread(_objectSpread({}, dropDownOptions), {}, {\n                maxMileages: newData\n              }));\n            }\n          },\n          getPopupContainer: () => document.getElementById('mileagePopUpContainer-2')\n        })))));\n\n      default:\n        return null;\n    }\n  };\n\n  return __jsx(\"span\", {\n    className: \"d-inline-block width-100\",\n    ref: containerRef,\n    style: _objectSpread(_objectSpread({}, props.style), {}, {\n      position: 'relative'\n    })\n  }, __jsx(Card, {\n    bordered: false,\n    title: \"Quick Filter\",\n    size: \"small\",\n    className: \"width-100 card-padding-0\"\n  }, __jsx(\"div\", null, __jsx(\"div\", {\n    ref: formRef,\n    className: \"padding-y-sm\"\n  }, __jsx(Form // {...layout}\n  , {\n    name: \"basic\" // onSubmit={handleSubmit}\n\n  }, notEmptyLength(optionsFields) ? _.map(optionsFields, function (option, i) {\n    return __jsx(\"div\", {\n      key: 'optionsFields' + i,\n      ref: inputRefs[`${option}Ref`],\n      className: \"\"\n    }, _renderFormItem(option));\n  }) : null))), __jsx(\"div\", {\n    className: \"background-white\",\n    ref: moreOptionButtonRef\n  }, notEmptyLength(collapseFields) ? __jsx(Button, {\n    type: \"primary\",\n    className: \"w-100\",\n    onClick: null,\n    style: {\n      marginTop: '10px'\n    },\n    id: \"moreOptions\",\n    onClick: e => {\n      setMoreOptionModalVisible(true);\n    }\n  }, \"More Options\") : null)), __jsx(\"span\", {\n    className: \"d-inline-block cursor-pointer\",\n    style: {\n      position: 'absolute',\n      right: 18,\n      top: 7\n    }\n  }, __jsx(Tooltip, {\n    title: \"Reset Filter\"\n  }, __jsx(Button, {\n    style: {\n      border: 'none',\n      background: 'none',\n      color: 'red',\n      padding: 0,\n      fontSize: 12,\n      fontWeight: 500\n    },\n    className: \"w-100 h-100\",\n    onClick: e => {\n      resetFilterGroup();\n    }\n  }, __jsx(Icon, {\n    type: \"reload\"\n  })))), __jsx(\"div\", {\n    id: \"moreOptionModal\",\n    className: `background-white ${moreOptionModalVisible ? 'd-inline-block' : 'd-none'}`,\n    ref: moreOptionModalRef,\n    style: {\n      position: 'absolute',\n      right: !containerRef || !containerRef.current || !isValidNumber(containerRef.current.getBoundingClientRect().width) ? `250px` : `${containerRef.current.getBoundingClientRect().width + modalMargin}px`,\n      top: 0,\n      bottom: 0,\n      margin: 0,\n      width: `${moreOptionModalWidth}px`,\n      height: 'fit-content'\n    }\n  }, moreOptionModalVisible ? __jsx(Card, {\n    bordered: false,\n    title: \"More Options\",\n    size: \"small\",\n    className: `width-100 thin-border`\n  }, __jsx(Form // {...layout}\n  , {\n    name: \"basic\" // onSubmit={handleSubmit}\n\n  }, notEmptyLength(collapseFields) ? _.map(collapseFields, function (option) {\n    return isCollapse(option) ? _renderFormItem(option) : null;\n  }) : null)) : null), containerRef.current ? __jsx(React.Fragment, null, __jsx(MakeModal, {\n    visible: makeModalVisible,\n    onCancel: e => {\n      setMakeModalVisible(false);\n    },\n    style: {\n      left: !containerRef || !containerRef.current || !isValidNumber(containerRef.current.getBoundingClientRect().left) ? 0 : notEmptyLength(collapseFields) && moreOptionModalVisible ? `${containerRef.current.getBoundingClientRect().left - modalWidth - modalMargin - moreOptionModalWidth - modalMargin}px` : `${containerRef.current.getBoundingClientRect().left - modalWidth - modalMargin}px`,\n      top: !containerRef || !containerRef.current || !isValidNumber(containerRef.current.getBoundingClientRect().top) ? 0 : `${containerRef.current.getBoundingClientRect().top < props.app.menuHeight ? props.app.menuHeight : containerRef.current.getBoundingClientRect().top}px`,\n      margin: 0\n    },\n    closable: false,\n    maskClosable: true,\n    className: \"no-padding-modal-body\",\n    width: `${modalWidth}px`,\n    onChange: data => {\n      setFilterGroup(_objectSpread(_objectSpread({}, filterGroup), {}, {\n        make: _.toLower(data),\n        model: undefined\n      }));\n    },\n    bodyStyle: {\n      maxHeight: containerHeight\n    },\n    selectedValue: filterGroup.make,\n    id: \"make-modal\",\n    options: notEmptyLength(origOptions.makeList) ? origOptions.makeList : []\n  }), __jsx(ModelModal, {\n    visible: modelModalVisible,\n    onCancel: e => {\n      setModelModalVisible(false);\n    },\n    style: {\n      left: !containerRef || !containerRef.current || !isValidNumber(containerRef.current.getBoundingClientRect().left) ? 0 : notEmptyLength(collapseFields) && moreOptionModalVisible ? `${containerRef.current.getBoundingClientRect().left - modalWidth - modalMargin - moreOptionModalWidth - modalMargin}px` : `${containerRef.current.getBoundingClientRect().left - modalWidth - modalMargin}px`,\n      top: !containerRef || !containerRef.current || !isValidNumber(containerRef.current.getBoundingClientRect().top) ? 0 : `${containerRef.current.getBoundingClientRect().top < props.app.menuHeight ? props.app.menuHeight : containerRef.current.getBoundingClientRect().top}px`,\n      margin: 0\n    },\n    closable: false,\n    maskClosable: true,\n    className: \"no-padding-modal-body\",\n    width: `${modalWidth}px`,\n    onChange: data => {\n      setFilterGroup(_objectSpread(_objectSpread({}, filterGroup), {}, {\n        model: _.toLower(data)\n      }));\n    },\n    bodyStyle: {\n      maxHeight: containerHeight\n    },\n    selectedValue: filterGroup.model,\n    id: \"model-modal\",\n    options: _.isArray(modelOptions) && notEmptyLength(modelOptions) && filterGroup.make ? modelOptions : null,\n    loading: modelLoading\n  }), __jsx(StateModal, {\n    visible: stateModalVisible,\n    onCancel: e => {\n      setStateModalVisible(false);\n    },\n    style: {\n      left: !containerRef || !containerRef.current || !isValidNumber(containerRef.current.getBoundingClientRect().left) ? 0 : notEmptyLength(collapseFields) && moreOptionModalVisible ? `${containerRef.current.getBoundingClientRect().left - modalWidth - modalMargin - moreOptionModalWidth - modalMargin}px` : `${containerRef.current.getBoundingClientRect().left - modalWidth - modalMargin}px`,\n      top: !containerRef || !containerRef.current || !isValidNumber(containerRef.current.getBoundingClientRect().top) ? 0 : `${containerRef.current.getBoundingClientRect().top < props.app.menuHeight ? props.app.menuHeight : containerRef.current.getBoundingClientRect().top}px`,\n      margin: 0\n    },\n    closable: false,\n    maskClosable: true,\n    className: \"no-padding-modal-body\",\n    width: `${modalWidth}px`,\n    onChange: data => {\n      setFilterGroup(_objectSpread(_objectSpread({}, filterGroup), {}, {\n        state: _.toLower(data),\n        area: undefined\n      }));\n    },\n    bodyStyle: {\n      maxHeight: containerHeight\n    },\n    selectedValue: filterGroup.state,\n    id: \"state-modal\",\n    options: isObject(props.availableFilterOption) ? props.availableFilterOption.stateList : notEmptyLength(origOptions.stateList) ? origOptions.stateList : null\n  }), __jsx(AreaModal, {\n    visible: areaModalVisible,\n    onCancel: e => {\n      setAreaModalVisible(false);\n    },\n    style: {\n      left: !containerRef || !containerRef.current || !isValidNumber(containerRef.current.getBoundingClientRect().left) ? 0 : notEmptyLength(collapseFields) && moreOptionModalVisible ? `${containerRef.current.getBoundingClientRect().left - modalWidth - modalMargin - moreOptionModalWidth - modalMargin}px` : `${containerRef.current.getBoundingClientRect().left - modalWidth - modalMargin}px`,\n      top: !containerRef || !containerRef.current || !isValidNumber(containerRef.current.getBoundingClientRect().top) ? 0 : `${containerRef.current.getBoundingClientRect().top < props.app.menuHeight ? props.app.menuHeight : containerRef.current.getBoundingClientRect().top}px`,\n      margin: 0\n    },\n    closable: false,\n    maskClosable: true,\n    className: \"no-padding-modal-body\",\n    width: `${modalWidth}px`,\n    onChange: data => {\n      setFilterGroup(_objectSpread(_objectSpread({}, filterGroup), {}, {\n        area: _.toLower(data)\n      }));\n    },\n    bodyStyle: {\n      maxHeight: containerHeight\n    },\n    selectedValue: filterGroup.area,\n    id: \"area-modal\",\n    options: _.isArray(_.get(props.availableFilterOption, ['areaList'])) && !_.isEmpty(_.get(props.availableFilterOption, ['areaList'])) ? _.get(props.availableFilterOption, ['areaList']) : [],\n    loading: modelLoading\n  }), __jsx(BodyTypeModal, {\n    visible: bodyTypeModalVisible,\n    onCancel: e => {\n      setBodyTypeModalVisible(false);\n    },\n    style: {\n      left: !containerRef || !containerRef.current || !isValidNumber(containerRef.current.getBoundingClientRect().left) ? 0 : notEmptyLength(collapseFields) && moreOptionModalVisible ? `${containerRef.current.getBoundingClientRect().left - modalWidth - modalMargin - moreOptionModalWidth - modalMargin}px` : `${containerRef.current.getBoundingClientRect().left - modalWidth - modalMargin}px`,\n      top: !containerRef || !containerRef.current || !isValidNumber(containerRef.current.getBoundingClientRect().top) ? 0 : `${containerRef.current.getBoundingClientRect().top < props.app.menuHeight ? props.app.menuHeight : containerRef.current.getBoundingClientRect().top}px`,\n      margin: 0\n    },\n    closable: false,\n    maskClosable: true,\n    className: \"no-padding-modal-body\",\n    width: `${modalWidth}px`,\n    onChange: data => {\n      setFilterGroup(_objectSpread(_objectSpread({}, filterGroup), {}, {\n        bodyType: data != \"all\" && data != null ? _.toLower(data) : ''\n      }));\n    },\n    bodyStyle: {\n      maxHeight: containerHeight\n    },\n    selectedValue: filterGroup.bodyType,\n    id: \"body-type-modal\",\n    options: isObject(props.availableFilterOption) ? props.availableFilterOption.bodyTypeList : notEmptyLength(origOptions.bodyTypeList) ? origOptions.bodyTypeList : null\n  }), __jsx(DrivenWheelModal, {\n    visible: drivenwheelModalVisible,\n    onCancel: e => {\n      setDrivenWheelModalVisible(false);\n    },\n    style: {\n      left: !containerRef || !containerRef.current || !isValidNumber(containerRef.current.getBoundingClientRect().left) ? 0 : notEmptyLength(collapseFields) && moreOptionModalVisible ? `${containerRef.current.getBoundingClientRect().left - modalWidth - modalMargin - moreOptionModalWidth - modalMargin}px` : `${containerRef.current.getBoundingClientRect().left - modalWidth - modalMargin}px`,\n      top: !containerRef || !containerRef.current || !isValidNumber(containerRef.current.getBoundingClientRect().top) ? 0 : `${containerRef.current.getBoundingClientRect().top < props.app.menuHeight ? props.app.menuHeight : containerRef.current.getBoundingClientRect().top}px`,\n      margin: 0\n    },\n    closable: false,\n    maskClosable: true,\n    className: \"no-padding-modal-body\",\n    width: `${modalWidth}px`,\n    onChange: data => {\n      setFilterGroup(_objectSpread(_objectSpread({}, filterGroup), {}, {\n        drivenwheel: _.toLower(data)\n      }));\n    },\n    bodyStyle: {\n      maxHeight: containerHeight\n    },\n    selectedValue: filterGroup.drivenwheel,\n    id: \"driven-wheel-modal\",\n    options: isObject(props.availableFilterOption) ? props.availableFilterOption.drivenWheelList : notEmptyLength(origOptions.drivenWheelList) ? origOptions.drivenWheelList : null\n  }), __jsx(ColorModal, {\n    visible: colorModalVisible,\n    onCancel: e => {\n      setColorModalVisible(false);\n    },\n    style: {\n      left: !containerRef || !containerRef.current || !isValidNumber(containerRef.current.getBoundingClientRect().left) ? 0 : notEmptyLength(collapseFields) && moreOptionModalVisible ? `${containerRef.current.getBoundingClientRect().left - modalWidth - modalMargin - moreOptionModalWidth - modalMargin}px` : `${containerRef.current.getBoundingClientRect().left - modalWidth - modalMargin}px`,\n      top: !containerRef || !containerRef.current || !isValidNumber(containerRef.current.getBoundingClientRect().top) ? 0 : `${containerRef.current.getBoundingClientRect().top < props.app.menuHeight ? props.app.menuHeight : containerRef.current.getBoundingClientRect().top}px`,\n      margin: 0\n    },\n    closable: false,\n    maskClosable: true,\n    className: \"no-padding-modal-body\",\n    width: `${modalWidth}px`,\n    onChange: data => {\n      setFilterGroup(_objectSpread(_objectSpread({}, filterGroup), {}, {\n        color: _.toLower(data)\n      }));\n    },\n    bodyStyle: {\n      maxHeight: containerHeight\n    },\n    selectedValue: filterGroup.color,\n    id: \"color-modal\",\n    options: isObject(props.availableFilterOption) ? props.availableFilterOption.colorList : notEmptyLength(origOptions.colorList) ? origOptions.colorList : null\n  }), __jsx(FuelTypeModal, {\n    visible: fuelTypeModalVisible,\n    onCancel: e => {\n      setFuelTypeModalVisible(false);\n    },\n    style: {\n      left: !containerRef || !containerRef.current || !isValidNumber(containerRef.current.getBoundingClientRect().left) ? 0 : notEmptyLength(collapseFields) && moreOptionModalVisible ? `${containerRef.current.getBoundingClientRect().left - modalWidth - modalMargin - moreOptionModalWidth - modalMargin}px` : `${containerRef.current.getBoundingClientRect().left - modalWidth - modalMargin}px`,\n      top: !containerRef || !containerRef.current || !isValidNumber(containerRef.current.getBoundingClientRect().top) ? 0 : `${containerRef.current.getBoundingClientRect().top < props.app.menuHeight ? props.app.menuHeight : containerRef.current.getBoundingClientRect().top}px`,\n      margin: 0\n    },\n    closable: false,\n    maskClosable: true,\n    className: \"no-padding-modal-body\",\n    width: `${modalWidth}px`,\n    onChange: data => {\n      setFilterGroup(_objectSpread(_objectSpread({}, filterGroup), {}, {\n        fuelType: _.toLower(data)\n      }));\n    },\n    bodyStyle: {\n      maxHeight: containerHeight\n    },\n    selectedValue: filterGroup.fuelType,\n    id: \"fuel-type-modal\",\n    options: isObject(props.availableFilterOption) ? props.availableFilterOption.fuelTypeList : notEmptyLength(origOptions.fuelTypeList) ? origOptions.fuelTypeList : null\n  })) : null);\n};\n\nconst mapStateToProps = state => ({\n  app: state.app,\n  productsList: state.productsList\n});\n\nconst mapDispatchToProps = {\n  fetchProductFilterOptions,\n  clearProductFilterOptions,\n  fetchFilterModalState\n};\nexport default connect(mapStateToProps, mapDispatchToProps)(Form.create()(withRouter(ProductsListFilterForm)));","map":{"version":3,"sources":["/Users/faraheen/ccar-cms-next-mobile/components/product-list/ProductListFilterForm.jsx"],"names":["CloseOutlined","AutoComplete","Button","Card","Col","Form","Icon","Input","Radio","Row","Select","Tooltip","axios","_","isObject","queryString","React","useEffect","useState","connect","convertRangeFormatBack","convertToRangeFormat","formatNumber","isValidNumber","notEmptyLength","objectRemoveEmptyValue","client","carspecNotFoundImage","cnyLionHead","getBodyType","getCarBrand","getColor","getDrivenWheel","getFuelType","getState","clearProductFilterOptions","fetchFilterModalState","fetchProductFilterOptions","withRouter","MakeModal","ModelModal","StateModal","AreaModal","BodyTypeModal","FuelTypeModal","DrivenWheelModal","ColorModal","moment","Option","modalWidth","moreOptionModalWidth","modalMargin","containerRef","createRef","formRef","moreOptionButtonRef","moreOptionModalRef","makeInputRef","modelInputRef","stateInputRef","bodyTypeInputRef","drivenwheelInputRef","colorInputRef","fuelTypeInputRef","makeCloseInputRef","modelCloseInputRef","stateCloseInputRef","areaCloseInputRef","bodyTypeCloseInputRef","drivenwheelCloseInputRef","colorCloseInputRef","fuelTypeCloseInputRef","latestYear","year","yearRange","years","forEach","range","index","push","prices","mileages","engineCapacities","modals","optionsFields","inputRefs","length","ProductsListFilterForm","props","title","setTitle","moreOptionModalVisible","setMoreOptionModalVisible","makeModalVisible","setMakeModalVisible","modelModalVisible","setModelModalVisible","stateModalVisible","setStateModalVisible","areaModalVisible","setAreaModalVisible","bodyTypeModalVisible","setBodyTypeModalVisible","drivenwheelModalVisible","setDrivenWheelModalVisible","colorModalVisible","setColorModalVisible","fuelTypeModalVisible","setFuelTypeModalVisible","fieldThatShowRangeTitle","setFieldThatShowRangeTitle","isDropDownOpen","setIsDropDownOpen","collapseFields","setCollapseFields","containerHeight","setContainerHeight","formActualHeight","setFormActualHeight","filterGroup","setFilterGroup","dropDownSearchValue","setDropDownSearchValue","dropDownOptions","setDropDownOptions","minYears","reverse","cloneDeep","maxYears","minPrices","maxPrices","minMileages","maxMileages","minEngineCapacities","maxEngineCapacities","origOptions","setOrigOptions","makeList","modelList","stateList","areaList","conditionList","transmissionList","yearList","priceList","mileageList","bodyTypeList","drivenWheelList","colorList","fuelTypeList","modelOptions","setModelOptions","areaOptions","setAreaOptions","modelLoading","setModelLoading","initFormConfig","setInitFormConfig","startWatching","setStartWatching","isPlainObject","initFilterGroup","isEmpty","setTimeout","productsList","filterOptions","getOrigOptions","dropdownsearch","get","minYear","maxYear","minPrice","maxPrice","minMileage","maxMileage","minEngineCapacity","maxEngineCapacity","getFilteredDropDownOptions","onChange","controlModalOpen","data","document","addEventListener","handleClickOutside","removeEventListener","isModalOpen","make","getModelOptions","availableFilterOption","isArray","event","current","contains","target","newDropDownOptions","filter","item","value","parseFloat","promises","modal","io","uri","params","filterType","headers","settings","storage","Promise","all","then","responses","options","response","uniqueInfo","catch","err","models","match","res","usedCarPrice","uniqModels","uniqBy","compact","map","model","selectedOption","find","toLower","count","console","log","selectedModal","gotModalOpen","resetFilterGroup","_renderRangeTitle","_renderFormItem","e","margin","marginBottom","padding","textAlign","width","condition","backgroundColor","fontSize","fontWeight","transmission","span","offset","height","state","area","bodyType","color","capitalize","drivenwheel","fuelType","undefined","open","v","indexOf","parseInt","newData","regex","RegExp","test","getElementById","priceRange","upperCase","engineCapacityRange","text","mileageRange","style","position","option","i","marginTop","right","top","border","background","getBoundingClientRect","bottom","isCollapse","left","app","menuHeight","maxHeight","mapStateToProps","mapDispatchToProps","create"],"mappings":"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","sourcesContent":["import { CloseOutlined } from '@ant-design/icons';\nimport { AutoComplete, Button, Card, Col, Form, Icon, Input, Radio, Row, Select, Tooltip } from 'antd';\nimport axios from 'axios';\nimport _, { isObject } from 'lodash';\nimport queryString from 'query-string';\nimport React, { useEffect, useState } from 'react';\nimport { connect } from 'react-redux';\nimport { convertRangeFormatBack, convertToRangeFormat, formatNumber, isValidNumber, notEmptyLength, objectRemoveEmptyValue } from '../../common-function';\nimport client from '../../feathers';\nimport { carspecNotFoundImage, cnyLionHead } from '../../icon';\nimport { getBodyType } from '../../params/bodyTypeList';\nimport { getCarBrand } from '../../params/carBrandsList';\nimport { getColor } from '../../params/colorList';\nimport { getDrivenWheel } from '../../params/drivenWheelList';\nimport { getFuelType } from '../../params/fuelTypeList';\nimport { getState } from '../../params/stateList';\nimport { clearProductFilterOptions, fetchFilterModalState, fetchProductFilterOptions } from '../../redux/actions/productsList-actions';\nimport { withRouter } from 'next/dist/client/router';\nimport MakeModal from './filter-modal/MakeModal';\nimport ModelModal from './filter-modal/ModelModal';\nimport StateModal from './filter-modal/StateModal';\nimport AreaModal from './filter-modal/AreaModal';\nimport BodyTypeModal from './filter-modal/BodyTypeModal';\nimport FuelTypeModal from './filter-modal/FuelTypeModal';\nimport DrivenWheelModal from './filter-modal/DrivenWheelModal';\nimport ColorModal from './filter-modal/ColorModal';\nimport moment from 'moment';\n\n\n\nconst { Option } = Select;\nconst modalWidth = 250;\nconst moreOptionModalWidth = 200;\nconst modalMargin = 20;\nconst containerRef = React.createRef();\nconst formRef = React.createRef();\nconst moreOptionButtonRef = React.createRef();\nconst moreOptionModalRef = React.createRef();\nconst makeInputRef = React.createRef();\nconst modelInputRef = React.createRef();\nconst stateInputRef = React.createRef();\nconst bodyTypeInputRef = React.createRef();\nconst drivenwheelInputRef = React.createRef();\nconst colorInputRef = React.createRef();\nconst fuelTypeInputRef = React.createRef();\n\nconst makeCloseInputRef = React.createRef();\nconst modelCloseInputRef = React.createRef();\nconst stateCloseInputRef = React.createRef();\nconst areaCloseInputRef = React.createRef();\nconst bodyTypeCloseInputRef = React.createRef();\nconst drivenwheelCloseInputRef = React.createRef();\nconst colorCloseInputRef = React.createRef();\nconst fuelTypeCloseInputRef = React.createRef();\n\nlet latestYear = moment().year();\nlet yearRange = latestYear - 1990 + 1;\nlet years = [];\n_.forEach(_.range(0, yearRange), function (index) {\n    years.push(`${latestYear - index}`);\n})\n// const years = [2021, 2020, 2019, 2018, 2017, 2016, 2015, 2014, 2013, 2012, 2011, 2010, 2009, 2008, 2007, 2006, 2005, 2004, 2003, 2002, 2001, 2000, 1999, 1998, 1997, 1996, 1995, 1994, 1993, 1992, 1991, 1990]\n\nconst prices = ['5000000', '4000000', '3000000', '2000000', '1000000', '950000', '900000', '850000', '800000', '750000', '700000', '650000', '600000', '550000', '500000', '450000', '400000', '350000', '300000', '275000', '250000', '225000', '200000', '175000', '150000', '125000', '100000', '90000', '80000', '70000', '60000', '50000', '40000', '30000', '20000', '10000']\n\nconst mileages = ['500000', '450000', '400000', '350000', '300000', '275000', '250000', '225000', '200000', '175000', '150000', '125000', '100000', '90000', '80000', '70000', '60000', '50000', '40000', '30000', '20000', '10000']\n\nconst engineCapacities = ['4', '3.5', '3', '2.5', '2', '1.5', '1', '0.1']\n\nconst modals = ['make', 'model', 'state', 'area', 'bodyType', 'color', 'fuelType'];\nconst optionsFields = ['title', 'transmission', 'make', 'model', 'state', 'area', 'year', 'price', 'mileage', 'engineCapacity', 'bodyType', 'color', 'fuelType'];\nlet inputRefs = {};\nfor (let index = 0; index < optionsFields.length; index++) {\n    inputRefs[optionsFields[index] + 'Ref'] = React.createRef();\n}\n\n\nconst ProductsListFilterForm = (props) => {\n\n    const [title, setTitle] = useState('')\n    const [moreOptionModalVisible, setMoreOptionModalVisible] = useState(false)\n    const [makeModalVisible, setMakeModalVisible] = useState(false)\n    const [modelModalVisible, setModelModalVisible] = useState(false)\n    const [stateModalVisible, setStateModalVisible] = useState(false)\n    const [areaModalVisible, setAreaModalVisible] = useState(false)\n    const [bodyTypeModalVisible, setBodyTypeModalVisible] = useState(false)\n    const [drivenwheelModalVisible, setDrivenWheelModalVisible] = useState(false)\n    const [colorModalVisible, setColorModalVisible] = useState(false)\n    const [fuelTypeModalVisible, setFuelTypeModalVisible] = useState(false)\n\n    const [fieldThatShowRangeTitle, setFieldThatShowRangeTitle] = useState('year')\n    const [isDropDownOpen, setIsDropDownOpen] = useState(false)\n    const [collapseFields, setCollapseFields] = useState([])\n    const [containerHeight, setContainerHeight] = useState(400)\n    const [formActualHeight, setFormActualHeight] = useState();\n    const [filterGroup, setFilterGroup] = useState({})\n    const [dropDownSearchValue, setDropDownSearchValue] = useState({});\n    const [dropDownOptions, setDropDownOptions] = useState({\n        minYears: _.reverse(_.cloneDeep(years)),\n        maxYears: years,\n        minPrices: _.reverse(_.cloneDeep(prices)),\n        maxPrices: prices,\n        minMileages: _.reverse(_.cloneDeep(mileages)),\n        maxMileages: mileages,\n        minEngineCapacities: _.reverse(_.cloneDeep(engineCapacities)),\n        maxEngineCapacities: engineCapacities,\n\n    });\n    const [origOptions, setOrigOptions] = useState({\n        makeList: [],\n        modelList: [],\n        stateList: [],\n        areaList: [],\n        conditionList: [],\n        transmissionList: [],\n        yearList: [],\n        priceList: [],\n        mileageList: [],\n        bodyTypeList: [],\n        drivenWheelList: [],\n        colorList: [],\n        fuelTypeList: [],\n    })\n    const [modelOptions, setModelOptions] = useState([]);\n    const [areaOptions, setAreaOptions] = useState([]);\n    const [modelLoading, setModelLoading] = useState(false);\n    //Use for collapse filter fields\n    const [initFormConfig, setInitFormConfig] = useState();\n    const [startWatching, setStartWatching] = useState(false);\n\n    useEffect(() => {\n        setStartWatching(false);\n        setFilterGroup(_.isPlainObject(props.initFilterGroup) && !_.isEmpty(props.initFilterGroup) ? props.initFilterGroup : {});\n        setTimeout(() => {\n            setStartWatching(true);\n        }, 500);\n    }, [props.initFilterGroup])\n\n    useEffect(() => {\n        if (!_.isPlainObject(props.productsList.filterOptions) || _.isEmpty(props.productsList.filterOptions)) {\n            getOrigOptions();\n        }\n    }, []);\n    \n    useEffect(() => {\n\n        if (filterGroup.title) {\n            setTitle(filterGroup.title);\n        } else {\n            setTitle('');\n        }\n\n        let dropdownsearch = {};\n\n        if (_.get(filterGroup, 'yearRange[0]')) {\n            dropdownsearch.minYear = `${_.get(filterGroup, 'yearRange[0]')}`;\n        }\n        if (_.get(filterGroup, 'yearRange[1]')) {\n            dropdownsearch.maxYear = `${_.get(filterGroup, 'yearRange[1]')}`;\n        }\n\n        if (_.get(filterGroup, 'priceRange[0]')) {\n            dropdownsearch.minPrice = `${_.get(filterGroup, 'priceRange[0]')}`;\n        }\n        if (_.get(filterGroup, 'priceRange[1]')) {\n            dropdownsearch.maxPrice = `${_.get(filterGroup, 'priceRange[1]')}`;\n        }\n\n        if (_.get(filterGroup, 'mileageRange[0]')) {\n            dropdownsearch.minMileage = `${_.get(filterGroup, 'mileageRange[0]')}`;\n        }\n        if (_.get(filterGroup, 'mileageRange[1]')) {\n            dropdownsearch.maxMileage = `${_.get(filterGroup, 'mileageRange[1]')}`;\n        }\n\n        if (_.get(filterGroup, 'engineCapacityRange[0]')) {\n            dropdownsearch.minEngineCapacity = `${_.get(filterGroup, 'engineCapacityRange[0]')}`;\n        }\n        if (_.get(filterGroup, 'engineCapacityRange[1]')) {\n            dropdownsearch.maxEngineCapacity = `${_.get(filterGroup, 'engineCapacityRange[1]')}`;\n        }\n        setDropDownSearchValue(dropdownsearch);\n        setDropDownOptions(getFilteredDropDownOptions() || []);\n\n\n\n        if (props.onChange && startWatching) {\n            controlModalOpen();\n            let data = _.cloneDeep(filterGroup);\n            data = objectRemoveEmptyValue(data)\n            props.onChange(data);\n        }\n\n\n    }, [filterGroup])\n\n    useEffect(() => {\n        setOrigOptions(_.isPlainObject(props.productsList.filterOptions) && !_.isEmpty(props.productsList.filterOptions) ? props.productsList.filterOptions : {});\n    }, [props.productsList.filterOptions]);\n\n    useEffect(() => {\n\n        // Bind the event listener\n        document.addEventListener(\"mousedown\", handleClickOutside);\n        return () => {\n            // Unbind the event listener on clean up\n            document.removeEventListener(\"mousedown\", handleClickOutside);\n        };\n    }, [makeModalVisible, modelModalVisible, stateModalVisible, areaModalVisible, bodyTypeModalVisible, colorModalVisible, fuelTypeModalVisible, drivenwheelModalVisible, isDropDownOpen])\n\n    useEffect(() => {\n        props.fetchFilterModalState(isModalOpen())\n    }, [makeModalVisible, modelModalVisible, stateModalVisible, areaModalVisible, bodyTypeModalVisible, colorModalVisible, fuelTypeModalVisible, drivenwheelModalVisible])\n\n\n\n    useEffect(() => {\n        if (filterGroup.make) {\n            getModelOptions(!_.isPlainObject(props.availableFilterOption) || !_.isArray(props.availableFilterOption.modelList) || _.isEmpty(props.availableFilterOption.modelList) ? [] : props.availableFilterOption.modelList);\n        }\n    }, [props.availableFilterOption, filterGroup])\n\n\n\n    useEffect(() => {\n    }, [moreOptionModalVisible])\n\n\n    function handleClickOutside(event) {\n\n        if ((!moreOptionModalRef.current || !moreOptionModalRef.current.contains(event.target)) && (!containerRef.current || !containerRef.current.contains(event.target)) && !isModalOpen() && !isDropDownOpen) {\n            setMoreOptionModalVisible(false)\n        }\n    }\n\n    function getFilteredDropDownOptions() {\n        let newDropDownOptions = {\n            minYears: _.reverse(_.cloneDeep(years)),\n            maxYears: years,\n            minPrices: _.reverse(_.cloneDeep(prices)),\n            maxPrices: prices,\n            minMileages: _.reverse(_.cloneDeep(mileages)),\n            maxMileages: mileages,\n            minEngineCapacities: _.reverse(_.cloneDeep(engineCapacities)),\n            maxEngineCapacities: engineCapacities,\n        };\n        if (_.get(filterGroup, 'yearRange[0]')) {\n            newDropDownOptions.maxYears = _.filter(newDropDownOptions.maxYears || [], function (item) {\n                let value = parseFloat(_.get(filterGroup, 'yearRange[0]'));\n                return parseFloat(item) > value;\n            })\n\n        }\n        if (_.get(filterGroup, 'yearRange[1]')) {\n            newDropDownOptions.minYears = _.filter(newDropDownOptions.minYears || [], function (item) {\n                let value = parseFloat(_.get(filterGroup, 'yearRange[1]'));\n                return parseFloat(item) < value;\n            })\n        }\n\n        if (_.get(filterGroup, 'priceRange[0]')) {\n            newDropDownOptions.maxPrices = _.filter(newDropDownOptions.maxPrices || [], function (item) {\n                let value = parseFloat(_.get(filterGroup, 'priceRange[0]'));\n                return parseFloat(item) > value;\n            })\n        }\n        if (_.get(filterGroup, 'priceRange[1]')) {\n            newDropDownOptions.minPrices = _.filter(newDropDownOptions.minPrices || [], function (item) {\n                let value = parseFloat(_.get(filterGroup, 'priceRange[1]'));\n                return parseFloat(item) < value;\n            })\n        }\n\n        if (_.get(filterGroup, 'mileageRange[0]')) {\n            newDropDownOptions.maxMileages = _.filter(newDropDownOptions.maxMileages || [], function (item) {\n                let value = parseFloat(_.get(filterGroup, 'mileageRange[0]'));\n                return parseFloat(item) > value;\n            })\n        }\n        if (_.get(filterGroup, 'mileageRange[1]')) {\n            newDropDownOptions.minMileages = _.filter(newDropDownOptions.minMileages || [], function (item) {\n                let value = parseFloat(_.get(filterGroup, 'mileageRange[1]'));\n                return parseFloat(item) < value;\n            })\n        }\n\n        if (_.get(filterGroup, 'engineCapacityRange[0]')) {\n            newDropDownOptions.maxEngineCapacities = _.filter(newDropDownOptions.maxEngineCapacities || [], function (item) {\n                let value = parseFloat(_.get(filterGroup, 'engineCapacityRange[0]'));\n                return parseFloat(item) > value;\n            })\n        }\n        if (_.get(filterGroup, 'engineCapacityRange[1]')) {\n            newDropDownOptions.minEngineCapacities = _.filter(newDropDownOptions.minEngineCapacities || [], function (item) {\n                let value = parseFloat(_.get(filterGroup, 'engineCapacityRange[1]'));\n                return parseFloat(item) < value;\n            })\n        }\n\n        return newDropDownOptions\n\n    }\n\n    function getOrigOptions() {\n\n        let promises = [];\n        _.forEach(modals, function (modal) {\n            promises.push(\n                axios.get(`${client.io.io.uri}brandFilterTotalV3`, {\n                    params: { filterType: modal },\n                    headers: { 'Authorization': client.settings.storage.storage.storage['feathers-jwt'] }\n                })\n            )\n        })\n\n        Promise.all(promises).then((responses) => {\n            if (_.isArray(responses) && !_.isEmpty((responses))) {\n                let options = {}\n                _.forEach(responses, function (response, index) {\n                    options[`${modals[index]}List`] = response.data.uniqueInfo[`${modals[index]}List`];\n                })\n\n                props.fetchProductFilterOptions(options);\n            }\n        }).catch((err) => {\n            // message.error(err.message);\n        })\n\n    }\n\n    function getModelOptions(models) {\n\n        if (_.isArray(models) && notEmptyLength(models) && filterGroup.make) {\n            setModelOptions([]);\n            setModelLoading(true);\n\n            axios.get(`${client.io.io.uri}priceRangeSearchUsed`,\n                {\n                    params: {\n                        match: {\n                            make: filterGroup.make\n                        },\n                    }\n                }\n            ).then((res) => {\n                setModelLoading(false);\n                if (notEmptyLength(res.data.usedCarPrice)) {\n                    let uniqModels = _.filter(_.cloneDeep(_.uniqBy(res.data.usedCarPrice, 'model')));\n                    uniqModels = _.compact(_.map(uniqModels, function (model) {\n                        let selectedOption = _.find(_.get(props.availableFilterOption, ['modelList']) || [], function (item) {\n                            return _.toLower(item.value) == _.toLower(model.model);\n                        })\n                        if (selectedOption) {\n                            model.count = selectedOption.count;\n                            model.uri = model.uri || carspecNotFoundImage;\n                            return model;\n                        } else {\n                            return null;\n                        }\n                    }))\n                    setModelOptions(_.isArray(uniqModels) && notEmptyLength(uniqModels) ? uniqModels : []);\n                } else {\n                    setModelOptions([])\n                }\n            })\n                .catch((err) => {\n                    console.log(err);\n                    setModelLoading(false);\n                    setModelOptions([]);\n                })\n        } else {\n            setModelOptions([]);\n        }\n    }\n\n\n    function controlModalOpen(selectedModal) {\n        _.forEach(modals, function (modal) {\n            switch (modal) {\n                case 'make':\n                    setMakeModalVisible(selectedModal == modal);\n                    break;\n                case 'model':\n                    setModelModalVisible(selectedModal == modal);\n                    break;\n                case 'state':\n                    setStateModalVisible(selectedModal == modal);\n                    break;\n                case 'area':\n                    setAreaModalVisible(selectedModal == modal);\n                    break;\n                case 'bodyType':\n                    setBodyTypeModalVisible(selectedModal == modal);\n                    break;\n                case 'drivenwheel':\n                    setDrivenWheelModalVisible(selectedModal == modal);\n                    break;\n                case 'color':\n                    setColorModalVisible(selectedModal == modal);\n                    break;\n                case 'fuelType':\n                    setFuelTypeModalVisible(selectedModal == modal);\n                    break;\n                default:\n                    setMakeModalVisible(false);\n                    setModelModalVisible(false);\n                    setStateModalVisible(false);\n                    setAreaModalVisible(false);\n                    setBodyTypeModalVisible(false);\n                    setDrivenWheelModalVisible(false);\n                    setColorModalVisible(false);\n                    setFuelTypeModalVisible(false);\n                    break;\n            }\n        })\n    }\n\n    function isModalOpen() {\n        let gotModalOpen = false;\n        _.forEach(modals, function (modal, index) {\n            switch (modal) {\n                case 'make':\n                    gotModalOpen = makeModalVisible;\n                    break;\n                case 'model':\n                    gotModalOpen = modelModalVisible;\n                    break;\n                case 'state':\n                    gotModalOpen = stateModalVisible;\n                    break;\n                case 'area':\n                    gotModalOpen = areaModalVisible;\n                    break;\n                case 'bodyType':\n                    gotModalOpen = bodyTypeModalVisible;\n                    break;\n                case 'drivenwheel':\n                    gotModalOpen = drivenwheelModalVisible;\n                    break;\n                case 'color':\n                    gotModalOpen = colorModalVisible;\n                    break;\n                case 'fuelType':\n                    gotModalOpen = fuelTypeModalVisible;\n                    break;\n                default:\n                    gotModalOpen = false;\n                    break;\n            }\n            //Break Loop\n            if (gotModalOpen) {\n                return false;\n            }\n        });\n        return gotModalOpen;\n    }\n\n    function resetFilterGroup() {\n        setFilterGroup({});\n    }\n\n    const _renderRangeTitle = () => {\n        return <Row>\n            <Col xs={12} sm={12} md={12} lg={12} xl={12}>\n                <div className=\"width-100 flex-justify-center flex-items-align-center black headline\">\n                    Min\n                </div>\n            </Col>\n            <Col xs={12} sm={12} md={12} lg={12} xl={12}>\n                <div className=\"width-100 flex-justify-center flex-items-align-center black headline\">\n                    Max\n                </div>\n            </Col>\n        </Row>\n    }\n\n    const _renderFormItem = (item) => {\n        switch (item) {\n            case 'title':\n                return (\n                    <React.Fragment>\n                        <div className=\"padding-bottom-xs\">\n                            <Input\n                                placeholder=\"Search Title\"\n                                suffix={\n                                    <Icon type=\"search\" className=\"cursor-pointer\" onClick={(e) => {\n                                        setFilterGroup({\n                                            ...filterGroup,\n                                            title: title,\n                                        })\n                                    }} />\n                                }\n                                value={title}\n                                onChange={(e) => {\n                                    setTitle(e.target.value)\n                                }}\n                                onPressEnter={(e) => {\n                                    setFilterGroup({\n                                        ...filterGroup,\n                                        title: e.target.value\n                                    })\n                                }}\n                            >\n                            </Input>\n                        </div>\n                    </React.Fragment>\n                );\n\n            case 'condition':\n                return (\n                    <React.Fragment>\n\n                        {/* <Row style={{ marginBottom: 5 }}>\n                            <Col span={22} style={{ textAlign: \"left\" }}>\n                                <label style={{ color: '#FBB040', fontWeight: '500', marginLeft: '10px' }}>Condition</label>\n                            </Col>\n                            <Col span={2}>\n                                <CloseOutlined\n                                    style={{ color: \"grey\", fontSize: '13px' }}\n                                    className='cursor-pointer'\n                                    onClick={(e) => { setFilterGroup({ ...filterGroup, condition: '' }) }}\n                                />\n                            </Col>\n                        </Row> */}\n                        <Form.Item style={{ margin: '0px', marginBottom: '0px', padding: '2px 2px 0px 0px' }}>\n                            <Radio.Group className='condition-form ' style={{ textAlign: 'center', width: '100%', padding: '0px' }} value={filterGroup.condition || ''} onChange={(e) => { setFilterGroup({ ...filterGroup, condition: _.toLower(e.target.value) == _.toLower(filterGroup.condition) ? '' : _.toLower(e.target.value) }) }} >\n                                <Row gutter={[10, 0]} type=\"flex\" align=\"middle\" justify=\"space-around\" className='fill-parent'>\n                                    {/* <Col xs={12} sm={12} md={6} lg={6} xl={6}>\n                                                <Radio.Button className=\"w-100\" style={{ opacity: props.app.quickSearchProductadsData.condition === '' ? 1 : 0.5, backgroundColor: \"\", padding: 0 }} value=\"all\">\n                                                    <p style={{ fontSize: \"10px\", textAlign: \"center\", fontWeight: \"bold\" }}>All</p>\n                                                </Radio.Button>\n                                            </Col> */}\n                                    <Col xs={12} sm={12} md={6} lg={6} xl={6}>\n                                        <Radio.Button className=\"w-100\" style={{ backgroundColor: \"\", padding: 0 }} value=\"used\" onClick={(e) => { if (filterGroup.condition == 'used') { setFilterGroup({ ...filterGroup, condition: '' }) } }}>\n                                            <p style={{ fontSize: \"10px\", textAlign: \"center\", fontWeight: \"bold\" }}>USED</p>\n                                        </Radio.Button>\n                                    </Col>\n                                    <Col xs={12} sm={12} md={6} lg={6} xl={6}>\n                                        <Radio.Button className=\"w-100\" style={{ backgroundColor: \"\", padding: 0 }} value=\"recon\" onClick={(e) => { if (filterGroup.condition == 'recon') { setFilterGroup({ ...filterGroup, condition: '' }) } }}>\n                                            <p style={{ fontSize: \"10px\", textAlign: \"center\", fontWeight: \"bold\" }}>RECON</p>\n                                        </Radio.Button>\n                                    </Col>\n                                    <Col xs={12} sm={12} md={6} lg={6} xl={6}>\n                                        <Radio.Button className=\"w-100\" style={{ backgroundColor: \"\", padding: 0 }} value=\"new\" onClick={(e) => { if (filterGroup.condition == 'new') { setFilterGroup({ ...filterGroup, condition: '' }) } }}>\n                                            <p style={{ fontSize: \"10px\", textAlign: \"center\", fontWeight: \"bold\" }}>NEW</p>\n                                        </Radio.Button>\n                                    </Col>\n                                </Row>\n                            </Radio.Group>\n                        </Form.Item>\n                    </React.Fragment>\n                );\n\n            case 'transmission':\n                return (\n                    <React.Fragment>\n\n                        <div className=\"padding-bottom-xs\">\n                            <Radio.Group className=\"w-100 condition-form\" style={{ textAlign: 'center' }} value={filterGroup.transmission || ''} onChange={(e) => { setFilterGroup({ ...filterGroup, transmission: _.toLower(e.target.value) }) }} >\n                                <Row type=\"flex\" align=\"middle\" justify=\"center\" className='fill-parent' >\n                                    <Col xs={24} sm={24} md={24} lg={10} xl={10} >\n                                        {/* <Radio.Button className=\"w-100\" style={{ padding: 0 }} value=\"Automatic\"> <img src=\"/assets/transmission/Automatics.png\" style={{ opacity: 0.6, width: '35%', height : '80%' }} ></img> </Radio.Button> */}\n                                        <Radio.Button className={`w-100 `} style={{ padding: 0 }} value=\"automatic\" onClick={(e) => { if (filterGroup.transmission == 'automatic') { setFilterGroup({ ...filterGroup, transmission: '' }) } }}> <p style={{ fontSize: \"10px\", textAlign: \"center\", fontWeight: \"bold\" }}> Automatic </p> </Radio.Button>\n                                    </Col>\n                                    <Col xs={24} sm={24} md={24} lg={{ span: 10, offset: 4 }} xl={{ span: 10, offset: 4 }} >\n                                        {/* <Radio.Button className=\"w-100\" style={{ padding: 0 }} value=\"Manual\"> <img src=\"/assets/transmission/Manual.png\" style={{ opacity: 0.6, width: '35%', height : '80%'  }} ></img> </Radio.Button> */}\n                                        <Radio.Button className={`w-100 `} style={{ padding: 0 }} value=\"manual\" onClick={(e) => { if (filterGroup.transmission == 'manual') { setFilterGroup({ ...filterGroup, transmission: '' }) } }}> <p style={{ fontSize: \"10px\", textAlign: \"center\", fontWeight: \"bold\" }}> Manual</p> </Radio.Button>\n                                    </Col>\n                                </Row>\n                            </Radio.Group>\n                        </div>\n                    </React.Fragment>\n                );\n\n            case 'make':\n                return (\n                    <React.Fragment>\n                        <div className=\"thin-border round-border-light border-ccar-yellow cursor-pointer flex-justify-space-between flex-items-align-center padding-x-md margin-bottom-xs\"\n                            style={{ height: 30 }}\n                            ref={makeInputRef}\n                            onClick={(e) => {\n                                if (!makeCloseInputRef.current || !makeCloseInputRef.current.contains(e.target)) {\n                                    controlModalOpen('make');\n                                }\n                            }}>\n                            {\n                                filterGroup.make ?\n                                    <React.Fragment>\n                                        <span className='d-inline-block' >\n                                            {_.get(getCarBrand(filterGroup.make), ['value']) || \"\"}\n                                        </span>\n                                        <span className='d-inline-block' ref={makeCloseInputRef}>\n                                            <CloseOutlined\n                                                className='cursor-pointer'\n                                                onClick={(e) => { setFilterGroup({ ...filterGroup, make: '', model: '' }) }} />\n                                        </span>\n                                    </React.Fragment>\n                                    :\n                                    <React.Fragment>\n                                        <span className='d-inline-block grey' >\n                                            Brand\n                                        </span>\n                                        <span className='d-inline-block' >\n                                            <img style={{ width: 25 }} src=\"/assets/carDetails/Car Maker@3x.png\" />\n                                        </span>\n                                    </React.Fragment>\n                            }\n                        </div>\n                    </React.Fragment>\n                );\n\n            case 'model':\n                return (\n                    <React.Fragment>\n                        <div className={`thin-border round-border-light border-ccar-yellow ${filterGroup.make ? 'cursor-pointer' : 'cursor-not-allowed background-grey-lighten-3'} flex-justify-space-between flex-items-align-center padding-x-md  margin-bottom-xs`}\n                            style={{ height: 30 }}\n                            ref={modelInputRef}\n                            onClick={(e) => {\n                                if (filterGroup.make && (!modelCloseInputRef.current || !modelCloseInputRef.current.contains(e.target))) {\n                                    controlModalOpen('model');\n                                }\n                            }}>\n                            {\n                                filterGroup.model ?\n                                    <React.Fragment>\n                                        <span className='d-inline-block capitalize' >\n                                            {filterGroup.model || \"\"}\n                                        </span>\n                                        <span className='d-inline-block' ref={modelCloseInputRef} >\n                                            <CloseOutlined\n                                                className='cursor-pointer'\n                                                onClick={(e) => { setFilterGroup({ ...filterGroup, model: '' }) }} />\n                                        </span>\n                                    </React.Fragment>\n                                    :\n                                    <React.Fragment>\n                                        <span className='d-inline-block grey' >\n                                            Model\n                                        </span>\n                                        <span className='d-inline-block' >\n                                            <img style={{ width: 25 }} src=\"/assets/carDetails/Car Maker@3x.png\" />\n                                        </span>\n                                    </React.Fragment>\n                            }\n                        </div>\n                    </React.Fragment>\n                );\n            case 'state':\n                return (\n                    <React.Fragment>\n                        <div className={`thin-border round-border-light border-ccar-yellow cursor-pointer flex-justify-space-between flex-items-align-center padding-x-md  margin-bottom-xs`}\n                            style={{ height: 30 }}\n                            ref={stateInputRef}\n                            onClick={(e) => {\n                                if (!stateCloseInputRef.current || !stateCloseInputRef.current.contains(e.target)) {\n                                    controlModalOpen('state');\n                                }\n                            }}>\n                            {\n                                filterGroup.state ?\n                                    <React.Fragment>\n                                        <span className='d-inline-block capitalize' >\n                                            {_.get(getState(filterGroup.state), ['value']) || \"\"}\n                                        </span>\n                                        <span className='d-inline-block' ref={stateCloseInputRef} >\n                                            <CloseOutlined\n                                                className='cursor-pointer'\n                                                onClick={(e) => { setFilterGroup({ ...filterGroup, state: '', area: '' }) }} />\n                                        </span>\n                                    </React.Fragment>\n                                    :\n                                    <React.Fragment>\n                                        <span className='d-inline-block grey' >\n                                            State\n                                        </span>\n                                        <span className='d-inline-block' >\n                                            <img style={{ width: 25 }} src=\"/assets/carDetails/Location@3x.png\" />\n                                        </span>\n                                    </React.Fragment>\n                            }\n                        </div>\n                    </React.Fragment>\n                );\n            case 'area':\n                return (\n                    <React.Fragment>\n                        <div className={` ${filterGroup.state ? 'cursor-pointer' : 'cursor-not-allowed background-grey-lighten-3'} thin-border round-border-light border-ccar-yellow flex-justify-space-between flex-items-align-center padding-x-md  margin-bottom-xs`}\n                            style={{ height: 30 }}\n                            onClick={(e) => {\n                                if (filterGroup.state && (!areaCloseInputRef.current || !areaCloseInputRef.current.contains(e.target))) {\n                                    controlModalOpen('area');\n                                }\n                            }}>\n                            {\n                                filterGroup.area ?\n                                    <React.Fragment>\n                                        <span className='d-inline-block capitalize' >\n                                            {filterGroup.area || \"\"}\n                                        </span>\n                                        <span className='d-inline-block' ref={areaCloseInputRef} >\n                                            <CloseOutlined\n                                                className='cursor-pointer'\n                                                onClick={(e) => { setFilterGroup({ ...filterGroup, area: '' }) }} />\n                                        </span>\n                                    </React.Fragment>\n                                    :\n                                    <React.Fragment>\n                                        <span className='d-inline-block grey' >\n                                            Area\n                                            </span>\n                                        <span className='d-inline-block' >\n                                            <img style={{ width: 25 }} src=\"/assets/carDetails/Location@3x.png\" />\n                                        </span>\n                                    </React.Fragment>\n                            }\n                        </div>\n                    </React.Fragment>\n                );\n            case 'bodyType':\n                return (\n                    <React.Fragment>\n                        <div className={`thin-border round-border-light border-ccar-yellow cursor-pointer flex-justify-space-between flex-items-align-center padding-x-md  margin-bottom-xs`}\n                            style={{ height: 30 }}\n                            ref={bodyTypeInputRef}\n                            onClick={(e) => {\n                                if (!bodyTypeCloseInputRef.current || !bodyTypeCloseInputRef.current.contains(e.target)) {\n                                    controlModalOpen('bodyType');\n                                }\n                            }}>\n                            {\n                                filterGroup.bodyType ?\n                                    <React.Fragment>\n                                        <span className='d-inline-block' >\n                                            {_.get(getBodyType(filterGroup.bodyType), ['value']) || \"\"}\n                                        </span>\n                                        <span className='d-inline-block' ref={bodyTypeCloseInputRef} >\n                                            <CloseOutlined\n                                                className='cursor-pointer'\n                                                onClick={(e) => { setFilterGroup({ ...filterGroup, bodyType: '' }); }} />\n                                        </span>\n                                    </React.Fragment>\n                                    :\n                                    <React.Fragment>\n                                        <span className='d-inline-block grey' >\n                                            Body Type\n                                    </span>\n                                        <span className='d-inline-block'>\n                                            <img style={{ width: 25 }} src=\"/assets/carDetails/Body Type@3x.png\" />\n                                        </span>\n                                    </React.Fragment>\n                            }\n                        </div>\n                    </React.Fragment>\n                );\n\n            case 'color':\n                return (\n                    <React.Fragment>\n                        <div className={`thin-border round-border-light border-ccar-yellow cursor-pointer flex-justify-space-between flex-items-align-center padding-x-md  margin-bottom-xs`}\n                            style={{ height: 30 }}\n                            ref={colorInputRef}\n                            onClick={(e) => {\n                                if (!colorCloseInputRef.current || !colorCloseInputRef.current.contains(e.target)) {\n                                    controlModalOpen('color');\n                                }\n                            }}>\n                            {\n                                filterGroup.color ?\n                                    <React.Fragment>\n                                        <span className='d-inline-block capitalize'  >\n                                            {_.capitalize(_.get(getColor(filterGroup.color), ['value'])) || \"\"}\n                                        </span>\n                                        <span className='d-inline-block' ref={colorCloseInputRef}>\n                                            <CloseOutlined\n                                                className='cursor-pointer'\n                                                onClick={(e) => { setFilterGroup({ ...filterGroup, color: '' }) }} />\n                                        </span>\n                                    </React.Fragment>\n                                    :\n                                    <React.Fragment>\n                                        <span className='d-inline-block grey' >\n                                            Color\n                                    </span>\n                                        <span className='d-inline-block' >\n                                            <img style={{ width: 25 }} src=\"/assets/carDetails/Car Color@3x.png\" />\n                                        </span>\n                                    </React.Fragment>\n                            }\n                        </div>\n                    </React.Fragment>\n                );\n\n            case 'drivenwheel':\n                return (\n                    <React.Fragment>\n                        <div className={`thin-border round-border-light border-ccar-yellow cursor-pointer flex-justify-space-between flex-items-align-center padding-x-md  margin-bottom-xs`}\n                            style={{ height: 30 }}\n                            ref={drivenwheelInputRef}\n                            onClick={(e) => {\n                                if (!drivenwheelCloseInputRef.current || !drivenwheelCloseInputRef.current.contains(e.target)) {\n                                    controlModalOpen('drivenwheel');\n                                }\n                            }}>\n                            {\n                                filterGroup.drivenwheel ?\n                                    <React.Fragment>\n                                        <span className='d-inline-block capitalize' >\n                                            {_.capitalize(_.get(getDrivenWheel(filterGroup.drivenwheel), ['value'])) || \"\"}\n                                        </span>\n                                        <span className='d-inline-block' ref={drivenwheelCloseInputRef} >\n                                            <CloseOutlined\n                                                className='cursor-pointer'\n                                                onClick={(e) => { setFilterGroup({ ...filterGroup, drivenwheel: '' }) }} />\n                                        </span>\n                                    </React.Fragment>\n                                    :\n                                    <React.Fragment>\n                                        <span className='d-inline-block grey' >\n                                            Driven Wheel\n                                </span>\n                                        <span className='d-inline-block' >\n                                            <img style={{ width: 25 }} src=\"/assets/carDetails/Wheel@3x.png\" />\n                                        </span>\n                                    </React.Fragment>\n                            }\n                        </div>\n                    </React.Fragment>\n                );\n\n            case 'fuelType':\n                return (\n                    <React.Fragment>\n                        <div className={`thin-border round-border-light border-ccar-yellow cursor-pointer flex-justify-space-between flex-items-align-center padding-x-md  margin-bottom-xs`}\n                            style={{ height: 30 }}\n                            ref={fuelTypeInputRef}\n                            onClick={(e) => {\n                                if (!fuelTypeCloseInputRef.current || !fuelTypeCloseInputRef.current.contains(e.target)) {\n                                    controlModalOpen('fuelType');\n                                }\n                            }}>\n                            {\n                                filterGroup.fuelType ?\n                                    <React.Fragment>\n                                        <span className='d-inline-block capitalize' >\n                                            {_.capitalize(_.get(getFuelType(filterGroup.fuelType), ['value'])) || \"\"}\n                                        </span>\n                                        <span className='d-inline-block' ref={fuelTypeCloseInputRef}>\n                                            <CloseOutlined\n                                                className='cursor-pointer'\n                                                onClick={(e) => { setFilterGroup({ ...filterGroup, fuelType: '' }) }} />\n                                        </span>\n                                    </React.Fragment>\n                                    :\n                                    <React.Fragment>\n                                        <span className='d-inline-block grey' >\n                                            Fuel Type\n                            </span>\n                                        <span className='d-inline-block' >\n                                            <img style={{ width: 25 }} src=\"/assets/carDetails/Fuel Type.png\" />\n                                        </span>\n                                    </React.Fragment>\n                            }\n                        </div>\n                    </React.Fragment>\n                );\n\n            case 'year':\n                return (\n                    <React.Fragment>\n\n                        {/* <Row>\n                                <Col span={22}>\n                                    <label style={{ color: '#FBB040', fontWeight: '500', marginLeft: '12px' }}>Year</label>\n    \n                                </Col>\n                                <Col span={2}>\n                                    <CloseOutlined\n                                        style={{ color: \"grey\", fontSize: '13px', marginBottom: '10px' }}\n                                        className='cursor-pointer'\n                                        onClick={(e) => { setFilterGroup({ ...filterGroup, yearRange: [undefined, undefined] }) }}\n                                    />\n                                </Col>\n                            </Row> */}\n\n                        {\n                            fieldThatShowRangeTitle == item ?\n                                _renderRangeTitle()\n                                :\n                                null\n                        }\n\n                        <Row style={{ width: '100%', padding: '2px 0px' }}>\n                            <Col span={11}>\n                                <div id=\"yearPopUpContainer-1\">\n                                    <AutoComplete\n                                        allowClear\n                                        placeholder=\"Year\"\n                                        dropdownMatchSelectWidth={false}\n                                        dropdownMenuStyle={{ height: \"130px\" }}\n                                        value={_.get(dropDownSearchValue, 'minYear') || undefined}\n                                        onSelect={(e) => {\n                                            setFilterGroup({ ...filterGroup, yearRange: [e, _.get(filterGroup, 'yearRange[1]')] })\n                                        }}\n                                        onDropdownVisibleChange={(open) => {\n                                            setIsDropDownOpen(open)\n                                        }}\n                                        onBlur={() => {\n                                            setDropDownSearchValue({\n                                                ...dropDownSearchValue,\n                                                minYear: _.get(filterGroup, 'yearRange[0]'),\n                                            })\n                                        }}\n                                        onChange={(v) => {\n                                            //On clear\n                                            if (!v && _.indexOf(_.get(getFilteredDropDownOptions(), 'minYears') || [], dropDownSearchValue.minYear) != -1 && _.get(filterGroup, 'yearRange[0]') == dropDownSearchValue.minYear) {\n                                                setFilterGroup({ ...filterGroup, yearRange: [v, !_.isArray(filterGroup.yearRange) || !isValidNumber(filterGroup.yearRange[1]) ? undefined : parseInt(filterGroup.yearRange[1])] })\n                                            } else {\n                                                setDropDownSearchValue({\n                                                    ...dropDownSearchValue,\n                                                    minYear: v\n                                                })\n                                            }\n                                        }}\n                                        onSearch={(v) => {\n                                            if (!v || _.get(filterGroup, 'yearRange[0]') == v) {\n                                                setDropDownOptions({\n                                                    ...dropDownOptions,\n                                                    minYears: _.get(getFilteredDropDownOptions(), 'minYears'),\n                                                })\n                                            } else {\n                                                let newData = _.filter(_.get(getFilteredDropDownOptions(), 'minYears') || [], function (item) {\n                                                    let regex = new RegExp(`^${v}`, 'i')\n                                                    return regex.test(`${item}`);\n                                                })\n\n                                                setDropDownOptions({\n                                                    ...dropDownOptions,\n                                                    minYears: newData,\n                                                })\n                                            }\n\n                                        }}\n                                        getPopupContainer={() => document.getElementById('yearPopUpContainer-1')}\n                                    >\n                                        {\n                                            _.isArray(_.get(dropDownOptions, 'minYears')) && !_.isEmpty(_.get(dropDownOptions, 'minYears')) ?\n                                                _.map(dropDownOptions.minYears, function (item, index) {\n                                                    return (\n                                                        <AutoComplete.Option key={`minYear-${index}`} value={`${item}`}>\n                                                            {item}\n                                                        </AutoComplete.Option>\n                                                    )\n                                                })\n                                                :\n                                                null\n                                        }\n                                    </AutoComplete>\n                                </div>\n                            </Col>\n                            <Col span={11} offset={2}>\n                                <div id=\"yearPopUpContainer-2\">\n                                    <AutoComplete\n                                        allowClear\n                                        placeholder=\"Year\"\n                                        dropdownMatchSelectWidth={false}\n                                        dropdownMenuStyle={{ height: \"130px\" }}\n                                        value={_.get(dropDownSearchValue, 'maxYear') || undefined}\n                                        onSelect={(v) => { setFilterGroup({ ...filterGroup, yearRange: [_.get(filterGroup, 'yearRange[0]'), v] }) }}\n                                        onDropdownVisibleChange={(open) => {\n                                            setIsDropDownOpen(open)\n                                        }}\n                                        onBlur={() => {\n                                            setDropDownSearchValue({\n                                                ...dropDownSearchValue,\n                                                maxYear: _.get(filterGroup, 'yearRange[1]'),\n                                            })\n                                        }}\n                                        onChange={(v) => {\n                                            //On clear\n                                            if (!v && _.indexOf(_.get(getFilteredDropDownOptions(), 'maxYears') || [], dropDownSearchValue.maxYear) != -1 && _.get(filterGroup, 'yearRange[1]') == dropDownSearchValue.maxYear) {\n                                                setFilterGroup({ ...filterGroup, yearRange: [_.get(filterGroup, 'yearRange[0]'), v] })\n                                            } else {\n                                                setDropDownSearchValue({\n                                                    ...dropDownSearchValue,\n                                                    maxYear: v\n                                                })\n                                            }\n                                        }}\n                                        onSearch={(v) => {\n                                            if (!v || _.get(filterGroup, 'yearRange[1]') == v) {\n                                                setDropDownOptions({\n                                                    ...dropDownOptions,\n                                                    maxYears: _.get(getFilteredDropDownOptions(), 'maxYears'),\n                                                })\n                                            } else {\n                                                let newData = _.filter(_.get(getFilteredDropDownOptions(), 'maxYears') || [], function (item) {\n                                                    let regex = new RegExp(`^${v}`, 'i')\n                                                    return regex.test(`${item}`);\n                                                })\n\n                                                setDropDownOptions({\n                                                    ...dropDownOptions,\n                                                    maxYears: newData,\n                                                })\n                                            }\n\n                                        }}\n                                        getPopupContainer={() => document.getElementById('yearPopUpContainer-2')}\n                                    >\n                                        {\n                                            _.isArray(_.get(dropDownOptions, 'maxYears')) && !_.isEmpty(_.get(dropDownOptions, 'maxYears')) ?\n                                                _.map(dropDownOptions.maxYears, function (item, index) {\n                                                    return (\n                                                        <AutoComplete.Option key={`maxYear-${index}`} value={`${item}`}>\n                                                            {item}\n                                                        </AutoComplete.Option>\n                                                    )\n                                                })\n                                                :\n                                                null\n                                        }\n                                    </AutoComplete>\n                                </div>\n                            </Col>\n                        </Row>\n                    </React.Fragment>\n                );\n\n            case 'price':\n                return (\n                    <React.Fragment>\n                        {/* <Row>\n                                <Col span={22}>\n                                    <label style={{ color: '#FBB040', fontWeight: '500', marginLeft: '12px' }}>Price</label>\n                                </Col>\n                                <Col span={2}>\n                                    <CloseOutlined\n                                        style={{ color: \"grey\", fontSize: '13px', marginBottom: '10px' }}\n                                        className='cursor-pointer'\n                                        onClick={(e) => { setFilterGroup({ ...filterGroup, priceRange: [undefined, undefined] }) }}\n                                    />\n                                </Col>\n                            </Row> */}\n\n                        {\n                            fieldThatShowRangeTitle == item ?\n                                _renderRangeTitle()\n                                :\n                                null\n                        }\n                        <Row style={{ width: '100%', padding: '2px 0px' }}>\n                            <Col span={11}>\n                                <div id=\"pricePopUpContainer-1\">\n                                    <AutoComplete\n                                        allowClear\n                                        placeholder=\"Price\"\n                                        dropdownMenuStyle={{ height: \"130px\" }}\n                                        dropdownMatchSelectWidth={false}\n                                        value={dropDownSearchValue.minPrice || undefined}\n                                        onSelect={(e) => {\n                                            setFilterGroup({ ...filterGroup, priceRange: [e, _.get(filterGroup, 'priceRange[1]')] })\n                                        }}\n                                        onDropdownVisibleChange={(open) => {\n                                            setIsDropDownOpen(open)\n                                        }}\n                                        dataSource={\n                                            _.map(dropDownOptions.minPrices, function (item, index) {\n                                                return <AutoComplete.Option key={`minPrice-${index}`} value={item}>\n                                                    {_.upperCase(formatNumber(item, 'auto', true, 0))}\n                                                </AutoComplete.Option>\n\n                                            })}\n                                        onBlur={() => {\n                                            setDropDownSearchValue({\n                                                ...dropDownSearchValue,\n                                                minPrice: `${_.get(filterGroup, 'priceRange[0]') || ''}`,\n                                            })\n                                        }}\n                                        onChange={(v) => {\n                                            //On clear\n                                            if (!v && _.indexOf(_.get(getFilteredDropDownOptions(), 'minPrices') || [], dropDownSearchValue.minPrice) != -1 && _.get(filterGroup, 'priceRange[0]') == dropDownSearchValue.minPrice) {\n                                                setFilterGroup({ ...filterGroup, priceRange: [v, !_.isArray(filterGroup.priceRange) || !isValidNumber(filterGroup.priceRange[1]) ? undefined : parseInt(filterGroup.priceRange[1])] })\n                                            } else {\n                                                setDropDownSearchValue({\n                                                    ...dropDownSearchValue,\n                                                    minPrice: parseFloat(v) || 0,\n                                                })\n                                            }\n                                        }}\n                                        onSearch={(v) => {\n                                            if (!v || _.get(filterGroup, 'priceRange[0]') == v) {\n                                                setDropDownOptions({\n                                                    ...dropDownOptions,\n                                                    minPrices: _.get(getFilteredDropDownOptions(), 'minPrices'),\n                                                })\n                                            } else {\n\n                                                let newData = _.compact([_.find(_.get(getFilteredDropDownOptions(), 'minPrices') || [], function (item) {\n                                                    return parseFloat(v) <= parseFloat(item);\n                                                })])\n\n                                                setDropDownOptions({\n                                                    ...dropDownOptions,\n                                                    minPrices: newData,\n                                                })\n                                            }\n                                        }}\n                                        getPopupContainer={() => document.getElementById('pricePopUpContainer-1')}\n                                    >\n                                    </AutoComplete>\n                                </div>\n                            </Col>\n                            <Col span={11} offset={2}>\n                                <div id=\"pricePopUpContainer-2\">\n                                    <AutoComplete\n                                        allowClear\n                                        placeholder=\"Price\"\n                                        dropdownMenuStyle={{ height: \"130px\" }}\n                                        dropdownMatchSelectWidth={false}\n                                        value={dropDownSearchValue.maxPrice || undefined}\n                                        onSelect={(e) => {\n                                            setFilterGroup({ ...filterGroup, priceRange: [_.get(filterGroup, 'priceRange[0]'), e] })\n                                        }}\n                                        onDropdownVisibleChange={(open) => {\n                                            setIsDropDownOpen(open)\n                                        }}\n                                        dataSource={\n                                            _.map(dropDownOptions.maxPrices, function (item, index) {\n                                                return <AutoComplete.Option key={`maxPrice-${index}`} value={item}>\n                                                    {_.upperCase(formatNumber(item, 'auto', true, 0))}\n                                                </AutoComplete.Option>\n\n                                            })}\n                                        onBlur={() => {\n                                            setDropDownSearchValue({\n                                                ...dropDownSearchValue,\n                                                maxPrice: `${_.get(filterGroup, 'priceRange[1]') || ''}`,\n                                            })\n                                        }}\n                                        onChange={(v) => {\n                                            //On clear\n                                            if (!v && _.indexOf(_.get(getFilteredDropDownOptions(), 'maxPrices') || [], dropDownSearchValue.maxPrice) != -1 && _.get(filterGroup, 'priceRange[1]') == dropDownSearchValue.maxPrice) {\n                                                setFilterGroup({ ...filterGroup, priceRange: [_.get(filterGroup, 'priceRange[0]'), v] })\n                                            } else {\n                                                setDropDownSearchValue({\n                                                    ...dropDownSearchValue,\n                                                    maxPrice: parseFloat(v) || 0,\n                                                })\n                                            }\n                                        }}\n                                        onSearch={(v) => {\n                                            if (!v || _.get(filterGroup, 'priceRange[1]') == v) {\n                                                setDropDownOptions({\n                                                    ...dropDownOptions,\n                                                    maxPrices: _.get(getFilteredDropDownOptions(), 'maxPrices'),\n                                                })\n                                            } else {\n\n                                                let newData = _.compact([_.find(_.reverse(_.get(getFilteredDropDownOptions(), 'maxPrices')) || [], function (item) {\n                                                    return parseFloat(v) <= parseFloat(item);\n                                                })])\n\n                                                setDropDownOptions({\n                                                    ...dropDownOptions,\n                                                    maxPrices: newData,\n                                                })\n                                            }\n                                        }}\n                                        getPopupContainer={() => document.getElementById('pricePopUpContainer-2')}\n                                    >\n                                    </AutoComplete>\n                                </div>\n                            </Col>\n                        </Row>\n                    </React.Fragment>\n                );\n\n            case 'engineCapacity':\n                return (\n                    <React.Fragment>\n                        {/* <Row>\n                                    <Col span={22}>\n                                        <label style={{ color: '#FBB040', fontWeight: '500', marginLeft: '12px' }}>Price</label>\n                                    </Col>\n                                    <Col span={2}>\n                                        <CloseOutlined\n                                            style={{ color: \"grey\", fontSize: '13px', marginBottom: '10px' }}\n                                            className='cursor-pointer'\n                                            onClick={(e) => { setFilterGroup({ ...filterGroup, priceRange: [undefined, undefined] }) }}\n                                        />\n                                    </Col>\n                                </Row> */}\n\n                        {\n                            fieldThatShowRangeTitle == item ?\n                                _renderRangeTitle()\n                                :\n                                null\n                        }\n                        <Row style={{ width: '100%', padding: '2px 0px' }}>\n                            <Col span={11}>\n                                <div className=\"margin-bottom-xs\" id=\"engineCapacityPopUpContainer-1\">\n                                    <AutoComplete\n                                        allowClear\n                                        placeholder=\"Engine Capacity\"\n                                        dropdownMenuStyle={{ height: \"130px\" }}\n                                        dropdownMatchSelectWidth={false}\n                                        value={dropDownSearchValue.minEngineCapacity || undefined}\n                                        onSelect={(e) => {\n                                            setFilterGroup({ ...filterGroup, engineCapacityRange: [e, _.get(filterGroup, 'engineCapacityRange[1]')] })\n                                        }}\n                                        onDropdownVisibleChange={(open) => {\n                                            setIsDropDownOpen(open)\n                                        }}\n                                        dataSource={\n                                            _.map(dropDownOptions.minEngineCapacities, function (item, index) {\n                                                return {\n                                                    text : `${formatNumber(item, null, true, 1)} cc`,\n                                                    value : item,\n                                                }\n\n                                            })}\n                                        onBlur={() => {\n                                            setDropDownSearchValue({\n                                                ...dropDownSearchValue,\n                                                minEngineCapacity: `${_.get(filterGroup, 'engineCapacityRange[0]') || ''}`,\n                                            })\n                                        }}\n                                        onChange={(v) => {\n                                            //On clear\n                                            if (!v && _.indexOf(_.get(getFilteredDropDownOptions(), 'minEngineCapacities') || [], dropDownSearchValue.minEngineCapacity) != -1 && _.get(filterGroup, 'engineCapacityRange[0]') == dropDownSearchValue.minEngineCapacity) {\n                                                setFilterGroup({ ...filterGroup, engineCapacityRange: [v, !_.isArray(filterGroup.engineCapacityRange) || !isValidNumber(filterGroup.engineCapacityRange[1]) ? undefined : parseInt(filterGroup.engineCapacityRange[1])] })\n                                            } else {\n                                                setDropDownSearchValue({\n                                                    ...dropDownSearchValue,\n                                                    minEngineCapacity: parseFloat(v) || 0,\n                                                })\n                                            }\n                                        }}\n                                        onSearch={(v) => {\n                                            if (!v || _.get(filterGroup, 'engineCapacityRange[0]') == v) {\n                                                setDropDownOptions({\n                                                    ...dropDownOptions,\n                                                    minEngineCapacities: _.get(getFilteredDropDownOptions(), 'minEngineCapacities'),\n                                                })\n                                            } else {\n\n                                                let newData = _.compact([_.find(_.get(getFilteredDropDownOptions(), 'minEngineCapacities') || [], function (item) {\n                                                    return parseFloat(v) <= parseFloat(item);\n                                                })])\n\n                                                setDropDownOptions({\n                                                    ...dropDownOptions,\n                                                    minEngineCapacities: newData,\n                                                })\n                                            }\n                                        }}\n                                        getPopupContainer={() => document.getElementById('engineCapacityPopUpContainer-1')}\n                                    >\n                                    </AutoComplete>\n                                </div>\n                            </Col>\n                            <Col span={11} offset={2}>\n                                <div id=\"engineCapacityPopUpContainer-2\">\n                                    <AutoComplete\n                                        allowClear\n                                        placeholder=\"Engine Capacity\"\n                                        dropdownMenuStyle={{ height: \"130px\" }}\n                                        dropdownMatchSelectWidth={false}\n                                        value={dropDownSearchValue.maxEngineCapacity || undefined}\n                                        onSelect={(e) => {\n                                            setFilterGroup({ ...filterGroup, engineCapacityRange: [_.get(filterGroup, 'engineCapacityRange[0]'), e] })\n                                        }}\n                                        onDropdownVisibleChange={(open) => {\n                                            setIsDropDownOpen(open)\n                                        }}\n                                        dataSource={\n                                            _.map(dropDownOptions.maxEngineCapacities, function (item, index) {\n                                                return {\n                                                    text : `${formatNumber(item, null, true, 1)} cc`,\n                                                    value : item,\n                                                }\n                                            })}\n                                        onBlur={() => {\n                                            setDropDownSearchValue({\n                                                ...dropDownSearchValue,\n                                                maxEngineCapacity: `${_.get(filterGroup, 'engineCapacityRange[1]') || ''}`,\n                                            })\n                                        }}\n                                        onChange={(v) => {\n                                            //On clear\n                                            if (!v && _.indexOf(_.get(getFilteredDropDownOptions(), 'maxEngineCapacities') || [], dropDownSearchValue.maxEngineCapacity) != -1 && _.get(filterGroup, 'engineCapacityRange[1]') == dropDownSearchValue.maxEngineCapacity) {\n                                                setFilterGroup({ ...filterGroup, engineCapacityRange: [_.get(filterGroup, 'engineCapacityRange[0]'), v] })\n                                            } else {\n                                                setDropDownSearchValue({\n                                                    ...dropDownSearchValue,\n                                                    maxEngineCapacity: parseFloat(v) || 0,\n                                                })\n                                            }\n                                        }}\n                                        onSearch={(v) => {\n                                            if (!v || _.get(filterGroup, 'engineCapacityRange[1]') == v) {\n                                                setDropDownOptions({\n                                                    ...dropDownOptions,\n                                                    maxEngineCapacities: _.get(getFilteredDropDownOptions(), 'maxEngineCapacities'),\n                                                })\n                                            } else {\n\n                                                let newData = _.compact([_.find(_.reverse(_.get(getFilteredDropDownOptions(), 'maxEngineCapacities')) || [], function (item) {\n                                                    return parseFloat(v) <= parseFloat(item);\n                                                })])\n\n                                                setDropDownOptions({\n                                                    ...dropDownOptions,\n                                                    maxEngineCapacities: newData,\n                                                })\n                                            }\n                                        }}\n                                        getPopupContainer={() => document.getElementById('engineCapacityPopUpContainer-2')}\n                                    >\n                                    </AutoComplete>\n                                </div>\n                            </Col>\n                        </Row>\n                    </React.Fragment>\n                );\n\n            case 'mileage':\n                return (\n                    <React.Fragment>\n                        {/* <Row>\n                                <Col span={22}>\n                                    <label style={{ color: '#FBB040', fontWeight: '500', marginLeft: '12px' }}>Mileage</label>\n                                </Col>\n                                <Col span={2}>\n                                    <CloseOutlined\n                                        style={{ color: \"grey\", fontSize: '13px', marginBottom: '10px' }}\n                                        className='cursor-pointer'\n                                        onClick={(e) => { setFilterGroup({ ...filterGroup, mileageRange: [undefined, undefined] }) }}\n                                    />\n                                </Col>\n                            </Row> */}\n\n                        {\n                            fieldThatShowRangeTitle == item ?\n                                _renderRangeTitle()\n                                :\n                                null\n                        }\n                        <Row style={{ width: '100%', padding: '2px 0px' }}>\n                            <Col span={11}>\n                                <div id=\"mileagePopUpContainer-1\">\n                                    <AutoComplete\n                                        allowClear\n                                        placeholder=\"Mileage\"\n                                        dropdownMenuStyle={{ height: \"130px\" }}\n                                        dropdownMatchSelectWidth={false}\n                                        value={dropDownSearchValue.minMileage || undefined}\n                                        onSelect={(e) => {\n                                            setFilterGroup({ ...filterGroup, mileageRange: [e, _.get(filterGroup, 'mileageRange[1]')] })\n                                        }}\n                                        onDropdownVisibleChange={(open) => {\n                                            setIsDropDownOpen(open)\n                                        }}\n                                        dataSource={\n                                            _.map(dropDownOptions.minMileages, function (item, index) {\n                                                return {\n                                                    text : `${formatNumber(item, null, true, 0)} KM`,\n                                                    value : item,\n                                                }\n                                            })}\n                                        onBlur={() => {\n                                            setDropDownSearchValue({\n                                                ...dropDownSearchValue,\n                                                minMileage: `${_.get(filterGroup, 'mileageRange[0]') || ''}`,\n                                            })\n                                        }}\n                                        onChange={(v) => {\n                                            //On clear\n                                            if (!v && _.indexOf(_.get(getFilteredDropDownOptions(), 'minMileages') || [], dropDownSearchValue.minMileage) != -1 && _.get(filterGroup, 'mileageRange[0]') == dropDownSearchValue.minMileage) {\n                                                setFilterGroup({ ...filterGroup, mileageRange: [v, !_.isArray(filterGroup.mileageRange) || !isValidNumber(filterGroup.mileageRange[1]) ? undefined : parseInt(filterGroup.mileageRange[1])] })\n                                            } else {\n                                                setDropDownSearchValue({\n                                                    ...dropDownSearchValue,\n                                                    minMileage: parseFloat(v) || 0,\n                                                })\n                                            }\n                                        }}\n                                        onSearch={(v) => {\n                                            if (!v || _.get(filterGroup, 'mileageRange[0]') == v) {\n                                                setDropDownOptions({\n                                                    ...dropDownOptions,\n                                                    minMileages: _.get(getFilteredDropDownOptions(), 'minMileages'),\n                                                })\n                                            } else {\n\n                                                let newData = _.compact([_.find(_.get(getFilteredDropDownOptions(), 'minMileages') || [], function (item) {\n                                                    return parseFloat(v) <= parseFloat(item);\n                                                })])\n\n                                                setDropDownOptions({\n                                                    ...dropDownOptions,\n                                                    minMileages: newData,\n                                                })\n                                            }\n                                        }}\n                                        getPopupContainer={() => document.getElementById('mileagePopUpContainer-1')}\n                                    >\n                                    </AutoComplete>\n                                </div>\n                            </Col>\n                            <Col span={11} offset={2}>\n                                <div id=\"mileagePopUpContainer-2\">\n                                    <AutoComplete\n                                        allowClear\n                                        placeholder=\"Mileage\"\n                                        dropdownMenuStyle={{ height: \"130px\" }}\n                                        dropdownMatchSelectWidth={false}\n                                        value={dropDownSearchValue.maxMileage || undefined}\n                                        onSelect={(e) => {\n                                            setFilterGroup({ ...filterGroup, mileageRange: [_.get(filterGroup, 'mileageRange[0]'), e] })\n                                        }}\n                                        onDropdownVisibleChange={(open) => {\n                                            setIsDropDownOpen(open)\n                                        }}\n                                        dataSource={\n                                            _.map(dropDownOptions.maxMileages, function (item, index) {\n                                                return {\n                                                    text : `${formatNumber(item, null, true, 0)} KM`,\n                                                    value : item,\n                                                }\n                                            })}\n                                        onBlur={() => {\n                                            setDropDownSearchValue({\n                                                ...dropDownSearchValue,\n                                                maxMileage: `${_.get(filterGroup, 'mileageRange[1]') || ''}`,\n                                            })\n                                        }}\n                                        onChange={(v) => {\n                                            //On clear\n                                            if (!v && _.indexOf(_.get(getFilteredDropDownOptions(), 'maxMileages') || [], dropDownSearchValue.maxMileage) != -1 && _.get(filterGroup, 'mileageRange[1]') == dropDownSearchValue.maxMileage) {\n                                                setFilterGroup({ ...filterGroup, mileageRange: [_.get(filterGroup, 'mileageRange[0]'), v] })\n                                            } else {\n                                                setDropDownSearchValue({\n                                                    ...dropDownSearchValue,\n                                                    maxMileage: parseFloat(v) || 0,\n                                                })\n                                            }\n                                        }}\n                                        onSearch={(v) => {\n                                            if (!v || _.get(filterGroup, 'mileageRange[1]') == v) {\n                                                setDropDownOptions({\n                                                    ...dropDownOptions,\n                                                    maxMileages: _.get(getFilteredDropDownOptions(), 'maxMileages'),\n                                                })\n                                            } else {\n\n                                                let newData = _.compact([_.find(_.reverse(_.get(getFilteredDropDownOptions(), 'maxMileages')) || [], function (item) {\n                                                    return parseFloat(v) <= parseFloat(item);\n                                                })])\n\n                                                setDropDownOptions({\n                                                    ...dropDownOptions,\n                                                    maxMileages: newData,\n                                                })\n                                            }\n                                        }}\n                                        getPopupContainer={() => document.getElementById('mileagePopUpContainer-2')}\n                                    >\n                                    </AutoComplete>\n                                </div>\n                            </Col>\n                        </Row>\n                    </React.Fragment>\n                );\n\n            default:\n                return null;\n        }\n    }\n\n\n\n    return (\n        <span className='d-inline-block width-100' ref={containerRef} style={{ ...props.style, position: 'relative' }}>\n            <Card\n                bordered={false}\n                title=\"Quick Filter\"\n                size=\"small\"\n                className='width-100 card-padding-0'\n            >\n                <div>\n                    <div ref={formRef} className='padding-y-sm' >\n                        <Form\n                            // {...layout}\n                            name=\"basic\"\n                        // onSubmit={handleSubmit}\n                        >\n                            {\n                                notEmptyLength(optionsFields) ?\n                                    _.map(optionsFields, function (option, i) {\n                                        return (\n                                            <div key={'optionsFields' + i} ref={inputRefs[`${option}Ref`]} className=''>\n                                                {_renderFormItem(option)}\n                                            </div>\n                                        )\n                                    })\n                                    :\n                                    null\n                            }\n                        </Form>\n                    </div>\n                </div>\n                <div className='background-white' ref={moreOptionButtonRef}>\n                    {\n                        notEmptyLength(collapseFields) ?\n                            <Button type=\"primary\" className=\"w-100\" onClick={null} style={{ marginTop: '10px' }} id=\"moreOptions\" onClick={(e) => { setMoreOptionModalVisible(true) }}>\n                                More Options\n                        </Button>\n                            :\n                            null\n                    }\n                </div>\n            </Card>\n\n            {/* <img src={cnyLionHead} style={{ width: 55, height: 90, position: 'absolute', right: -15, top: -60, }}></img> */}\n\n            <span className='d-inline-block cursor-pointer' style={{ position: 'absolute', right: 18, top: 7, }}>\n                <Tooltip title=\"Reset Filter\">\n                    <Button\n                        style={{\n                            border: 'none',\n                            background: 'none',\n                            color: 'red',\n                            padding: 0,\n                            fontSize: 12,\n                            fontWeight: 500\n                        }} className=\"w-100 h-100\"\n                        onClick={(e) => { resetFilterGroup() }} >\n                        {/* <img src=\"/assets/General/reset.png\" style={{ width: '16px', marginRight: 4, paddingBottom: 2 }} /> */}\n\n                        <Icon type=\"reload\" />\n                    </Button>\n                </Tooltip>\n            </span>\n            <div\n                id=\"moreOptionModal\"\n                className={`background-white ${moreOptionModalVisible ? 'd-inline-block' : 'd-none'}`}\n                ref={moreOptionModalRef}\n                style={\n                    {\n                        position: 'absolute',\n                        right: !containerRef || !containerRef.current || !isValidNumber(containerRef.current.getBoundingClientRect().width) ? `250px` : `${containerRef.current.getBoundingClientRect().width + modalMargin}px`,\n                        top: 0,\n                        bottom: 0,\n                        margin: 0,\n                        width: `${moreOptionModalWidth}px`,\n                        height: 'fit-content'\n                    }\n                }\n            >\n                {\n                    moreOptionModalVisible ?\n                        <Card\n                            bordered={false}\n                            title=\"More Options\"\n                            size=\"small\"\n                            className={`width-100 thin-border`}\n                        >\n                            <Form\n                                // {...layout}\n                                name=\"basic\"\n                            // onSubmit={handleSubmit}\n                            >\n                                {\n                                    notEmptyLength(collapseFields) ?\n                                        _.map(collapseFields, function (option) {\n                                            return isCollapse(option) ? _renderFormItem(option) : null\n                                        })\n                                        :\n                                        null\n                                }\n                            </Form>\n                        </Card>\n                        :\n                        null\n                }\n\n            </div>\n\n            {\n                containerRef.current ?\n                    <React.Fragment>\n\n                        <MakeModal\n                            visible={makeModalVisible}\n                            onCancel={(e) => { setMakeModalVisible(false) }}\n                            style={\n                                {\n                                    left: !containerRef || !containerRef.current || !isValidNumber(containerRef.current.getBoundingClientRect().left) ? 0 : notEmptyLength(collapseFields) && moreOptionModalVisible ? `${containerRef.current.getBoundingClientRect().left - modalWidth - modalMargin - moreOptionModalWidth - modalMargin}px` : `${containerRef.current.getBoundingClientRect().left - modalWidth - modalMargin}px`,\n                                    top: !containerRef || !containerRef.current || !isValidNumber(containerRef.current.getBoundingClientRect().top) ? 0 : `${containerRef.current.getBoundingClientRect().top < props.app.menuHeight ? props.app.menuHeight : containerRef.current.getBoundingClientRect().top}px`,\n                                    margin: 0,\n                                }\n                            }\n                            closable={false}\n                            maskClosable={true}\n                            className='no-padding-modal-body'\n                            width={`${modalWidth}px`}\n                            onChange={(data) => { setFilterGroup({ ...filterGroup, make: _.toLower(data), model: undefined }) }}\n                            bodyStyle={{ maxHeight: containerHeight }}\n                            selectedValue={filterGroup.make}\n                            id=\"make-modal\"\n                            options={notEmptyLength(origOptions.makeList) ? origOptions.makeList : []} />\n\n                        <ModelModal\n                            visible={modelModalVisible}\n                            onCancel={(e) => { setModelModalVisible(false) }}\n                            style={\n                                {\n                                    left: !containerRef || !containerRef.current || !isValidNumber(containerRef.current.getBoundingClientRect().left) ? 0 : notEmptyLength(collapseFields) && moreOptionModalVisible ? `${containerRef.current.getBoundingClientRect().left - modalWidth - modalMargin - moreOptionModalWidth - modalMargin}px` : `${containerRef.current.getBoundingClientRect().left - modalWidth - modalMargin}px`,\n                                    top: !containerRef || !containerRef.current || !isValidNumber(containerRef.current.getBoundingClientRect().top) ? 0 : `${containerRef.current.getBoundingClientRect().top < props.app.menuHeight ? props.app.menuHeight : containerRef.current.getBoundingClientRect().top}px`,\n                                    margin: 0\n                                }\n                            }\n                            closable={false}\n                            maskClosable={true}\n                            className='no-padding-modal-body'\n                            width={`${modalWidth}px`}\n                            onChange={(data) => { setFilterGroup({ ...filterGroup, model: _.toLower(data) }) }}\n                            bodyStyle={{ maxHeight: containerHeight }}\n                            selectedValue={filterGroup.model}\n                            id=\"model-modal\"\n                            options={_.isArray(modelOptions) && notEmptyLength(modelOptions) && filterGroup.make ? modelOptions : null}\n                            loading={modelLoading}\n                        />\n\n                        <StateModal\n                            visible={stateModalVisible}\n                            onCancel={(e) => { setStateModalVisible(false) }}\n\n                            style={\n                                {\n                                    left: !containerRef || !containerRef.current || !isValidNumber(containerRef.current.getBoundingClientRect().left) ? 0 : notEmptyLength(collapseFields) && moreOptionModalVisible ? `${containerRef.current.getBoundingClientRect().left - modalWidth - modalMargin - moreOptionModalWidth - modalMargin}px` : `${containerRef.current.getBoundingClientRect().left - modalWidth - modalMargin}px`,\n                                    top: !containerRef || !containerRef.current || !isValidNumber(containerRef.current.getBoundingClientRect().top) ? 0 : `${containerRef.current.getBoundingClientRect().top < props.app.menuHeight ? props.app.menuHeight : containerRef.current.getBoundingClientRect().top}px`,\n                                    margin: 0\n                                }\n                            }\n                            closable={false}\n                            maskClosable={true}\n                            className='no-padding-modal-body'\n                            width={`${modalWidth}px`}\n                            onChange={(data) => { setFilterGroup({ ...filterGroup, state: _.toLower(data), area: undefined }) }}\n                            bodyStyle={{ maxHeight: containerHeight }}\n                            selectedValue={filterGroup.state}\n                            id=\"state-modal\"\n                            options={isObject(props.availableFilterOption) ? props.availableFilterOption.stateList : notEmptyLength(origOptions.stateList) ? origOptions.stateList : null} />\n\n                        <AreaModal\n                            visible={areaModalVisible}\n                            onCancel={(e) => { setAreaModalVisible(false) }}\n                            style={\n                                {\n                                    left: !containerRef || !containerRef.current || !isValidNumber(containerRef.current.getBoundingClientRect().left) ? 0 : notEmptyLength(collapseFields) && moreOptionModalVisible ? `${containerRef.current.getBoundingClientRect().left - modalWidth - modalMargin - moreOptionModalWidth - modalMargin}px` : `${containerRef.current.getBoundingClientRect().left - modalWidth - modalMargin}px`,\n                                    top: !containerRef || !containerRef.current || !isValidNumber(containerRef.current.getBoundingClientRect().top) ? 0 : `${containerRef.current.getBoundingClientRect().top < props.app.menuHeight ? props.app.menuHeight : containerRef.current.getBoundingClientRect().top}px`,\n                                    margin: 0\n                                }\n                            }\n                            closable={false}\n                            maskClosable={true}\n                            className='no-padding-modal-body'\n                            width={`${modalWidth}px`}\n                            onChange={(data) => { setFilterGroup({ ...filterGroup, area: _.toLower(data) }) }}\n                            bodyStyle={{ maxHeight: containerHeight }}\n                            selectedValue={filterGroup.area}\n                            id=\"area-modal\"\n                            options={_.isArray(_.get(props.availableFilterOption, ['areaList'])) && !_.isEmpty(_.get(props.availableFilterOption, ['areaList'])) ? _.get(props.availableFilterOption, ['areaList']) : []}\n                            loading={modelLoading}\n                        />\n\n                        <BodyTypeModal\n                            visible={bodyTypeModalVisible}\n                            onCancel={(e) => { setBodyTypeModalVisible(false) }}\n\n                            style={\n                                {\n                                    left: !containerRef || !containerRef.current || !isValidNumber(containerRef.current.getBoundingClientRect().left) ? 0 : notEmptyLength(collapseFields) && moreOptionModalVisible ? `${containerRef.current.getBoundingClientRect().left - modalWidth - modalMargin - moreOptionModalWidth - modalMargin}px` : `${containerRef.current.getBoundingClientRect().left - modalWidth - modalMargin}px`,\n                                    top: !containerRef || !containerRef.current || !isValidNumber(containerRef.current.getBoundingClientRect().top) ? 0 : `${containerRef.current.getBoundingClientRect().top < props.app.menuHeight ? props.app.menuHeight : containerRef.current.getBoundingClientRect().top}px`,\n                                    margin: 0\n                                }\n                            }\n                            closable={false}\n                            maskClosable={true}\n                            className='no-padding-modal-body'\n                            width={`${modalWidth}px`}\n                            onChange={(data) => { setFilterGroup({ ...filterGroup, bodyType: data != \"all\" && data != null ? _.toLower(data) : '' }) }}\n                            bodyStyle={{ maxHeight: containerHeight }}\n                            selectedValue={filterGroup.bodyType}\n                            id=\"body-type-modal\"\n                            options={isObject(props.availableFilterOption) ? props.availableFilterOption.bodyTypeList : notEmptyLength(origOptions.bodyTypeList) ? origOptions.bodyTypeList : null} />\n\n                        <DrivenWheelModal\n                            visible={drivenwheelModalVisible}\n                            onCancel={(e) => { setDrivenWheelModalVisible(false) }}\n\n                            style={\n                                {\n                                    left: !containerRef || !containerRef.current || !isValidNumber(containerRef.current.getBoundingClientRect().left) ? 0 : notEmptyLength(collapseFields) && moreOptionModalVisible ? `${containerRef.current.getBoundingClientRect().left - modalWidth - modalMargin - moreOptionModalWidth - modalMargin}px` : `${containerRef.current.getBoundingClientRect().left - modalWidth - modalMargin}px`,\n                                    top: !containerRef || !containerRef.current || !isValidNumber(containerRef.current.getBoundingClientRect().top) ? 0 : `${containerRef.current.getBoundingClientRect().top < props.app.menuHeight ? props.app.menuHeight : containerRef.current.getBoundingClientRect().top}px`,\n                                    margin: 0\n                                }\n                            }\n                            closable={false}\n                            maskClosable={true}\n                            className='no-padding-modal-body'\n                            width={`${modalWidth}px`}\n                            onChange={(data) => { setFilterGroup({ ...filterGroup, drivenwheel: _.toLower(data) }) }}\n                            bodyStyle={{ maxHeight: containerHeight }}\n                            selectedValue={filterGroup.drivenwheel}\n                            id=\"driven-wheel-modal\"\n                            options={isObject(props.availableFilterOption) ? props.availableFilterOption.drivenWheelList : notEmptyLength(origOptions.drivenWheelList) ? origOptions.drivenWheelList : null} />\n\n                        <ColorModal\n                            visible={colorModalVisible}\n                            onCancel={(e) => { setColorModalVisible(false) }}\n\n                            style={\n                                {\n                                    left: !containerRef || !containerRef.current || !isValidNumber(containerRef.current.getBoundingClientRect().left) ? 0 : notEmptyLength(collapseFields) && moreOptionModalVisible ? `${containerRef.current.getBoundingClientRect().left - modalWidth - modalMargin - moreOptionModalWidth - modalMargin}px` : `${containerRef.current.getBoundingClientRect().left - modalWidth - modalMargin}px`,\n                                    top: !containerRef || !containerRef.current || !isValidNumber(containerRef.current.getBoundingClientRect().top) ? 0 : `${containerRef.current.getBoundingClientRect().top < props.app.menuHeight ? props.app.menuHeight : containerRef.current.getBoundingClientRect().top}px`,\n                                    margin: 0\n                                }\n                            }\n                            closable={false}\n                            maskClosable={true}\n                            className='no-padding-modal-body'\n                            width={`${modalWidth}px`}\n                            onChange={(data) => { setFilterGroup({ ...filterGroup, color: _.toLower(data) }) }}\n                            bodyStyle={{ maxHeight: containerHeight }}\n                            selectedValue={filterGroup.color}\n                            id=\"color-modal\"\n                            options={isObject(props.availableFilterOption) ? props.availableFilterOption.colorList : notEmptyLength(origOptions.colorList) ? origOptions.colorList : null} />\n\n                        <FuelTypeModal\n                            visible={fuelTypeModalVisible}\n                            onCancel={(e) => { setFuelTypeModalVisible(false) }}\n\n                            style={\n                                {\n                                    left: !containerRef || !containerRef.current || !isValidNumber(containerRef.current.getBoundingClientRect().left) ? 0 : notEmptyLength(collapseFields) && moreOptionModalVisible ? `${containerRef.current.getBoundingClientRect().left - modalWidth - modalMargin - moreOptionModalWidth - modalMargin}px` : `${containerRef.current.getBoundingClientRect().left - modalWidth - modalMargin}px`,\n                                    top: !containerRef || !containerRef.current || !isValidNumber(containerRef.current.getBoundingClientRect().top) ? 0 : `${containerRef.current.getBoundingClientRect().top < props.app.menuHeight ? props.app.menuHeight : containerRef.current.getBoundingClientRect().top}px`,\n                                    margin: 0\n                                }\n                            }\n                            closable={false}\n                            maskClosable={true}\n                            className='no-padding-modal-body'\n                            width={`${modalWidth}px`}\n                            onChange={(data) => { setFilterGroup({ ...filterGroup, fuelType: _.toLower(data) }) }}\n                            bodyStyle={{ maxHeight: containerHeight }}\n                            selectedValue={filterGroup.fuelType}\n                            id=\"fuel-type-modal\"\n                            options={isObject(props.availableFilterOption) ? props.availableFilterOption.fuelTypeList : notEmptyLength(origOptions.fuelTypeList) ? origOptions.fuelTypeList : null} />\n\n                    </React.Fragment>\n                    :\n                    null\n            }\n        </span >\n    );\n}\n\nconst mapStateToProps = state => ({\n    app: state.app,\n    productsList: state.productsList,\n});\n\n\nconst mapDispatchToProps = {\n    fetchProductFilterOptions,\n    clearProductFilterOptions,\n    fetchFilterModalState,\n\n};\nexport default connect(mapStateToProps, mapDispatchToProps)(Form.create()(withRouter(ProductsListFilterForm)));"]},"metadata":{},"sourceType":"module"}