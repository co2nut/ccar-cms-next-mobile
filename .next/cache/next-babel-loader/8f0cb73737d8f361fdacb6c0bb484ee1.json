{"ast":null,"code":"var _s = $RefreshSig$();\n\nvar __jsx = React.createElement;\nimport { Button, Form, message, Modal } from 'antd';\nimport axios from 'axios';\nimport React, { useEffect, useState } from 'react';\nimport { connect } from 'react-redux';\nimport client from '../../feathers';\nimport { withRouter } from 'next/router';\nimport { loading, loginMode } from '../../redux/actions/app-actions';\nimport { notEmptyLength } from '../../common-function';\n\nvar RemoveReviewButton = function RemoveReviewButton(props) {\n  _s();\n\n  var _useState = useState(false),\n      confirmModalState = _useState[0],\n      setConfirmModalState = _useState[1];\n\n  var _useState2 = useState({}),\n      review = _useState2[0],\n      setReview = _useState2[1];\n\n  useEffect(function () {\n    client.service('rating').get(props.id).then(function (res) {\n      if (notEmptyLength(res)) {\n        setReview(res);\n      } else {\n        setReview({});\n      }\n    })[\"catch\"](function (err) {\n      message.error(err.message);\n    });\n  }, [props.id]);\n\n  function removeReview() {\n    if (props.user.authenticated && review._id) {\n      var promises = [];\n      promises.push(client.authenticate());\n      promises.push(client.service('rating').remove(review._id));\n      props.loading(true);\n\n      if (notEmptyLength(review.images)) {\n        promises.push(axios.post(\"\".concat(client.io.io.uri, \"deleteImageS3\"), {\n          params: {\n            imageUrl: review.images\n          },\n          headers: {\n            'Content-Type': 'text/xml; charset=utf-8',\n            'Content-Length': 'length'\n          }\n        }));\n      }\n\n      if (notEmptyLength(review.videos)) {\n        promises.push(axios.post(\"\".concat(client.io.io.uri, \"deleteVideoS3\"), {\n          params: {\n            videoUrl: review.videos\n          },\n          headers: {\n            'Content-Type': 'text/xml; charset=utf-8',\n            'Content-Length': 'length'\n          }\n        }));\n      }\n\n      Promise.all(promises).then(function (responses) {\n        props.loading(false);\n        message.success('Review removed.');\n\n        if (props.handleSuccess) {\n          props.handleSuccess(responses[1]);\n        }\n      })[\"catch\"](function (err) {\n        props.loading(false);\n\n        if (props.handleError) {\n          props.handleError(err);\n        }\n\n        message.error(err.message);\n      });\n    } else {\n      props.loginMode(true);\n      message.error('Please login to remove this review.');\n\n      if (props.handleError) {\n        props.handleError({\n          message: 'Please login to remove this review.'\n        });\n      }\n    }\n  }\n\n  return __jsx(\"span\", {\n    className: props.className ? props.className : null,\n    style: props.style ? props.style : null\n  }, __jsx(Modal, {\n    visible: confirmModalState,\n    title: \"Are you sure?\",\n    maskClosable: true,\n    centered: true,\n    onOk: function onOk(e) {\n      removeReview();\n      setConfirmModalState(false);\n    },\n    onCancel: function onCancel(e) {\n      setConfirmModalState(false);\n    }\n  }, __jsx(\"div\", null, \"Do you want to remove this review?\")), __jsx(\"a\", {\n    onClick: function onClick() {\n      setConfirmModalState(true);\n    }\n  }, props.button ? props.button() : __jsx(Button, {\n    type: \"danger\",\n    icon: \"delete\"\n  }, \"Remove post\")));\n};\n\n_s(RemoveReviewButton, \"jFbCx5DHXKMwMe75LHIpMnkh1jg=\");\n\n_c = RemoveReviewButton;\n\nvar mapStateToProps = function mapStateToProps(state) {\n  return {\n    app: state.app,\n    user: state.user\n  };\n};\n\nvar mapDispatchToProps = {\n  loginMode: loginMode,\n  loading: loading\n};\nexport default connect(mapStateToProps, mapDispatchToProps)(Form.create()(withRouter(RemoveReviewButton)));\n\nvar _c;\n\n$RefreshReg$(_c, \"RemoveReviewButton\");","map":{"version":3,"sources":["/Users/faraheen/ccar-cms-next-mobile/components/rating/RemoveReviewButton.jsx"],"names":["Button","Form","message","Modal","axios","React","useEffect","useState","connect","client","withRouter","loading","loginMode","notEmptyLength","RemoveReviewButton","props","confirmModalState","setConfirmModalState","review","setReview","service","get","id","then","res","err","error","removeReview","user","authenticated","_id","promises","push","authenticate","remove","images","post","io","uri","params","imageUrl","headers","videos","videoUrl","Promise","all","responses","success","handleSuccess","handleError","className","style","e","button","mapStateToProps","state","app","mapDispatchToProps","create"],"mappings":"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","sourcesContent":["import { Button, Form, message, Modal } from 'antd';\nimport axios from 'axios';\nimport React, { useEffect, useState } from 'react';\nimport { connect } from 'react-redux';\nimport client from '../../feathers';\nimport { withRouter } from 'next/router';\nimport { loading, loginMode } from '../../redux/actions/app-actions';\nimport { notEmptyLength } from '../../common-function';\n\n\n\nconst RemoveReviewButton = (props) => {\n\n\n    const [confirmModalState, setConfirmModalState] = useState(false);\n    const [review, setReview] = useState({});\n\n    useEffect(() => {\n        client.service('rating').get(props.id).then(res => {\n            if (notEmptyLength(res)) {\n                setReview(res);\n            } else {\n                setReview({});\n            }\n        }).catch(err => {\n            message.error(err.message)\n        });\n    }, [props.id])\n\n\n    function removeReview() {\n\n        if (props.user.authenticated && review._id) {\n\n\n            let promises = [];\n\n            promises.push(client.authenticate());\n\n            promises.push(client.service('rating').remove(review._id));\n\n            props.loading(true);\n            if (notEmptyLength(review.images)) {\n\n                promises.push(axios.post(`${client.io.io.uri}deleteImageS3`,\n                    {\n                        params: {\n                            imageUrl: review.images\n                        },\n                        headers: {\n                            'Content-Type': 'text/xml; charset=utf-8',\n                            'Content-Length': 'length'\n                        }\n                    }\n                ));\n            }\n\n            if (notEmptyLength(review.videos)) {\n\n                promises.push(axios.post(`${client.io.io.uri}deleteVideoS3`,\n                    {\n                        params: {\n                            videoUrl: review.videos\n                        },\n                        headers: {\n                            'Content-Type': 'text/xml; charset=utf-8',\n                            'Content-Length': 'length'\n                        }\n                    }\n                ));\n            }\n\n            Promise.all(promises).then(responses => {\n                props.loading(false);\n                message.success('Review removed.');\n                if (props.handleSuccess) {\n                    props.handleSuccess(responses[1]);\n                }\n            }).catch(err => {\n                props.loading(false);\n                if (props.handleError) {\n                    props.handleError(err);\n                }\n                message.error(err.message)\n            });\n\n        } else {\n            props.loginMode(true);\n            message.error('Please login to remove this review.');\n            if (props.handleError) {\n                props.handleError({ message: 'Please login to remove this review.' });\n            }\n        }\n    }\n\n    return (\n\n        <span className={props.className ? props.className : null} style={props.style ? props.style : null}>\n            <Modal\n                visible={confirmModalState}\n                title=\"Are you sure?\"\n                maskClosable={true}\n                centered={true}\n                onOk={(e) => { removeReview(); setConfirmModalState(false); }}\n                onCancel={(e) => { setConfirmModalState(false) }}\n            >\n                <div>\n                    Do you want to remove this review?\n                </div>\n            </Modal>\n\n\n            <a onClick={() => {\n                setConfirmModalState(true);\n            }}>\n\n                {\n                    props.button ?\n                        props.button()\n                        :\n                        <Button type=\"danger\" icon=\"delete\">\n                            Remove post\n                        </Button>\n                }\n            </a>\n\n        </span>\n    );\n}\n\n\nconst mapStateToProps = state => ({\n    app: state.app,\n    user: state.user,\n});\nconst mapDispatchToProps = {\n    loginMode: loginMode,\n    loading: loading,\n};\nexport default connect(mapStateToProps, mapDispatchToProps)(Form.create()(withRouter(RemoveReviewButton)));"]},"metadata":{},"sourceType":"module"}