{"ast":null,"code":"var _s = $RefreshSig$();\n\nvar __jsx = React.createElement;\nimport { Button, Col, Divider, Modal, Row } from 'antd';\nimport _ from \"lodash\";\nimport React, { useState } from 'react';\nimport { connect } from 'react-redux';\nimport { getStateIcon } from '../../params/stateList';\nimport { Form } from '@ant-design/compatible';\nimport { notEmptyLength } from '../../common-function';\nimport { showContactList } from '../../redux/actions/app-actions';\n\nvar ContactList = function ContactList(props) {\n  _s();\n\n  var _useState = useState(false),\n      visible = _useState[0],\n      setVisible = _useState[1];\n\n  var contactList = [];\n  var hideContactName = 'show';\n\n  try {\n    contactList = props.contactPerson.contactList;\n  } catch (err) {\n    contactList = [];\n  }\n\n  if (!contactList) {\n    contactList = [];\n  }\n\n  try {\n    hideContactName = props.contactPerson.hideContactName;\n  } catch (err) {\n    hideContactName = 'show';\n  }\n\n  return __jsx(\"span\", {\n    className: props.className ? props.className : null,\n    style: props.style ? props.style : null\n  }, __jsx(\"a\", {\n    onClick: function onClick() {\n      setVisible(true);\n    }\n  }, props.button ? props.button() : // <Tooltip placement=\"top\" title={`Call`}>\n  __jsx(Button, {\n    type: \"normal\",\n    className: \"w-100 ads-purchase-button\",\n    style: {\n      padding: 0,\n      background: '#25D366',\n      borderColor: '#25D366'\n    }\n  }, __jsx(\"img\", {\n    src: \"/assets/profile/icon-list/carmarket-bar-icon/call.png\",\n    style: {\n      width: '17px'\n    }\n  })) // </Tooltip>\n  ), __jsx(Modal, {\n    title: \"Contact Seller\",\n    visible: visible,\n    onCancel: function onCancel() {\n      return setVisible(false);\n    },\n    footer: null\n  }, __jsx(Row, {\n    type: \"flex\",\n    align: \"middle\"\n  }, __jsx(Col, {\n    span: 18\n  }, __jsx(\"h3\", null, props.companys ? props.companys.name : ''), __jsx(Row, {\n    type: \"flex\",\n    align: \"middle\",\n    gutter: [10, 10]\n  }, __jsx(Col, {\n    xs: 4,\n    sm: 4,\n    md: 2,\n    lg: 2,\n    xl: 2\n  }, __jsx(\"div\", {\n    className: \"fill-parent  \",\n    style: {\n      height: '20px'\n    }\n  }, __jsx(\"img\", {\n    src: \"/assets/carDetails/Location@3x.png\",\n    className: \"absolute-center width-100 \"\n  }))), __jsx(Col, {\n    xs: 6,\n    sm: 6,\n    md: 4,\n    lg: 4,\n    xl: 4\n  }, __jsx(\"div\", {\n    className: \"fill-parent  \",\n    style: {\n      height: '50px'\n    }\n  }, __jsx(\"img\", {\n    src: getStateIcon(props.companys ? props.companys.state ? props.companys.state : null : null),\n    style: {\n      height: '50%'\n    },\n    className: \"absolute-center width-100 \"\n  }))), __jsx(Col, {\n    xs: 24,\n    sm: 24,\n    md: 18,\n    lg: 18,\n    xl: 18\n  }, __jsx(\"div\", {\n    className: \"flex-items-align-center flex-justify-start flex-wrap fill-parent\"\n  }, __jsx(\"span\", {\n    className: \"headline   text-align-left padding-x-sm\"\n  }, '>'), __jsx(\"span\", {\n    className: \"headline   text-align-left padding-x-sm\"\n  }, props.companys ? props.companys.area : ''))))), __jsx(Col, {\n    span: 6\n  }, __jsx(\"div\", {\n    className: \"w-100 relative-wrapper\"\n  }, __jsx(\"img\", {\n    src: \"/assets/Ccar-logo.png\",\n    className: \"absolute-center\",\n    style: {\n      width: 70,\n      height: 70\n    }\n  })))), __jsx(Divider, {\n    orientation: \"left\",\n    style: {\n      fontWeight: 'normal',\n      margin: '5px 0px'\n    }\n  }), contactList.length === 0 ? __jsx(Row, {\n    type: \"flex\",\n    align: \"middle\",\n    justify: \"space-between\",\n    gutter: [10, 10]\n  }, __jsx(Col, {\n    xs: 24,\n    sm: 24,\n    md: 16,\n    lg: 16,\n    xl: 16\n  }, __jsx(\"div\", {\n    className: \"flex-items-align-center flex-justify-start flex-wrap\"\n  }, __jsx(\"span\", {\n    className: \"headline   text-truncate padding-xs text-align-left\"\n  }, \"\".concat(_.get(props.contactPerson, ['namePrefix']) || '', \" \").concat(_.get(props.contactPerson, ['firstName']) || '', \" \").concat(_.get(props.contactPerson, ['lastName']) || '')), __jsx(\"span\", {\n    className: \"headline   text-truncate padding-xs\"\n  }, '|'), __jsx(\"span\", {\n    className: \"headline   text-truncate padding-xs\"\n  }, // `${_.get(props.contactPerson, ['contactNoPrimary']) || ''}`\n  \"\".concat(_.get(props.contactPerson, ['contactNoPrimary']) || ''))))) : !notEmptyLength(props.contactPerson) || !notEmptyLength(props.contactPerson.contactList) ? null : props.contactPerson.contactList.sort(function () {\n    return 0.5 - Math.random();\n  }).map(function (v, id) {\n    var contactName = __jsx(React.Fragment, null);\n\n    if (hideContactName === 'show') {\n      contactName = __jsx(React.Fragment, null, _.get(v, ['contactNamePrefix']) || '', _.get(v, ['contactFirstName']) || '', \" \", _.get(v, ['contactLastName']) || '', __jsx(\"span\", {\n        className: \"headline   text-truncate padding-xs\"\n      }, '|'));\n    }\n\n    return __jsx(Row, {\n      key: 'contact' + id,\n      type: \"flex\",\n      align: \"middle\",\n      justify: \"space-between\",\n      gutter: [10, 10]\n    }, __jsx(Col, {\n      span: 16\n    }, __jsx(\"div\", {\n      className: \"flex-items-align-center flex-justify-start flex-wrap\"\n    }, __jsx(\"span\", {\n      className: \"headline   text-truncate padding-xs text-align-left\"\n    }, // `${_.get(v, ['contactNamePrefix']) || ''} ${_.get(v, ['contactFirstName']) || ''} ${_.get(v, ['contactLastName']) || ''}`\n    contactName), __jsx(\"span\", {\n      className: \"headline   text-truncate padding-xs\"\n    }, // `${_.get(v, ['contactNoPrefix']) || ''} ${_.get(v, ['contactNo']) || ''} ${_.get(v, ['contactLastName']) || ''}`\n    \"\".concat(_.get(v, ['contactNoPrefix']) || '', \" \").concat(_.get(v, ['contactNo']) || '')))));\n  })));\n};\n\n_s(ContactList, \"OGsIWlGlwYpVUqIrDReJ1GWx7rw=\");\n\n_c = ContactList;\n\nvar mapStateToProps = function mapStateToProps(state) {\n  return {\n    app: state.app\n  };\n};\n\nvar mapDispatchToProps = {\n  showContactList: showContactList\n};\nexport default connect(mapStateToProps, mapDispatchToProps)(Form.create()(ContactList));\n\nvar _c;\n\n$RefreshReg$(_c, \"ContactList\");","map":{"version":3,"sources":["/Users/faraheen/ccar-cms-next-mobile/components/general/contactList.jsx"],"names":["Button","Col","Divider","Modal","Row","_","React","useState","connect","getStateIcon","Form","notEmptyLength","showContactList","ContactList","props","visible","setVisible","contactList","hideContactName","contactPerson","err","className","style","button","padding","background","borderColor","width","companys","name","height","state","area","fontWeight","margin","length","get","sort","Math","random","map","v","id","contactName","mapStateToProps","app","mapDispatchToProps","create"],"mappings":"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","sourcesContent":["import { Button, Col, Divider, Modal, Row } from 'antd';\nimport _ from \"lodash\";\nimport React, { useState } from 'react';\nimport { connect } from 'react-redux';\nimport { getStateIcon } from '../../params/stateList';\nimport { Form } from '@ant-design/compatible';\nimport { notEmptyLength } from '../../common-function';\nimport { showContactList } from '../../redux/actions/app-actions';\n\n\nconst ContactList = (props) => {\n\n    const [visible, setVisible] = useState(false)\n\n    let contactList = []\n    let hideContactName = 'show'\n    try { contactList = props.contactPerson.contactList } catch (err) { contactList = [] }\n    if(!contactList){contactList=[]}\n\n    try { hideContactName = props.contactPerson.hideContactName } catch (err) { hideContactName = 'show' }\n    \n\n    return (\n        <span className={props.className ? props.className : null} style={props.style ? props.style : null} >\n            <a onClick={() => { setVisible(true) }}>\n                {\n                    props.button ?\n                        props.button()\n                        :\n                        // <Tooltip placement=\"top\" title={`Call`}>\n                            <Button type=\"normal\" className=\"w-100 ads-purchase-button\" style={{ padding: 0, background: '#25D366', borderColor: '#25D366' }}><img src=\"/assets/profile/icon-list/carmarket-bar-icon/call.png\" style={{width:'17px'}} /></Button>\n                        // </Tooltip>\n                }\n            </a>\n            <Modal\n                title=\"Contact Seller\"\n                visible={visible}\n                onCancel={() => setVisible(false)}\n                footer={null}\n            >\n                <Row type=\"flex\" align=\"middle\">\n                    <Col span={18}>\n                        <h3>\n                            {props.companys ? props.companys.name : ''}\n                        </h3>\n                        <Row type=\"flex\" align=\"middle\" gutter={[10, 10]}>\n                            <Col xs={4} sm={4} md={2} lg={2} xl={2}>\n                                <div className=\"fill-parent  \" style={{ height: '20px' }}>\n                                    <img src=\"/assets/carDetails/Location@3x.png\" className=\"absolute-center width-100 \" />\n                                </div>\n                            </Col>\n                            <Col xs={6} sm={6} md={4} lg={4} xl={4}>\n                                <div className=\"fill-parent  \" style={{ height: '50px' }}>\n                                    <img src={getStateIcon(props.companys?props.companys.state ? props.companys.state : null:null)} style={{ height: '50%' }} className=\"absolute-center width-100 \" />\n                                </div>\n                            </Col>\n                            <Col xs={24} sm={24} md={18} lg={18} xl={18}>\n                                <div className=\"flex-items-align-center flex-justify-start flex-wrap fill-parent\">\n                                    <span className=\"headline   text-align-left padding-x-sm\">\n                                        {'>'}\n                                    </span>\n                                    <span className=\"headline   text-align-left padding-x-sm\">\n                                        {props.companys ? props.companys.area : ''}\n                                    </span>\n                                </div>\n                            </Col>\n                        </Row>\n                    </Col>\n                    <Col span={6}>\n                        <div className=\"w-100 relative-wrapper\">\n                            <img src=\"/assets/Ccar-logo.png\" className=\"absolute-center\" style={{ width: 70, height: 70 }} />\n                        </div>\n                    </Col>\n                </Row>\n                <Divider orientation=\"left\" style={{ fontWeight: 'normal', margin: '5px 0px' }} />\n                {/* {props.companys?props.companys.multipleContact !== 'on' ? */}\n                              {contactList.length===0?\n                    <Row type=\"flex\" align=\"middle\" justify=\"space-between\" gutter={[10, 10]}>\n                        <Col xs={24} sm={24} md={16} lg={16} xl={16} >\n                            <div className=\"flex-items-align-center flex-justify-start flex-wrap\">\n                                <span className=\"headline   text-truncate padding-xs text-align-left\">\n                                    {\n                                        `${_.get(props.contactPerson, ['namePrefix']) || ''} ${_.get(props.contactPerson, ['firstName']) || ''} ${_.get(props.contactPerson, ['lastName']) || ''}`\n                                    }\n                                </span>\n                                <span className=\"headline   text-truncate padding-xs\">\n                                    {'|'}\n                                </span>\n                                <span className=\"headline   text-truncate padding-xs\">\n                                    {\n                                        // `${_.get(props.contactPerson, ['contactNoPrimary']) || ''}`\n                                        `${_.get(props.contactPerson, ['contactNoPrimary']) || ''}`\n                                    }\n                                </span>\n                            </div>\n                        </Col>\n    \n                    </Row>\n                    :\n                    !notEmptyLength(props.contactPerson) || !notEmptyLength(props.contactPerson.contactList) ?\n                        null\n                        :\n                        props.contactPerson.contactList.sort(() => 0.5 - Math.random()).map((v, id) => {\n\n                            let contactName = <></>\n                            if (hideContactName === 'show') {\n                                \n                                contactName = \n                                \n                                <>\n                                {_.get(v, ['contactNamePrefix']) || ''}{_.get(v, ['contactFirstName']) || ''} {_.get(v, ['contactLastName']) || ''}\n                                <span className=\"headline   text-truncate padding-xs\">{'|'}</span>\n                                </>\n                            } \n                            \n                            return (\n                                <Row key={'contact' + id} type=\"flex\" align=\"middle\" justify=\"space-between\" gutter={[10, 10]}>\n                                    <Col span={16}>\n                                        <div className=\"flex-items-align-center flex-justify-start flex-wrap\">\n                                            <span className=\"headline   text-truncate padding-xs text-align-left\">\n                                                {\n                                                    // `${_.get(v, ['contactNamePrefix']) || ''} ${_.get(v, ['contactFirstName']) || ''} ${_.get(v, ['contactLastName']) || ''}`\n                                                    contactName\n                                                }\n                                            </span>\n                                        \n                                            <span className=\"headline   text-truncate padding-xs\">\n                                                {\n                                                    // `${_.get(v, ['contactNoPrefix']) || ''} ${_.get(v, ['contactNo']) || ''} ${_.get(v, ['contactLastName']) || ''}`\n                                                    `${_.get(v, ['contactNoPrefix']) || ''} ${_.get(v, ['contactNo']) || ''}`\n                                                }\n                                            </span>\n                                        </div>\n                                    </Col>\n                \n                                </Row>\n                            )\n                        })\n                      \n                }\n            </Modal>\n        </span>\n    );\n}\n\nconst mapStateToProps = state => ({\n    app: state.app,\n});\n\nconst mapDispatchToProps = {\n    showContactList: showContactList,\n};\nexport default connect(mapStateToProps, mapDispatchToProps)(Form.create()(ContactList));"]},"metadata":{},"sourceType":"module"}