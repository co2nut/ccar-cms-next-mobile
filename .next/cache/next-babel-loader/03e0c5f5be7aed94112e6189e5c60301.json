{"ast":null,"code":"import _defineProperty from \"@babel/runtime/helpers/esm/defineProperty\";\n\nvar _s = $RefreshSig$();\n\nvar __jsx = React.createElement;\n\nfunction ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); if (enumerableOnly) { symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; }); } keys.push.apply(keys, symbols); } return keys; }\n\nfunction _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; if (i % 2) { ownKeys(Object(source), true).forEach(function (key) { _defineProperty(target, key, source[key]); }); } else if (Object.getOwnPropertyDescriptors) { Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)); } else { ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } } return target; }\n\nimport { Empty, Tooltip } from 'antd';\nimport _ from 'lodash';\nimport React, { useEffect, useState } from 'react';\nimport Scrollbars from 'react-custom-scrollbars';\nimport { connect } from 'react-redux';\nimport { arrayLengthCount, isValidNumber } from '../../common-function';\nimport { allIcon } from '../../icon';\nimport { carBrandsList } from '../../params/carBrandsList';\nimport { emptyIcon } from '../../params/common';\n\nvar BrandList = function BrandList(props) {\n  _s();\n\n  var _useState = useState(carBrandsList),\n      brands = _useState[0],\n      setBrands = _useState[1];\n\n  var _useState2 = useState(''),\n      value = _useState2[0],\n      setValue = _useState2[1];\n\n  var _useState3 = useState(-1),\n      limit = _useState3[0],\n      setLimit = _useState3[1];\n\n  var _useState4 = useState({}),\n      tooltipVisible = _useState4[0],\n      setTooltipVisible = _useState4[1];\n\n  useEffect(function () {\n    var limit = props.limit;\n\n    if (isValidNumber(parseInt(props.limit))) {\n      limit = parseInt(props.limit);\n    } else {\n      limit = -1;\n    }\n\n    if (_.isArray(props.data) && !_.isEmpty(props.data)) {\n      var _brands = _.compact(_.map(props.data, function (brand) {\n        var selectedBrand;\n\n        if (_.isPlainObject(brand) && _.get(brand, ['value'])) {\n          selectedBrand = _.find(carBrandsList, function (origBrand) {\n            return _.toLower(origBrand.value) == _.toLower(brand.value);\n          });\n        } else {\n          selectedBrand = _.find(carBrandsList, function (origBrand) {\n            return _.toLower(origBrand.value) == _.toLower(brand);\n          });\n        }\n\n        return selectedBrand;\n      }));\n\n      setBrands(limit != -1 ? _.slice(_brands, 0, limit) : _brands);\n    } else {\n      setBrands([]); // setBrands(limit != -1 ? _.sampleSize(carBrandsList, limit) : _.sampleSize(carBrandsList, arrayLengthCount(carBrandsList)));\n    }\n  }, [props.data]);\n  useEffect(function () {\n    if (_.isString(props.value)) {\n      var selectedBrand = _.find(carBrandsList, function (origBrand) {\n        return _.toLower(origBrand.value) == _.toLower(props.value);\n      });\n\n      setValue(_.get(selectedBrand, \"value\") || undefined);\n    } else {\n      setValue(undefined);\n    }\n  }, [props.value]);\n  return __jsx(\"div\", {\n    className: \"width-100 \".concat(props.className || ''),\n    style: _objectSpread({}, props.style)\n  }, __jsx(\"div\", null, _.isArray(brands) && !_.isEmpty(brands) ? __jsx(\"div\", {\n    className: \"padding-sm\"\n  }, props.showAllIcon === true ? __jsx(Tooltip, {\n    title: \"All Brands\",\n    visible: props.showTooltip === true ? _.get(tooltipVisible, ['allIcon']) : false,\n    onVisibleChange: function onVisibleChange(v) {\n      setTooltipVisible(_objectSpread(_objectSpread({}, tooltipVisible), {}, {\n        allIcon: v\n      }));\n    }\n  }, __jsx(\"div\", {\n    key: 'all-brand',\n    className: \"margin-sm background-grey-lighten-2 avatar relative-wrapper flex-items-no-shrink cursor-pointer\",\n    style: {\n      width: props.size || 50,\n      height: props.size || 50\n    },\n    onClick: function onClick() {\n      if (props.onClickBrand) {\n        props.onClickBrand({\n          value: 'all'\n        });\n      }\n    }\n  }, __jsx(\"img\", {\n    src: allIcon,\n    style: {\n      width: (props.size || 50) * 0.5,\n      height: (props.size || 50) * 0.5\n    },\n    className: \"absolute-center\"\n  }))) : null, _.map(brands, function (brand, i) {\n    return __jsx(Tooltip, {\n      title: \"\".concat(brand.value),\n      visible: props.showTooltip === true ? _.get(tooltipVisible, [brand.value]) : false,\n      onVisibleChange: function onVisibleChange(v) {\n        setTooltipVisible(_objectSpread(_objectSpread({}, tooltipVisible), {}, _defineProperty({}, brand.value || '', v)));\n      }\n    }, __jsx(\"div\", {\n      key: 'brand' + i,\n      className: \"relative-wrapper flex-items-no-shrink cursor-pointer margin-sm \".concat(value == brand.value ? props.selectedClassName || 'border-yellow avatar' : ''),\n      style: {\n        width: props.size || 50,\n        height: props.size || 50\n      },\n      onClick: function onClick() {\n        if (props.onClickBrand) {\n          props.onClickBrand(brand);\n        }\n\n        setValue(brand.value);\n      }\n    }, __jsx(\"img\", {\n      src: brand.icon || emptyIcon,\n      className: \" absolute-center-img-no-stretch\"\n    })));\n  })) : props.emptyView != undefined || props.emptyView === null ? props.emptyView : __jsx(\"div\", {\n    className: \"flex-justify-center flex-items-align-center padding-md\"\n  }, __jsx(Empty, null))));\n};\n\n_s(BrandList, \"wau873L8hB7JdinIwm2yjT4djFA=\");\n\n_c = BrandList;\n\nvar mapStateToProps = function mapStateToProps(state) {\n  return {\n    app: state.app,\n    user: state.user,\n    productsList: state.productsList\n  };\n};\n\nvar mapDispatchToProps = {};\nexport default connect(mapStateToProps, mapDispatchToProps)(BrandList);\n\nvar _c;\n\n$RefreshReg$(_c, \"BrandList\");","map":{"version":3,"sources":["/Users/faraheen/ccar-cms-next-mobile/components/product-list/brand-list.jsx"],"names":["Empty","Tooltip","_","React","useEffect","useState","Scrollbars","connect","arrayLengthCount","isValidNumber","allIcon","carBrandsList","emptyIcon","BrandList","props","brands","setBrands","value","setValue","limit","setLimit","tooltipVisible","setTooltipVisible","parseInt","isArray","data","isEmpty","compact","map","brand","selectedBrand","isPlainObject","get","find","origBrand","toLower","slice","isString","undefined","className","style","showAllIcon","showTooltip","v","width","size","height","onClickBrand","i","selectedClassName","icon","emptyView","mapStateToProps","state","app","user","productsList","mapDispatchToProps"],"mappings":"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","sourcesContent":["import { Empty, Tooltip } from 'antd';\nimport _ from 'lodash';\nimport React, { useEffect, useState } from 'react';\nimport Scrollbars from 'react-custom-scrollbars';\nimport { connect } from 'react-redux';\nimport { arrayLengthCount, isValidNumber } from '../../common-function';\nimport { allIcon } from '../../icon';\nimport { carBrandsList } from '../../params/carBrandsList';\nimport { emptyIcon } from '../../params/common';\n\n\n\nconst BrandList = (props) => {\n\n    const [brands, setBrands] = useState(carBrandsList)\n    const [value, setValue] = useState('')\n    const [limit, setLimit] = useState(-1)\n    const [tooltipVisible, setTooltipVisible] = useState({});\n\n\n    useEffect(() => {\n        let limit = props.limit;\n        if (isValidNumber(parseInt(props.limit))) {\n            limit = parseInt(props.limit)\n        } else {\n            limit = -1;\n        }\n\n        if (_.isArray(props.data) && !_.isEmpty(props.data)) {\n\n            let brands = _.compact(_.map(props.data, function (brand) {\n                let selectedBrand;\n                if (_.isPlainObject(brand) && _.get(brand, ['value'])) {\n                    selectedBrand = _.find(carBrandsList, function (origBrand) {\n                        return _.toLower(origBrand.value) == _.toLower(brand.value);\n                    })\n                } else {\n                    selectedBrand = _.find(carBrandsList, function (origBrand) {\n                        return _.toLower(origBrand.value) == _.toLower(brand);\n                    })\n                }\n\n                return selectedBrand;\n\n            }))\n\n            setBrands(limit != -1 ? _.slice(brands, 0, limit) : brands);\n        } else {\n            setBrands([])\n            // setBrands(limit != -1 ? _.sampleSize(carBrandsList, limit) : _.sampleSize(carBrandsList, arrayLengthCount(carBrandsList)));\n        }\n\n    }, [props.data])\n\n    useEffect(() => {\n\n        if (_.isString(props.value)) {\n\n            let selectedBrand = _.find(carBrandsList, function (origBrand) {\n                return _.toLower(origBrand.value) == _.toLower(props.value);\n            })\n            setValue(_.get(selectedBrand , `value`) || undefined)\n        }else{\n            setValue(undefined)\n        }\n\n    }, [props.value])\n\n\n    return (\n        <div className={`width-100 ${props.className || ''}`} style={{ ...props.style }}>\n            <div>\n                {\n                    _.isArray(brands) && !_.isEmpty(brands) ?\n                        <div className=\"padding-sm\">\n                            {\n                                props.showAllIcon === true ?\n                                    <Tooltip title={`All Brands`} visible={props.showTooltip === true ? _.get(tooltipVisible, ['allIcon']) : false} onVisibleChange={(v) => {\n                                        setTooltipVisible({\n                                            ...tooltipVisible,\n                                            allIcon: v,\n                                        });\n                                    }}>\n                                        <div key={'all-brand'} className={`margin-sm background-grey-lighten-2 avatar relative-wrapper flex-items-no-shrink cursor-pointer`}\n                                            style={{ width: props.size || 50, height: props.size || 50 }}\n                                            onClick={() => {\n                                                if (props.onClickBrand) {\n                                                    props.onClickBrand({ value: 'all' })\n                                                }\n                                            }} >\n                                            <img src={allIcon} style={{ width: (props.size || 50) * 0.5, height: (props.size || 50) * 0.5 }} className=\"absolute-center\" ></img>\n                                        </div>\n                                    </Tooltip>\n                                    :\n                                    null\n                            }\n                            {\n                                _.map(brands, function (brand, i) {\n                                    return (\n                                        <Tooltip title={`${brand.value}`} visible={props.showTooltip === true ? _.get(tooltipVisible, [brand.value]) : false} onVisibleChange={(v) => {\n                                            setTooltipVisible({\n                                                ...tooltipVisible,\n                                                [brand.value || '']: v,\n                                            });\n                                        }}>\n                                            <div key={'brand' + i} className={`relative-wrapper flex-items-no-shrink cursor-pointer margin-sm ${value == brand.value ? props.selectedClassName || 'border-yellow avatar' : ''}`}\n                                                style={{ width: props.size || 50, height: props.size || 50 }}\n                                                onClick={() => {\n                                                    if (props.onClickBrand) {\n                                                        props.onClickBrand(brand)\n                                                    }\n                                                    setValue(brand.value)\n                                                }} >\n                                                <img src={brand.icon || emptyIcon} className=\" absolute-center-img-no-stretch\"></img>\n                                            </div>\n                                        </Tooltip>\n                                    )\n                                })\n                            }\n                        </div>\n                        :\n                        props.emptyView != undefined || props.emptyView === null ?\n                            props.emptyView\n                            :\n                            <div className=\"flex-justify-center flex-items-align-center padding-md\">\n                                <Empty></Empty>\n                            </div>\n                }\n            </div>\n        </div>\n    );\n}\n\n\nconst mapStateToProps = state => ({\n    app: state.app,\n    user: state.user,\n    productsList: state.productsList,\n});\n\n\nconst mapDispatchToProps = {\n};\nexport default connect(mapStateToProps, mapDispatchToProps)(BrandList);"]},"metadata":{},"sourceType":"module"}