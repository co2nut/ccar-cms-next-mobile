{"ast":null,"code":"function ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); if (enumerableOnly) { symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; }); } keys.push.apply(keys, symbols); } return keys; }\n\nfunction _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; if (i % 2) { ownKeys(Object(source), true).forEach(function (key) { _defineProperty(target, key, source[key]); }); } else if (Object.getOwnPropertyDescriptors) { Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)); } else { ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } } return target; }\n\nfunction _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }\n\nimport _ from 'lodash';\nimport moment from 'moment';\nimport { FETCH_NEWS, FETCH_CLUB, FETCH_PRICE, FETCH_POPULAR, FETCH_POPULARCARS, FETCH_CARNAME, FETCH_CARDETAILS, FETCH_BRANDS, FETCH_BRANDDETAIL, FETCH_BRANDCARS, FETCH_DETAILS, FETCH_FILTERED_COMPARE_DATA, FETCH_FUEL, FETCH_COMPARE_NEWCAR_IDS, ADD_COMPARE_NEWCAR_ID, REMOVE_COMPARE_NEWCAR_ID, FETCH_COMPARE__NEWCAR_LIMIT, FETCH_PEER_COMPARE_CARS, FETCH_NEW_CAR_FILTER_GROUP, RESET_NEW_CAR_FILTER_GROUP } from '../actions/newcars-actions';\nimport localStorage from 'local-storage';\nimport { checkIsNeedPersist, checkNeedPersist, getPersistObj, persistRedux } from '../config';\nconst INITIAL_STATE = {\n  news: [],\n  club: [],\n  price: [],\n  popular: [],\n  popularCars: [],\n  CarName: {},\n  brands: [],\n  brandDetail: [],\n  brandCars: [],\n  details: [],\n  fuel: [],\n  filteredCompareData: [],\n  newCarFilterGroup: {\n    make: '',\n    bodyType: '',\n    transmission: '',\n    drivenwheel: '',\n    seatCapacity: '',\n    fuelType: '',\n    exterior: '',\n    interior: '',\n    safety: '',\n    priceRange: [],\n    monthlyPaymentRange: [],\n    engineCapacityRange: []\n  },\n  peerComp: [],\n  compareIds: [],\n  compareLimit: -1\n};\nexport default function (state = INITIAL_STATE, action) {\n  // checkNeedPersist(_.get(action, 'type'), 'newCars', _.get(action, 'payload'), _.get(action, 'isRestoreData'));\n  let persistStates = _.get(localStorage.get('redux') || {}, 'newCars') || INITIAL_STATE;\n\n  let newState = _objectSpread(_objectSpread({}, state), persistStates);\n\n  if (!_.isEqual(state, newState)) {\n    state = newState;\n  }\n\n  switch (action.type) {\n    case FETCH_NEWS:\n      state = _objectSpread(_objectSpread({}, state), {}, {\n        news: action.payload\n      });\n      break;\n\n    case FETCH_CLUB:\n      state = _objectSpread(_objectSpread({}, state), {}, {\n        club: action.payload\n      });\n      break;\n\n    case FETCH_PRICE:\n      state = _objectSpread(_objectSpread({}, state), {}, {\n        price: action.payload\n      });\n      break;\n\n    case FETCH_POPULAR:\n      state = _objectSpread(_objectSpread({}, state), {}, {\n        popular: action.payload\n      });\n      break;\n\n    case FETCH_POPULARCARS:\n      state = _objectSpread(_objectSpread({}, state), {}, {\n        popularCars: action.payload\n      });\n\n    case FETCH_CARNAME:\n      state = _objectSpread(_objectSpread({}, state), {}, {\n        CarName: action.payload\n      });\n      break;\n\n    case FETCH_CARDETAILS:\n      state = _objectSpread(_objectSpread({}, state), {}, {\n        details: action.payload\n      });\n      break;\n\n    case FETCH_BRANDS:\n      state = _objectSpread(_objectSpread({}, state), {}, {\n        brands: action.payload\n      });\n      break;\n\n    case FETCH_BRANDDETAIL:\n      state = _objectSpread(_objectSpread({}, state), {}, {\n        brandDetail: action.payload\n      });\n      break;\n\n    case FETCH_BRANDCARS:\n      state = _objectSpread(_objectSpread({}, state), {}, {\n        brandCars: action.payload\n      });\n      break;\n\n    case FETCH_DETAILS:\n      state = _objectSpread(_objectSpread({}, state), {}, {\n        details: action.payload\n      });\n      break;\n\n    case FETCH_FUEL:\n      state = _objectSpread(_objectSpread({}, state), {}, {\n        fuel: action.payload\n      });\n      break;\n\n    case FETCH_FILTERED_COMPARE_DATA:\n      state = _objectSpread(_objectSpread({}, state), {}, {\n        filteredCompareData: action.payload\n      });\n      break;\n\n    case FETCH_COMPARE_NEWCAR_IDS:\n      state = _objectSpread(_objectSpread({}, state), {}, {\n        compareIds: action.payload\n      });\n      break;\n\n    case FETCH_COMPARE__NEWCAR_LIMIT:\n      state = _objectSpread(_objectSpread({}, state), {}, {\n        compareLimit: action.payload\n      });\n      break;\n\n    case ADD_COMPARE_NEWCAR_ID:\n      if (state.compareIds.length < state.compareLimit) {\n        let checkIfExist = _.findIndex(state.compareIds, function (item) {\n          state = item == action.payload;\n        });\n\n        if (checkIfExist == -1) {\n          let temp = _.cloneDeep(state.compareIds);\n\n          temp.push(action.payload);\n          state = _objectSpread(_objectSpread({}, state), {}, {\n            compareIds: temp\n          });\n        } else {\n          state = _objectSpread({}, state);\n        }\n      } else {\n        state = _objectSpread({}, state);\n      }\n\n      break;\n\n    case REMOVE_COMPARE_NEWCAR_ID:\n      let temp = state.compareIds.filter(item => item !== action.payload);\n      state = _objectSpread(_objectSpread({}, state), {}, {\n        compareIds: temp\n      });\n      break;\n\n    case FETCH_PEER_COMPARE_CARS:\n      state = _objectSpread(_objectSpread({}, state), {}, {\n        peerComp: action.payload\n      });\n      break;\n\n    case FETCH_NEW_CAR_FILTER_GROUP:\n      state = _objectSpread(_objectSpread({}, state), {}, {\n        newCarFilterGroup: action.payload\n      });\n      break;\n\n    case RESET_NEW_CAR_FILTER_GROUP:\n      state = _objectSpread(_objectSpread({}, state), {}, {\n        newCarFilterGroup: {\n          make: '',\n          bodyType: '',\n          transmission: '',\n          drivenwheel: '',\n          seatCapacity: '',\n          fuelType: '',\n          exterior: '',\n          interior: '',\n          safety: '',\n          priceRange: [],\n          monthlyPaymentRange: [],\n          engineCapacityRange: []\n        }\n      });\n      break;\n\n    default:\n      state = state;\n      break;\n  }\n\n  persistRedux('newCars', state);\n  return state;\n}","map":{"version":3,"sources":["/Users/faraheen/ccar-cms-next-mobile/redux/reducers/newcars-reducer.js"],"names":["_","moment","FETCH_NEWS","FETCH_CLUB","FETCH_PRICE","FETCH_POPULAR","FETCH_POPULARCARS","FETCH_CARNAME","FETCH_CARDETAILS","FETCH_BRANDS","FETCH_BRANDDETAIL","FETCH_BRANDCARS","FETCH_DETAILS","FETCH_FILTERED_COMPARE_DATA","FETCH_FUEL","FETCH_COMPARE_NEWCAR_IDS","ADD_COMPARE_NEWCAR_ID","REMOVE_COMPARE_NEWCAR_ID","FETCH_COMPARE__NEWCAR_LIMIT","FETCH_PEER_COMPARE_CARS","FETCH_NEW_CAR_FILTER_GROUP","RESET_NEW_CAR_FILTER_GROUP","localStorage","checkIsNeedPersist","checkNeedPersist","getPersistObj","persistRedux","INITIAL_STATE","news","club","price","popular","popularCars","CarName","brands","brandDetail","brandCars","details","fuel","filteredCompareData","newCarFilterGroup","make","bodyType","transmission","drivenwheel","seatCapacity","fuelType","exterior","interior","safety","priceRange","monthlyPaymentRange","engineCapacityRange","peerComp","compareIds","compareLimit","state","action","persistStates","get","newState","isEqual","type","payload","length","checkIfExist","findIndex","item","temp","cloneDeep","push","filter"],"mappings":"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","sourcesContent":["import _ from 'lodash'\nimport moment from 'moment'\nimport {\n  FETCH_NEWS,\n  FETCH_CLUB,\n  FETCH_PRICE,\n  FETCH_POPULAR,\n  FETCH_POPULARCARS,\n  FETCH_CARNAME,\n  FETCH_CARDETAILS,\n  FETCH_BRANDS,\n  FETCH_BRANDDETAIL,\n  FETCH_BRANDCARS,\n  FETCH_DETAILS,\n  FETCH_FILTERED_COMPARE_DATA,\n  FETCH_FUEL,\n  FETCH_COMPARE_NEWCAR_IDS,\n  ADD_COMPARE_NEWCAR_ID,\n  REMOVE_COMPARE_NEWCAR_ID,\n  FETCH_COMPARE__NEWCAR_LIMIT,\n  FETCH_PEER_COMPARE_CARS,\n  FETCH_NEW_CAR_FILTER_GROUP,\n  RESET_NEW_CAR_FILTER_GROUP,\n} from '../actions/newcars-actions';\nimport localStorage from 'local-storage';\nimport { checkIsNeedPersist, checkNeedPersist, getPersistObj, persistRedux } from '../config';\n\nconst INITIAL_STATE = {\n  news: [],\n  club: [],\n  price: [],\n  popular: [],\n  popularCars: [],\n  CarName: {},\n  brands: [],\n  brandDetail: [],\n  brandCars: [],\n  details: [],\n  fuel: [],\n  filteredCompareData: [],\n  newCarFilterGroup: {\n    make: '',\n    bodyType: '',\n    transmission: '',\n    drivenwheel: '',\n    seatCapacity: '',\n    fuelType: '',\n    exterior: '',\n    interior: '',\n    safety: '',\n    priceRange: [],\n    monthlyPaymentRange: [],\n    engineCapacityRange: [],\n  },\n  peerComp: [],\n  compareIds: [],\n  compareLimit: -1,\n}\n\nexport default function (state = INITIAL_STATE, action) {\n\n  // checkNeedPersist(_.get(action, 'type'), 'newCars', _.get(action, 'payload'), _.get(action, 'isRestoreData'));\n\n  let persistStates = _.get(localStorage.get('redux') || {}, 'newCars') || INITIAL_STATE;\n  let newState = {\n    ...state,\n    ...persistStates\n  }\n  if(!_.isEqual(state, newState)){\n    state = newState;\n  }\n  switch (action.type) {\n    case FETCH_NEWS:\n      state = {\n        ...state,\n        news: action.payload\n      }\n      break;\n    case FETCH_CLUB:\n      state = {\n        ...state,\n        club: action.payload\n      }\n      break;\n\n    case FETCH_PRICE:\n      state = {\n        ...state,\n        price: action.payload\n      }\n      break;\n\n    case FETCH_POPULAR:\n      state = {\n        ...state,\n        popular: action.payload\n      }\n      break;\n\n    case FETCH_POPULARCARS:\n      state = {\n        ...state,\n        popularCars: action.payload\n      }\n\n    case FETCH_CARNAME:\n      state = {\n        ...state,\n        CarName: action.payload\n      }\n      break;\n\n    case FETCH_CARDETAILS:\n      state = {\n        ...state,\n        details: action.payload\n      }\n      break;\n\n    case FETCH_BRANDS:\n      state = {\n        ...state,\n        brands: action.payload\n      }\n      break;\n\n    case FETCH_BRANDDETAIL:\n      state = {\n        ...state,\n        brandDetail: action.payload\n      }\n      break;\n\n    case FETCH_BRANDCARS:\n      state = {\n        ...state,\n        brandCars: action.payload\n      }\n      break;\n    case FETCH_DETAILS:\n      state = {\n        ...state,\n        details: action.payload\n      }\n      break;\n\n    case FETCH_FUEL:\n      state = {\n        ...state,\n        fuel: action.payload\n      }\n      break;\n    case FETCH_FILTERED_COMPARE_DATA:\n      state = {\n        ...state,\n        filteredCompareData: action.payload\n      }\n      break;\n    case FETCH_COMPARE_NEWCAR_IDS:\n      state = {\n        ...state,\n        compareIds: action.payload\n      }\n      break;\n    case FETCH_COMPARE__NEWCAR_LIMIT:\n      state = {\n        ...state,\n        compareLimit: action.payload\n      }\n      break;\n    case ADD_COMPARE_NEWCAR_ID:\n      if (state.compareIds.length < state.compareLimit) {\n        let checkIfExist = _.findIndex(state.compareIds, function (item) {\n          state = item == action.payload;\n        })\n        if (checkIfExist == -1) {\n          let temp = _.cloneDeep(state.compareIds)\n          temp.push(action.payload)\n          state = {\n            ...state,\n            compareIds: temp\n          }\n        } else {\n          state = {\n            ...state,\n          }\n        }\n      } else {\n        state = {\n          ...state,\n        }\n      }\n      break;\n    case REMOVE_COMPARE_NEWCAR_ID:\n      let temp = state.compareIds.filter((item) => item !== action.payload);\n\n      state = {\n        ...state,\n        compareIds: temp,\n      }\n      break;\n\n    case FETCH_PEER_COMPARE_CARS:\n      state = {\n        ...state,\n        peerComp: action.payload\n      }\n      break;\n    case FETCH_NEW_CAR_FILTER_GROUP:\n      state = {\n        ...state,\n        newCarFilterGroup: action.payload\n      }\n      break;\n    case RESET_NEW_CAR_FILTER_GROUP:\n      state = {\n        ...state,\n        newCarFilterGroup: {\n          make: '',\n          bodyType: '',\n          transmission: '',\n          drivenwheel: '',\n          seatCapacity: '',\n          fuelType: '',\n          exterior: '',\n          interior: '',\n          safety: '',\n          priceRange: [],\n          monthlyPaymentRange: [],\n          engineCapacityRange: [],\n        },\n      }\n      break;\n\n    default:\n      state = state\n      break;\n\n  }\n\n  persistRedux('newCars', state)\n\n  return state;\n}\n"]},"metadata":{},"sourceType":"module"}