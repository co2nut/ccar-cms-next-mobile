{"ast":null,"code":"var _s = $RefreshSig$();\n\nvar __jsx = React.createElement;\nimport { Col, Form, Icon, message, Row } from 'antd';\nimport _ from 'lodash';\nimport React, { useEffect, useState } from 'react';\nimport { connect } from 'react-redux';\nimport client from '../../feathers';\nimport UserPosts from './UserPosts';\nimport { arrayLengthCount, notEmptyLength } from '../../common-function';\nimport WindowScrollLoadWrapper from '../general/WindowScrollLoadWrapper';\nimport { loading } from '../../redux/actions/app-actions';\nimport { setUser } from '../../redux/actions/user-actions';\nimport { updateSellerProfile } from '../../redux/actions/sellerProfile-actions';\nimport { withRouter } from 'next/router';\nimport InfiniteScrollWrapper from '../general/InfiniteScrollWrapper';\n\nvar moment = require('moment');\n\nvar POSTSIZE = 11;\n\nvar UserSavedCarFreakPosts = function UserSavedCarFreakPosts(props) {\n  _s();\n\n  var _useState = useState({}),\n      profile = _useState[0],\n      setProfile = _useState[1];\n\n  var _useState2 = useState([]),\n      postLikes = _useState2[0],\n      setPostLikes = _useState2[1];\n\n  var _useState3 = useState([]),\n      posts = _useState3[0],\n      setPosts = _useState3[1];\n\n  var _useState4 = useState(0),\n      postTotal = _useState4[0],\n      setPostTotal = _useState4[1];\n\n  var _useState5 = useState(1),\n      postPage = _useState5[0],\n      setPostPage = _useState5[1];\n\n  var _useState6 = useState(false),\n      postLoading = _useState6[0],\n      setPostLoading = _useState6[1];\n\n  useEffect(function () {\n    getUserChatLikes(_.map(posts, '_id'));\n  }, [props.user.authenticated]);\n  useEffect(function () {\n    if (_.isPlainObject(props.data) && !_.isEmpty(props.data)) {\n      setProfile(props.data);\n    } else {\n      setProfile({});\n    }\n  }, [props.data]);\n  useEffect(function () {\n    if (_.get(profile, ['_id'])) {\n      if (postPage == 1) {\n        getPosts(0);\n      } else {\n        setPostPage(1);\n      }\n    } else {\n      setPosts([]);\n      setPostTotal(0);\n      setPostPage(1);\n    }\n  }, [profile]);\n  useEffect(function () {\n    getPosts((postPage - 1) * POSTSIZE);\n  }, [postPage]);\n\n  function getPosts(skip) {\n    if (_.get(profile, ['_id'])) {\n      if (_.isNumber(skip)) {\n        skip = parseInt(skip);\n      } else {\n        skip = 0;\n      }\n\n      setPostLoading(true);\n      client.service('savedpost').find({\n        query: {\n          userId: _.get(profile, ['_id']),\n          chatType: 'carfreaks',\n          $sort: {\n            createdAt: -1\n          },\n          $limit: POSTSIZE,\n          $populate: [{\n            path: 'chatId',\n            ref: 'chats',\n            populate: [{\n              path: 'userId',\n              ref: 'users'\n            }]\n          }],\n          $skip: skip\n        }\n      }).then(function (res) {\n        setPostLoading(false);\n\n        if (notEmptyLength(res.data)) {\n          setPosts(postPage == 1 ? _.map(res.data, 'chatId') : posts.concat(_.map(res.data, 'chatId')));\n          getUserChatLikes(_.map(res.data, 'chatId._id'), true);\n        }\n\n        setPostTotal(res.total);\n      })[\"catch\"](function (err) {\n        setPostLoading(false);\n        message.error(err.message);\n      });\n    }\n  }\n\n  function getUserChatLikes(ids, concat) {\n    if (_.isArray(ids) && !_.isEmpty(ids) && _.get(props.user, ['authenticated']) && _.get(props.user, ['info', 'user', '_id'])) {\n      client.service('chatlikes').find({\n        query: {\n          chatId: {\n            $in: ids || []\n          },\n          userId: _.get(props.user, ['info', 'user', '_id'])\n        }\n      }).then(function (res) {\n        setPostLikes(concat ? _.concat(postLikes, res.data) : res.data);\n      });\n    }\n  }\n\n  return __jsx(Row, {\n    className: \"margin-top-md\"\n  }, __jsx(Col, {\n    xs: 24,\n    sm: 24,\n    md: 24,\n    lg: 24,\n    xl: 24\n  }, __jsx(InfiniteScrollWrapper, {\n    onScrolledBottom: function onScrolledBottom() {\n      if (arrayLengthCount(posts) < postTotal && !postLoading) {\n        setPostPage(postPage + 1);\n      }\n    },\n    hasMore: !postLoading && arrayLengthCount(posts) < postTotal\n  }, __jsx(UserPosts, {\n    posts: posts,\n    showAddPostCard: false,\n    postLikes: postLikes,\n    onUpdatePost: function onUpdatePost(data) {\n      if (_.isPlainObject(data) && !_.isEmpty(data)) {\n        var newPosts = _.map(posts, function (post) {\n          return post._id == data._id ? data : post;\n        });\n\n        setPosts(newPosts);\n      }\n    },\n    onUpdatePostLikes: function onUpdatePostLikes(data) {\n      if (_.isArray(data) && !_.isEmpty(data)) {\n        setPostLikes(data);\n      }\n    }\n  }))));\n};\n\n_s(UserSavedCarFreakPosts, \"EYqgQQ+XKQ9Rohq2BAylDyVmisQ=\");\n\n_c = UserSavedCarFreakPosts;\n\nvar mapStateToProps = function mapStateToProps(state) {\n  return {\n    app: state.app,\n    user: state.user,\n    sellerProfile: state.sellerProfile\n  };\n};\n\nvar mapDispatchToProps = {\n  loading: loading,\n  setUser: setUser,\n  updateSellerProfile: updateSellerProfile\n};\nexport default connect(mapStateToProps, mapDispatchToProps)(Form.create()(withRouter(UserSavedCarFreakPosts)));\n\nvar _c;\n\n$RefreshReg$(_c, \"UserSavedCarFreakPosts\");","map":{"version":3,"sources":["/Users/faraheen/ccar-cms-next-mobile/components/profile/UserSavedCarFreakPosts.jsx"],"names":["Col","Form","Icon","message","Row","_","React","useEffect","useState","connect","client","UserPosts","arrayLengthCount","notEmptyLength","WindowScrollLoadWrapper","loading","setUser","updateSellerProfile","withRouter","InfiniteScrollWrapper","moment","require","POSTSIZE","UserSavedCarFreakPosts","props","profile","setProfile","postLikes","setPostLikes","posts","setPosts","postTotal","setPostTotal","postPage","setPostPage","postLoading","setPostLoading","getUserChatLikes","map","user","authenticated","isPlainObject","data","isEmpty","get","getPosts","skip","isNumber","parseInt","service","find","query","userId","chatType","$sort","createdAt","$limit","$populate","path","ref","populate","$skip","then","res","concat","total","err","error","ids","isArray","chatId","$in","newPosts","post","_id","mapStateToProps","state","app","sellerProfile","mapDispatchToProps","create"],"mappings":"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","sourcesContent":["import { Col, Form, Icon, message, Row } from 'antd';\nimport _ from 'lodash';\nimport React, { useEffect, useState } from 'react';\nimport { connect } from 'react-redux';\nimport client from '../../feathers';\nimport UserPosts from './UserPosts';\nimport { arrayLengthCount, notEmptyLength } from '../../common-function';\nimport WindowScrollLoadWrapper from '../general/WindowScrollLoadWrapper';\nimport { loading } from '../../redux/actions/app-actions';\nimport { setUser } from '../../redux/actions/user-actions';\nimport { updateSellerProfile } from '../../redux/actions/sellerProfile-actions';\nimport { withRouter } from 'next/router';\nimport InfiniteScrollWrapper from '../general/InfiniteScrollWrapper';\n\n\n\nvar moment = require('moment');\n\nconst POSTSIZE = 11;\nconst UserSavedCarFreakPosts = (props) => {\n\n    const [profile, setProfile] = useState({})\n    const [postLikes, setPostLikes] = useState([]);\n    const [posts, setPosts] = useState([]);\n    const [postTotal, setPostTotal] = useState(0);\n    const [postPage, setPostPage] = useState(1);\n    const [postLoading, setPostLoading] = useState(false);\n\n\n    useEffect(() => {\n        getUserChatLikes(_.map(posts, '_id'))\n    }, [props.user.authenticated])\n\n\n    useEffect(() => {\n        if (_.isPlainObject(props.data) && !_.isEmpty(props.data)) {\n            setProfile(props.data);\n        } else {\n            setProfile({});\n        }\n    }, [props.data])\n\n\n    useEffect(() => {\n        if (_.get(profile, ['_id'])) {\n            if (postPage == 1) {\n                getPosts(0)\n            } else {\n                setPostPage(1);\n            }\n        } else {\n            setPosts([])\n            setPostTotal(0);\n            setPostPage(1);\n        }\n    }, [profile])\n\n    useEffect(() => {\n        getPosts((postPage - 1) * POSTSIZE);\n    }, [postPage])\n\n    function getPosts(skip) {\n        if (_.get(profile, ['_id'])) {\n            if (_.isNumber(skip)) {\n                skip = parseInt(skip)\n            } else {\n                skip = 0;\n            }\n            setPostLoading(true);\n            client.service('savedpost').find({\n                query: {\n                    userId: _.get(profile, ['_id']),\n                    chatType: 'carfreaks',\n                    $sort: {\n                        createdAt: -1,\n                    },\n                    $limit: POSTSIZE,\n                    $populate: [\n                        {\n                            path: 'chatId',\n                            ref: 'chats',\n                            populate: [\n                                {\n                                    path: 'userId',\n                                    ref: 'users'\n                                },\n                            ]\n                        },\n                    ],\n                    $skip: skip,\n                }\n            }).then(res => {\n                setPostLoading(false);\n                if (notEmptyLength(res.data)) {\n                    setPosts(postPage == 1 ? _.map(res.data, 'chatId') : posts.concat(_.map(res.data, 'chatId')));\n                    getUserChatLikes(_.map(res.data, 'chatId._id'), true)\n                }\n                setPostTotal(res.total)\n            }).catch(err => {\n                setPostLoading(false);\n                message.error(err.message)\n            });\n        }\n    }\n\n    function getUserChatLikes(ids, concat) {\n\n        if (_.isArray(ids) && !_.isEmpty(ids) && _.get(props.user, ['authenticated']) && _.get(props.user, ['info', 'user', '_id'])) {\n            client.service('chatlikes')\n                .find({\n                    query: {\n                        chatId: {\n                            $in: ids || [],\n                        },\n                        userId: _.get(props.user, ['info', 'user', '_id'])\n                    }\n                })\n                .then((res) => {\n                    setPostLikes(concat ? _.concat(postLikes, res.data) : res.data)\n                })\n        }\n    }\n\n    return (\n        <Row className='margin-top-md'>\n            <Col xs={24} sm={24} md={24} lg={24} xl={24}>\n                <InfiniteScrollWrapper\n                    onScrolledBottom={() => {\n                        if (arrayLengthCount(posts) < postTotal && !postLoading) {\n                            setPostPage(postPage + 1);\n                        }\n                    }}\n                    hasMore={!postLoading && arrayLengthCount(posts) < postTotal }\n                >\n                    <UserPosts\n                        posts={posts}\n                        showAddPostCard={false}\n                        postLikes={postLikes}\n                        onUpdatePost={(data) => {\n                            if (_.isPlainObject(data) && !_.isEmpty(data)) {\n                                let newPosts = _.map(posts, function (post) {\n                                    return post._id == data._id ? data : post;\n                                })\n                                setPosts(newPosts);\n                            }\n                        }}\n                        onUpdatePostLikes={(data) => {\n                            if (_.isArray(data) && !_.isEmpty(data)) {\n                                setPostLikes(data);\n                            }\n                        }}\n                    />\n                </InfiniteScrollWrapper>\n            </Col>\n        </Row>\n    );\n}\n\n\nconst mapStateToProps = state => ({\n    app: state.app,\n    user: state.user,\n    sellerProfile: state.sellerProfile,\n});\n\nconst mapDispatchToProps = {\n    loading: loading,\n    setUser: setUser,\n    updateSellerProfile: updateSellerProfile,\n};\nexport default connect(mapStateToProps, mapDispatchToProps)(Form.create()(withRouter(UserSavedCarFreakPosts)));"]},"metadata":{},"sourceType":"module"}