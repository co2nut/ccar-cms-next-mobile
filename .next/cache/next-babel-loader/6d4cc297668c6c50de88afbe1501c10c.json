{"ast":null,"code":"var __jsx = React.createElement;\n\nfunction ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); if (enumerableOnly) { symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; }); } keys.push.apply(keys, symbols); } return keys; }\n\nfunction _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; if (i % 2) { ownKeys(Object(source), true).forEach(function (key) { _defineProperty(target, key, source[key]); }); } else if (Object.getOwnPropertyDescriptors) { Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)); } else { ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } } return target; }\n\nfunction _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }\n\nimport { Button, Form, Input, message, Modal } from 'antd';\nimport _ from 'lodash';\nimport React, { useEffect, useState } from 'react';\nimport { connect } from 'react-redux';\nimport { withRouter } from 'next/router';\nimport { loading, loginMode } from '../../redux/actions/app-actions';\nimport client from '../../feathers';\n\nconst ReportButton = props => {\n  const {\n    form\n  } = props;\n  const {\n    getFieldDecorator\n  } = form;\n  const {\n    0: report,\n    1: setReport\n  } = useState([]);\n  const {\n    0: visible,\n    1: setVisible\n  } = useState(false);\n  const {\n    0: isReported,\n    1: setIsReported\n  } = useState(false);\n  const {\n    0: type,\n    1: setType\n  } = useState();\n  useEffect(() => {\n    getReport();\n  }, [props.reporterId, type, props[type + 'Id']]);\n  useEffect(() => {\n    if (props.type) {\n      setType(props.type);\n    } else {\n      setType('');\n    }\n  }, [props.type]);\n  useEffect(() => {\n    setIsReported(_.isPlainObject(report) && !_.isEmpty(report));\n  }, [report]);\n\n  function getReport() {\n    if (props.reporterId && props[type + 'Id'] && type) {\n      let query = {\n        $limit: 1\n      };\n      query[type + 'Id'] = props[type + 'Id'];\n      query.type = type;\n      query.reporterId = props.reporterId;\n      client.service('report').find({\n        query: query\n      }).then(res => {\n        setReport(_.isArray(res.data) && !_.isEmpty(res.data) ? res.data[0] : {});\n        setIsReported(_.isArray(res.data) && !_.isEmpty(res.data) ? _.isPlainObject(res.data[0]) && !_.isEmpty(res.data[0]) : false);\n      }).catch(err => {\n        message.error(err.message);\n      });\n    }\n  }\n\n  function handleSuccess(success) {\n    setVisible(false);\n\n    if (props.handleSuccess) {\n      props.handleSuccess(success);\n    }\n  }\n\n  function handleError(error) {\n    setVisible(false);\n\n    if (props.handleError) {\n      props.handleError(error);\n    }\n  }\n\n  function handleSubmit() {\n    if (!_.get(props.user, ['authenticated']) || !_.get(props.user, ['info', 'user', '_id'])) {\n      message.error('Please Login First!');\n      props.loginMode(true);\n      return;\n    }\n\n    switch (type) {\n      case 'chat':\n        break;\n\n      case 'user':\n        break;\n\n      case 'message':\n        break;\n\n      default:\n        message.error('Invalid type');\n        return;\n        break;\n    }\n\n    if (!props[type + 'Id']) {\n      message.error('Content Not Found');\n      return;\n    }\n\n    if (!props.reporterId) {\n      message.error('Reporter Not Found');\n      return;\n    }\n\n    form.validateFields((err, values) => {\n      if (!err) {\n        let promises = [];\n        promises.push(client.authenticate());\n\n        if (!isReported) {\n          let data = {};\n          data.type = type;\n          data.reporterId = props.reporterId;\n          data[type + 'Id'] = props[type + 'Id']; //For Activity Logs;\n\n          data.actionType = 'createReport';\n          promises.push(client.service('report').create(_objectSpread(_objectSpread({}, data), values)));\n        } else {\n          promises.push(client.service('report').remove(report._id));\n        }\n\n        props.loading(true); //Write in report model\n\n        Promise.all(promises).then(([auth, res]) => {\n          props.loading(false);\n          handleSuccess({\n            type: isReported ? 'cancel' : 'reported',\n            data: res\n          });\n          setReport(isReported ? {} : res);\n          setVisible(false);\n        }).catch(error => {\n          props.loading(false);\n          setVisible(false);\n          handleError({\n            message: \"Report Failed\"\n          });\n        });\n      }\n    });\n  }\n\n  ;\n  return __jsx(\"span\", {\n    className: props.className ? props.className : null,\n    style: props.style ? props.style : null\n  }, __jsx(Modal, {\n    visible: visible,\n    title: \"Report Form\",\n    maskClosable: true,\n    centered: true,\n    onOk: e => {\n      handleSubmit();\n    },\n    okText: \"Submit\",\n    onCancel: e => {\n      setVisible(false);\n    }\n  }, __jsx(Form, {\n    layout: \"vertical\"\n  }, __jsx(Form.Item, null, getFieldDecorator('title', {\n    rules: [{\n      required: true,\n      message: 'Please input title.'\n    }]\n  })(__jsx(Input, {\n    placeholder: \"Title(max 200)\",\n    maxLength: 200\n  }))), __jsx(Form.Item, null, getFieldDecorator('description', {\n    rules: [{\n      required: true,\n      message: 'Please input description.'\n    }]\n  })(__jsx(Input.TextArea, {\n    autoSize: {\n      minRows: 6,\n      maxRows: 6\n    },\n    showCount: true,\n    placeholder: \"Description(max 900)\",\n    maxLength: 900\n  }))))), __jsx(\"span\", {\n    onClick: () => {\n      setVisible(true);\n    }\n  }, isReported ? props.cancelButton ? props.cancelButton() : __jsx(Button, {\n    type: \"danger\",\n    icon: \"flag\"\n  }, \"Report\") : props.reportButton ? props.reportButton() : __jsx(Button, {\n    type: \"danger\",\n    icon: \"flag\",\n    disabled: true\n  }, \"Reported\")));\n};\n\nconst mapStateToProps = state => ({\n  app: state.app,\n  user: state.user\n});\n\nconst mapDispatchToProps = {\n  loginMode: loginMode,\n  loading: loading\n};\nexport default connect(mapStateToProps, mapDispatchToProps)(Form.create()(withRouter(ReportButton)));","map":{"version":3,"sources":["/Users/faraheen/ccar-cms-next-mobile/components/general/ReportButton.jsx"],"names":["Button","Form","Input","message","Modal","_","React","useEffect","useState","connect","withRouter","loading","loginMode","client","ReportButton","props","form","getFieldDecorator","report","setReport","visible","setVisible","isReported","setIsReported","type","setType","getReport","reporterId","isPlainObject","isEmpty","query","$limit","service","find","then","res","isArray","data","catch","err","error","handleSuccess","success","handleError","handleSubmit","get","user","validateFields","values","promises","push","authenticate","actionType","create","remove","_id","Promise","all","auth","className","style","e","rules","required","minRows","maxRows","cancelButton","reportButton","mapStateToProps","state","app","mapDispatchToProps"],"mappings":"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","sourcesContent":["import { Button, Form, Input, message, Modal } from 'antd';\nimport _ from 'lodash';\nimport React, { useEffect, useState } from 'react';\nimport { connect } from 'react-redux';\nimport { withRouter } from 'next/router';\nimport { loading, loginMode } from '../../redux/actions/app-actions';\nimport client from '../../feathers';\n\n\nconst ReportButton = (props) => {\n\n\n    const { form } = props;\n    const { getFieldDecorator } = form;\n    const [report, setReport] = useState([]);\n    const [visible, setVisible] = useState(false);\n    const [isReported, setIsReported] = useState(false);\n    const [type, setType] = useState();\n\n    useEffect(() => {\n        getReport();\n    }, [props.reporterId, type, props[type + 'Id']])\n\n    useEffect(() => {\n        if (props.type) {\n            setType(props.type);\n        } else {\n            setType('');\n        }\n    }, [props.type])\n\n    useEffect(() => {\n        setIsReported(_.isPlainObject(report) && !_.isEmpty(report))\n    }, [report])\n\n    function getReport() {\n        if (props.reporterId && props[type + 'Id'] && type) {\n            let query = {\n                $limit: 1,\n            };\n            query[type + 'Id'] = props[type + 'Id'];\n            query.type = type;\n            query.reporterId = props.reporterId\n\n            client.service('report').find({\n                query: query\n            }).then(res => {\n                setReport(_.isArray(res.data) && !_.isEmpty(res.data) ? res.data[0] : {});\n                setIsReported(_.isArray(res.data) && !_.isEmpty(res.data) ? _.isPlainObject(res.data[0]) && !_.isEmpty(res.data[0]) : false);\n            }).catch(err => {\n                message.error(err.message)\n            });\n        }\n    }\n\n    function handleSuccess(success) {\n        setVisible(false);\n        if (props.handleSuccess) {\n            props.handleSuccess(success);\n        }\n    }\n\n\n    function handleError(error) {\n        setVisible(false);\n        if (props.handleError) {\n            props.handleError(error);\n        }\n    }\n\n    function handleSubmit() {\n\n        if (!_.get(props.user, ['authenticated']) || !_.get(props.user, ['info', 'user', '_id'])) {\n            message.error('Please Login First!');\n            props.loginMode(true);\n            return;\n        }\n\n        switch (type) {\n            case 'chat':\n                break;\n            case 'user':\n                break;\n            case 'message':\n                break;\n            default:\n                message.error('Invalid type');\n                return;\n                break;\n        }\n\n\n        if (!props[type + 'Id']) {\n            message.error('Content Not Found');\n            return;\n        }\n\n        if (!props.reporterId) {\n            message.error('Reporter Not Found');\n            return;\n        }\n\n\n        form.validateFields((err, values) => {\n\n            if (!err) {\n                let promises = [];\n                promises.push(client.authenticate());\n                if (!isReported) {\n                    let data = {}\n                    data.type = type;\n                    data.reporterId = props.reporterId;\n                    data[type + 'Id'] = props[type + 'Id'];\n\n                    //For Activity Logs;\n                    data.actionType = 'createReport';\n                    promises.push(client.service('report').create({ ...data, ...values }))\n                } else {\n                    promises.push(client.service('report').remove(report._id))\n                }\n\n                props.loading(true);\n                //Write in report model\n                Promise.all(promises).then(([auth, res]) => {\n                    props.loading(false);\n                    handleSuccess({\n                        type: isReported ? 'cancel' : 'reported',\n                        data: res\n                    });\n                    setReport(isReported ? {} : res);\n                    setVisible(false);\n\n                }).catch(error => {\n                    props.loading(false);\n                    setVisible(false);\n                    handleError({ message: \"Report Failed\" })\n                })\n            }\n        });\n\n\n    };\n\n\n\n    return (\n\n        <span className={props.className ? props.className : null} style={props.style ? props.style : null}>\n            <Modal\n                visible={visible}\n                title=\"Report Form\"\n                maskClosable={true}\n                centered={true}\n                onOk={(e) => { handleSubmit(); }}\n                okText=\"Submit\"\n                onCancel={(e) => { setVisible(false) }}\n            >\n\n                <Form layout=\"vertical\">\n                    <Form.Item>\n                        {getFieldDecorator('title', {\n                            rules: [{ required: true, message: 'Please input title.' }],\n                        })(\n                            <Input placeholder=\"Title(max 200)\" maxLength={200}\n                            />\n                        )}\n                    </Form.Item>\n                    <Form.Item>\n                        {getFieldDecorator('description', {\n                            rules: [{ required: true, message: 'Please input description.' }],\n                        })(\n                            <Input.TextArea autoSize={{ minRows: 6, maxRows: 6 }} showCount placeholder=\"Description(max 900)\" maxLength={900}\n                            />\n                        )}\n                    </Form.Item>\n                </Form>\n            </Modal>\n\n            <span onClick={() => { setVisible(true) }}>\n                {\n                    isReported ?\n                        props.cancelButton ?\n                            props.cancelButton()\n                            :\n                            <Button type=\"danger\" icon=\"flag\">\n                                Report\n                            </Button>\n                        :\n                        props.reportButton ?\n                            props.reportButton()\n                            :\n                            <Button type=\"danger\" icon=\"flag\" disabled>\n                                Reported\n                            </Button>\n                }\n            </span>\n\n        </span>\n    );\n}\n\n\nconst mapStateToProps = state => ({\n    app: state.app,\n    user: state.user,\n});\n\nconst mapDispatchToProps = {\n    loginMode: loginMode,\n    loading: loading,\n};\nexport default connect(mapStateToProps, mapDispatchToProps)(Form.create()(withRouter(ReportButton)));"]},"metadata":{},"sourceType":"module"}