{"ast":null,"code":"var __jsx = React.createElement;\n\nfunction ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); if (enumerableOnly) { symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; }); } keys.push.apply(keys, symbols); } return keys; }\n\nfunction _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; if (i % 2) { ownKeys(Object(source), true).forEach(function (key) { _defineProperty(target, key, source[key]); }); } else if (Object.getOwnPropertyDescriptors) { Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)); } else { ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } } return target; }\n\nfunction _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }\n\nimport { Button, Col, Empty, message, Row } from 'antd';\nimport _ from 'lodash';\nimport TweenOne from 'rc-tween-one';\nimport BezierPlugin from 'rc-tween-one/lib/plugin/BezierPlugin';\nimport React from 'react';\nimport { connect } from 'react-redux';\nimport io from 'socket.io-client';\nimport { v4 } from 'uuid';\nimport { isValidNumber, notEmptyLength, objectRemoveEmptyValue } from '../../common-function';\nimport client from '../../feathers';\nimport { updateActiveMenu } from '../../redux/actions/app-actions';\nimport { clearClientSocketIo, fetchClientSocketIo } from '../../redux/actions/live-action';\nimport { updateSocketInfo } from '../../redux/actions/socketRefresh-actions';\nimport LayoutV2 from '../general/LayoutV2';\nimport SocialVideoTabs from '../news/social-video-tabs';\nimport BroadcasterList from './broadcaster-list';\nimport { getStreamUrl } from './config';\nimport LiveBoxPreview1 from './live-box-preview-1';\nimport { withRouter } from 'next/router';\nimport Link from 'next/link';\nimport { isIOS, isMobile } from 'react-device-detect';\nimport BroadCasterListScroll from './BroadCasterListScroll';\nTweenOne.plugins.push(BezierPlugin);\nconst banner = 'hands-on-wheel.jpg';\nconst ads = '20-Car-Dealership-Promotion-Ideas.jpg';\nconst TOP_LIVE_LIMIT = 2;\nconst RECORDED_LIVE_LIMIT = 6;\nconst pc_config = {\n  iceServers: [{\n    urls: [\"stun:ss-turn2.xirsys.com\"]\n  }, {\n    username: \"K7RYJQ0iO86IzU-paa6guXxfLJ7vXWhFwfWzE3X88-LOsT0QN4vquwAUx1vsJJmqAAAAAF-yezBjY2FyMzEzMQ==\",\n    credential: \"a5e31b16-280d-11eb-89e3-0242ac140004\",\n    urls: [\"turn:ss-turn2.xirsys.com:80?transport=udp\", \"turn:ss-turn2.xirsys.com:3478?transport=udp\", \"turn:ss-turn2.xirsys.com:80?transport=tcp\", \"turn:ss-turn2.xirsys.com:3478?transport=tcp\", \"turns:ss-turn2.xirsys.com:443?transport=tcp\", \"turns:ss-turn2.xirsys.com:5349?transport=tcp\"]\n  }]\n};\n\nclass LiveIndex extends React.Component {\n  constructor(props) {\n    super(props);\n\n    _defineProperty(this, \"componentDidMount\", () => {\n      this.props.updateSocketInfo(false); // this.getRecordedLives();\n\n      const isLoggedIn = _.isEmpty(this.props.user.info.user); // \"https://upload.wikimedia.org/wikipedia/commons/f/f8/Odin%2C_der_G%C3%B6ttervater.jpg\"\n\n\n      this.activeSocket = io( // client.io.io.uri,\n      getStreamUrl(client.io.io.uri), {\n        query: {\n          // 'customerName': this.props.displayName,\n          // customerDbId: this.props.userId,\n          // customerAvatar: this.props.userAvatar\n          'customerName': this.props.user.authenticated ? `${this.props.user.info.user.firstName} ${this.props.user.info.user.lastName}` : 'Ccar User',\n          customerDbId: this.props.user.authenticated ? this.props.user.info.user._id : v4(),\n          customerAvatar: this.props.user.authenticated ? _.get(this.props.user, ['info', 'user', 'avatar']) || \"https://is4-ssl.mzstatic.com/image/thumb/Purple124/v4/fe/6f/1a/fe6f1a3a-9d14-cfdf-499c-222b7b842fb2/source/512x512bb.jpg\" : \"https://is4-ssl.mzstatic.com/image/thumb/Purple124/v4/fe/6f/1a/fe6f1a3a-9d14-cfdf-499c-222b7b842fb2/source/512x512bb.jpg\"\n        }\n      });\n      this.newSocketConfig(this.activeSocket); //this o\n      // this.socketConfig();\n\n      window.addEventListener('beforeunload', this.componentCleanup);\n    });\n\n    _defineProperty(this, \"newSocketConfig\", socket => {\n      socket.on(\"pushAllBroadcaster\", broadcasters => {\n        let broadcastersArr = Object.entries(broadcasters);\n\n        if (notEmptyLength(broadcastersArr)) {\n          //Restruct data\n          broadcastersArr = _.map(broadcastersArr, function (broadcaster) {\n            broadcaster[1].name = broadcaster[1].dealerName;\n            broadcaster[1].avatar = broadcaster[1].dealerAvatar;\n            broadcaster[1].dealerSocketId = broadcaster[0];\n            broadcaster[1].dealerVideoThumbnailUrl = `${getStreamUrl(client.io.io.uri)}/dealerVideoThumbnails/${broadcaster[0]}.png`;\n            return broadcaster[1];\n          });\n        } else {\n          broadcastersArr = [];\n        }\n\n        this.setState(() => {\n          return {\n            broadcasters: broadcastersArr,\n            // broadcasters: _.slice(broadcastersArr, 0, TOP_LIVE_LIMIT),\n            filteredBroadcasters: broadcastersArr // activeBroadcasterId: broadcastersArr[0][0],\n\n          };\n        });\n      });\n    });\n\n    _defineProperty(this, \"syncPeerConnections\", () => {\n      let self = this;\n\n      try {\n        let peerConnections = Object.entries(this.state.peerConnections); //Broadcasters\n\n        let newIds = _.compact(_.map(_.cloneDeep(this.state.broadcasters), function (broadcaster) {\n          return broadcaster.dealerSocketId;\n        })); // if (notEmptyLength(this.state.popularLives)) {\n        //     let popularLiveIds = _.compact(_.map(_.cloneDeep(this.state.popularLives), function (popularLive) {\n        //         if (popularLive.liveType == 'current') {\n        //             return popularLive.dealerSocketId;\n        //         } else {\n        //             return null;\n        //         }\n        //     }));\n        //     newIds = _.union(newIds, popularLiveIds);\n        // }\n\n\n        let peerConnectionToAddIds = _.compact(_.map(newIds, function (id) {\n          return !_.some(peerConnections, function (peerConnection) {\n            return peerConnection[0] == id;\n          }) ? id : null;\n        }));\n\n        let peerConnectionToRemoveIds = _.compact(_.map(peerConnections, function (peerConnection) {\n          return !_.some(newIds, function (id) {\n            return peerConnection[0] == id;\n          }) ? peerConnection[0] : null;\n        }));\n\n        _.forEach(peerConnectionToAddIds, function (id) {\n          if (!self.state.peerConnections[id] || !self.state.peerConnections[id].pc) {\n            self.createOffer(id);\n          }\n        });\n\n        _.forEach(peerConnectionToRemoveIds, function (id) {\n          if (self.state.peerConnections[id] || self.state.peerConnections[id].pc) {\n            self.closeThePeerConnection(id);\n          }\n        }); //Find removed peerConnections\n\n      } catch (error) {\n        console.log(error);\n      }\n    });\n\n    _defineProperty(this, \"sendToPeer\", (messageType, payload) => {\n      this.activeSocket.emit(messageType, {\n        senderId: this.activeSocket.id,\n        payload\n      });\n    });\n\n    _defineProperty(this, \"closeThePeerConnection\", previousDealerSocketId => {\n      let peerConnections = _.cloneDeep(this.state.peerConnections);\n\n      if (!!peerConnections[previousDealerSocketId]) {\n        if (!!peerConnections[previousDealerSocketId].pc) {\n          peerConnections[previousDealerSocketId].pc.close();\n          this.activeSocket.emit('closeClientSocket', previousDealerSocketId);\n          delete peerConnections[previousDealerSocketId];\n          this.setState({\n            peerConnections: peerConnections\n          });\n        }\n      }\n    });\n\n    _defineProperty(this, \"setBroadcasterAnswer\", data => {\n      if (!data || !data.sdp || !data.dealerSocketId) {\n        return null;\n      } else {\n        let peerConnections = this.state.peerConnections;\n\n        if (!!peerConnections[data.dealerSocketId]) {\n          if (!!peerConnections[data.dealerSocketId].pc) {\n            peerConnections[data.dealerSocketId].pc.setRemoteDescription(new RTCSessionDescription(data.sdp));\n          }\n        }\n\n        this.setState({\n          peerConnections: peerConnections\n        });\n      }\n    });\n\n    _defineProperty(this, \"setBroadcasterIceCandidate\", data => {\n      if (!data || !data.candidate || !data.dealerSocketId) {\n        return null;\n      } else {\n        let peerConnections = this.state.peerConnections;\n\n        if (!!peerConnections[data.dealerSocketId]) {\n          if (!!peerConnections[data.dealerSocketId].pc) {\n            peerConnections[data.dealerSocketId].pc.addIceCandidate(new RTCIceCandidate(data.candidate));\n          }\n        }\n\n        this.setState({\n          peerConnections: peerConnections\n        });\n      }\n    });\n\n    _defineProperty(this, \"setBroadcasterStream\", (dealerSocketId, stream) => {\n      try {\n        let peerConnections = this.state.peerConnections;\n        let self = this;\n\n        if (!!peerConnections[dealerSocketId] && _.get(peerConnections, [dealerSocketId, 'videoRef', 'current']) && stream) {\n          peerConnections[dealerSocketId].videoRef.current.srcObject = stream;\n          peerConnections[dealerSocketId].stream = stream;\n          this.setState({\n            peerConnections: peerConnections\n          });\n        }\n      } catch (error) {\n        console.log(error);\n      }\n    });\n\n    _defineProperty(this, \"createOffer\", dealerSocketId => {\n      if (!!dealerSocketId) {\n        let self = this;\n        let peerConnections = this.state.peerConnections;\n        peerConnections[dealerSocketId] = {\n          pc: new RTCPeerConnection(pc_config),\n          videoRef: React.createRef(),\n          stream: null\n        };\n\n        peerConnections[dealerSocketId].pc.ontrack = event => {\n          self.setBroadcasterStream(dealerSocketId, event.streams[0]);\n        };\n\n        peerConnections[dealerSocketId].pc.createOffer({\n          offerToReceiveVideo: 1,\n          //for audio\n          offerToReceiveAudio: 1\n        }).then(sdp => {\n          peerConnections[dealerSocketId].pc.setLocalDescription(sdp);\n          self.setState({\n            peerConnections: peerConnections\n          }, () => {\n            self.sendToPeer('clientRequestVideoWithDealerSocketId', {\n              sdp,\n              dealerSocketId: dealerSocketId\n            });\n          });\n        }).catch(x => {\n          console.log('offer failed');\n        });\n      }\n    });\n\n    _defineProperty(this, \"getRecordedLives\", skip => {\n      if (!isValidNumber(skip)) {\n        skip = 0;\n      } else {\n        skip = parseInt(skip);\n      }\n\n      this.setState({\n        isLoading: true\n      });\n      client.service('live-stream-messages').find({\n        query: {\n          $limit: RECORDED_LIVE_LIMIT,\n          $sort: {\n            createdAt: -1\n          },\n          $skip: skip,\n          $populate: 'dealerDbId'\n        }\n      }).then(res => {\n        this.setState({\n          isLoading: false\n        });\n\n        if (notEmptyLength(res.data)) {\n          this.setState({\n            recordedLives: this.state.recordedLives.concat(res.data),\n            recordedLiveTotal: res.total\n          });\n        } else {\n          this.setState({\n            recordedLives: this.state.recordedLives.concat([]),\n            recordedLiveTotal: res.total\n          });\n        }\n      }).catch(err => {\n        this.setState({\n          isLoading: false\n        });\n        message.error(err.message);\n      });\n    });\n\n    _defineProperty(this, \"_renderTopLives\", () => {\n      let self = this;\n\n      if (notEmptyLength(this.state.broadcasters)) {\n        return this.state.broadcasters.map(function (broadcaster) {\n          return __jsx(React.Fragment, null, __jsx(Col, {\n            xs: 24,\n            sm: 24,\n            md: 12,\n            lg: 8,\n            xl: 8\n          }, __jsx(Link, {\n            shallow: false,\n            href: `/live/${broadcaster.dealerSocketId}`\n          }, __jsx(\"a\", null, __jsx(LiveBoxPreview1, {\n            data: broadcaster,\n            key: `live-box-${broadcaster.dealerSocketId}`,\n            className: \"cursor-pointer\",\n            videoRef: _.get(self, ['state', 'peerConnections', _.get(broadcaster, ['dealerSocketId']), 'videoRef']),\n            dealerSocketId: broadcaster.dealerSocketId,\n            sharedSocket: self.activeSocket\n          })))));\n        });\n      } else {\n        return __jsx(Col, {\n          xs: 24,\n          sm: 24,\n          md: 24,\n          lg: 24,\n          xl: 24,\n          className: \"background-white\"\n        }, __jsx(Empty, null));\n      }\n    });\n\n    this.state = {\n      peerConnections: {},\n      videoRef: {},\n      broadcasters: [],\n      filteredBroadcasters: [],\n      connectedUsers: 0,\n      searchWord: '',\n      popularLives: [],\n      recordedLives: [],\n      recordedLivePage: 1,\n      recordedLiveTotal: 0,\n      isLoading: false\n    };\n    this.componentCleanup = this.componentCleanup.bind(this);\n  }\n\n  UNSAFE_componentWillMount() {\n    this.props.updateActiveMenu('4');\n  }\n\n  componentDidUpdate(prevProps, prevState) {\n    // if (!_.isEqual(prevState.broadcasters, this.state.broadcasters)) {\n    //   // this.socketConfig();\n    //   if (!!this.timeoutFunction) {\n    //     clearTimeout(this.timeoutFunction);\n    //   }\n    //   this.timeoutFunction = setTimeout(() => {\n    //     // this.syncPeerConnections();\n    //   }, 1000);\n    // }\n    // if (!_.isEqual(prevState.peerConnections, this.state.peerConnections)) {\n    //   console.log('peerConnections');\n    //   console.log(this.state.peerConnections);\n    // }\n    // if (prevState.recordedLivePage != this.state.recordedLivePage) {\n    //   this.getRecordedLives((this.state.recordedLivePage - 1) * RECORDED_LIVE_LIMIT)\n    // }\n    if (prevState.searchWord != this.state.searchWord) {\n      // let data = _.cloneDeep(this.state.broadcasters);\n      //no need to clone deep cuz filter returns a new obj\n      let data = this.state.broadcasters;\n      let self = this;\n\n      if (this.state.searchWord != null) {\n        data = _.filter(data, function (item) {\n          let regex = new RegExp(`^${self.state.searchWord}`, 'i');\n          return regex.test(item.name);\n        });\n      }\n\n      this.setState({\n        filteredBroadcasters: data\n      });\n    }\n  }\n\n  componentWillUnmount() {\n    if (isIOS && isMobile) {\n      setTimeout(function () {\n        window.location = `https://apps.apple.com/my/app/ccar-my/id1526288072`;\n      }, 25);\n      window.location = \"ccarmy:/\" + this.props.router.asPath;\n    }\n\n    this.componentCleanup();\n    window.removeEventListener('beforeunload', this.componentCleanup); // remove the event handler for normal unmounting\n  }\n\n  componentCleanup() {\n    // this will hold the cleanup code\n    // whatever you want to do when the component is unmounted or page refreshes\n    let self = this; // if (_.isPlainObject(this.state.peerConnections) && notEmptyLength(this.state.peerConnections)) {\n    //   let peerConnections = Object.entries(this.state.peerConnections)\n    //   _.forEach(peerConnections, function (pc) {\n    //     self.closeThePeerConnection(pc[0]);\n    //   })\n    //   if (!!this.activeSocket) {\n    //     this.activeSocket.close();\n    //   }\n    // }\n\n    self.activeSocket && self.activeSocket.close();\n  }\n\n  socketConfig() {\n    this.activeSocket.removeEventListener('sendAnswerToClient');\n    this.activeSocket.on('sendAnswerToClient', data => {\n      this.setBroadcasterAnswer(data);\n    });\n    this.activeSocket.removeEventListener('sendCandidateToClient');\n    this.activeSocket.on('sendCandidateToClient', data => {\n      this.setBroadcasterIceCandidate(data);\n    });\n    this.activeSocket.removeEventListener('pushAllBroadcaster');\n    this.activeSocket.on(\"pushAllBroadcaster\", broadcasters => {\n      let broadcastersArr = Object.entries(broadcasters);\n\n      if (notEmptyLength(broadcastersArr)) {\n        //Restruct data\n        broadcastersArr = _.map(broadcastersArr, function (broadcaster) {\n          broadcaster[1].name = broadcaster[1].dealerName;\n          broadcaster[1].avatar = broadcaster[1].dealerAvatar;\n          broadcaster[1].dealerSocketId = broadcaster[0];\n          broadcaster[1].dealerVideoThumbnailUrl = `${getStreamUrl(client.io.io.uri)}/dealerVideoThumbnails/${broadcaster[0]}.png`;\n          return broadcaster[1];\n        });\n      } else {\n        broadcastersArr = [];\n      }\n\n      if (!_.isEqual(this.state.broadcasters, broadcastersArr)) {\n        this.setState(() => {\n          return {\n            // broadcasters: _.slice(broadcastersArr, 0, TOP_LIVE_LIMIT),\n            broadcasters: broadcastersArr,\n            filteredBroadcasters: broadcastersArr // activeBroadcasterId: broadcastersArr[0][0],\n\n          };\n        });\n      }\n    });\n    this.activeSocket.removeEventListener('newMessage');\n    this.activeSocket.on(\"newMessage\", data => {\n      if (notEmptyLength(objectRemoveEmptyValue(data))) {\n        let temp = _.map(this.state.broadcasters, function (broadcaster) {\n          if (broadcaster.dealerSocketId == data.dealerSocketId) {\n            broadcaster.connectedUsers = data.connectedUsers;\n          }\n\n          return broadcaster;\n        });\n\n        this.setState({\n          broadcasters: temp\n        });\n      }\n    });\n    this.activeSocket.removeEventListener('getAllMessages');\n    this.activeSocket.on(\"getAllMessages\", data => {\n      let temp = _.map(this.state.broadcasters, function (broadcaster) {\n        if (broadcaster.dealerSocketId == data.dealerSocketId) {\n          broadcaster = _objectSpread(_objectSpread({}, broadcaster), data);\n        }\n\n        return broadcaster;\n      });\n\n      this.setState({\n        broadcasters: temp\n      });\n    });\n    this.activeSocket.removeEventListener('getSpecialLives'); // this.activeSocket.on(\"getSpecialLives\", (data) => {\n    //     if (data) {\n    //         this.setState({\n    //             popularLives: _.isArray(data.popularLives) && notEmptyLength(data.popularLives) ? data.popularLives : [],\n    //         })\n    //     }\n    // });\n  }\n\n  //@implementation new socket code\n  //@end new socket code\n  render() {\n    let self = this;\n    return __jsx(React.Fragment, null, __jsx(LayoutV2, null, __jsx(\"div\", {\n      className: \"section-version3\"\n    }, __jsx(\"div\", {\n      className: \"padding-x-sm padding-y-lg\"\n    }, __jsx(Row, {\n      gutter: [10, 30],\n      type: \"flex\",\n      align: \"stretch\"\n    }, __jsx(Col, {\n      style: {\n        padding: '0px'\n      },\n      xs: 24,\n      sm: 24,\n      md: 24,\n      lg: 24,\n      xl: 24\n    }, __jsx(\"div\", {\n      className: \"font-weight-bold padding-sm\"\n    }, \"Live Streamer\")), __jsx(Col, {\n      style: {\n        padding: '0px'\n      },\n      span: 4\n    }, __jsx(\"div\", {\n      className: \"width-100 background-white\"\n    }, __jsx(\"div\", {\n      className: \"width-100 \"\n    }, __jsx(BroadCasterListScroll, {\n      showName: false,\n      activeBroadcasters: notEmptyLength(this.state.filteredBroadcasters) ? this.state.filteredBroadcasters : [] // allowSearch\n\n    })))), __jsx(Col, {\n      xs: 20,\n      sm: 20,\n      md: 20,\n      lg: 20,\n      xl: 20\n    }, __jsx(Row, {\n      gutter: [10, 10]\n    }, _.isArray(this.state.broadcasters) && !_.isEmpty(this.state.broadcasters) ? this._renderTopLives() : __jsx(\"div\", {\n      className: \"flex-justify-center flex-items-align-center\"\n    }, __jsx(\"img\", {\n      style: {\n        width: '50%',\n        height: '50%'\n      },\n      src: \"/assets/live-stream.png\"\n    })))))))));\n  }\n\n}\n\nconst mapStateToProps = state => ({\n  app: state.app,\n  user: state.user\n});\n\nconst mapDispatchToProps = {\n  updateSocketInfo,\n  updateActiveMenu: updateActiveMenu,\n  fetchClientSocketIo: fetchClientSocketIo,\n  clearClientSocketIo: clearClientSocketIo\n};\nexport default connect(mapStateToProps, mapDispatchToProps)(withRouter(LiveIndex));","map":{"version":3,"sources":["/Users/faraheen/ccar-cms-next-mobile/components/live/LiveHomePage.jsx"],"names":["Button","Col","Empty","message","Row","_","TweenOne","BezierPlugin","React","connect","io","v4","isValidNumber","notEmptyLength","objectRemoveEmptyValue","client","updateActiveMenu","clearClientSocketIo","fetchClientSocketIo","updateSocketInfo","LayoutV2","SocialVideoTabs","BroadcasterList","getStreamUrl","LiveBoxPreview1","withRouter","Link","isIOS","isMobile","BroadCasterListScroll","plugins","push","banner","ads","TOP_LIVE_LIMIT","RECORDED_LIVE_LIMIT","pc_config","iceServers","urls","username","credential","LiveIndex","Component","constructor","props","isLoggedIn","isEmpty","user","info","activeSocket","uri","query","authenticated","firstName","lastName","customerDbId","_id","customerAvatar","get","newSocketConfig","window","addEventListener","componentCleanup","socket","on","broadcasters","broadcastersArr","Object","entries","map","broadcaster","name","dealerName","avatar","dealerAvatar","dealerSocketId","dealerVideoThumbnailUrl","setState","filteredBroadcasters","self","peerConnections","state","newIds","compact","cloneDeep","peerConnectionToAddIds","id","some","peerConnection","peerConnectionToRemoveIds","forEach","pc","createOffer","closeThePeerConnection","error","console","log","messageType","payload","emit","senderId","previousDealerSocketId","close","data","sdp","setRemoteDescription","RTCSessionDescription","candidate","addIceCandidate","RTCIceCandidate","stream","videoRef","current","srcObject","RTCPeerConnection","createRef","ontrack","event","setBroadcasterStream","streams","offerToReceiveVideo","offerToReceiveAudio","then","setLocalDescription","sendToPeer","catch","x","skip","parseInt","isLoading","service","find","$limit","$sort","createdAt","$skip","$populate","res","recordedLives","concat","recordedLiveTotal","total","err","connectedUsers","searchWord","popularLives","recordedLivePage","bind","UNSAFE_componentWillMount","componentDidUpdate","prevProps","prevState","filter","item","regex","RegExp","test","componentWillUnmount","setTimeout","location","router","asPath","removeEventListener","socketConfig","setBroadcasterAnswer","setBroadcasterIceCandidate","isEqual","temp","render","padding","isArray","_renderTopLives","width","height","mapStateToProps","app","mapDispatchToProps"],"mappings":"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","sourcesContent":["import { Button, Col, Empty, message, Row } from 'antd';\nimport _ from 'lodash';\nimport TweenOne from 'rc-tween-one';\nimport BezierPlugin from 'rc-tween-one/lib/plugin/BezierPlugin';\nimport React from 'react';\nimport { connect } from 'react-redux';\nimport io from 'socket.io-client';\nimport { v4 } from 'uuid';\nimport { isValidNumber, notEmptyLength, objectRemoveEmptyValue } from '../../common-function';\nimport client from '../../feathers';\nimport { updateActiveMenu } from '../../redux/actions/app-actions';\nimport { clearClientSocketIo, fetchClientSocketIo } from '../../redux/actions/live-action';\nimport { updateSocketInfo } from '../../redux/actions/socketRefresh-actions';\nimport LayoutV2 from '../general/LayoutV2';\nimport SocialVideoTabs from '../news/social-video-tabs';\nimport BroadcasterList from './broadcaster-list';\nimport { getStreamUrl } from './config';\nimport LiveBoxPreview1 from './live-box-preview-1';\nimport { withRouter } from 'next/router';\nimport Link from 'next/link';\nimport { isIOS, isMobile } from 'react-device-detect'\nimport BroadCasterListScroll from './BroadCasterListScroll';\n\nTweenOne.plugins.push(BezierPlugin);\n\n\nconst banner = 'hands-on-wheel.jpg'\nconst ads = '20-Car-Dealership-Promotion-Ideas.jpg'\nconst TOP_LIVE_LIMIT = 2;\nconst RECORDED_LIVE_LIMIT = 6;\nconst pc_config = {\n  iceServers: [{\n    urls: [\"stun:ss-turn2.xirsys.com\"]\n  }, {\n    username: \"K7RYJQ0iO86IzU-paa6guXxfLJ7vXWhFwfWzE3X88-LOsT0QN4vquwAUx1vsJJmqAAAAAF-yezBjY2FyMzEzMQ==\",\n    credential: \"a5e31b16-280d-11eb-89e3-0242ac140004\",\n    urls: [\n      \"turn:ss-turn2.xirsys.com:80?transport=udp\",\n      \"turn:ss-turn2.xirsys.com:3478?transport=udp\",\n      \"turn:ss-turn2.xirsys.com:80?transport=tcp\",\n      \"turn:ss-turn2.xirsys.com:3478?transport=tcp\",\n      \"turns:ss-turn2.xirsys.com:443?transport=tcp\",\n      \"turns:ss-turn2.xirsys.com:5349?transport=tcp\"\n    ]\n  }]\n}\n\n\n\nclass LiveIndex extends React.Component {\n\n  constructor(props) {\n    super(props);\n    this.state = {\n      peerConnections: {},\n      videoRef: {},\n      broadcasters: [],\n      filteredBroadcasters: [],\n      connectedUsers: 0,\n      searchWord: '',\n      popularLives: [],\n      recordedLives: [],\n      recordedLivePage: 1,\n      recordedLiveTotal: 0,\n      isLoading: false,\n    }\n\n    this.componentCleanup = this.componentCleanup.bind(this);\n  }\n\n  componentDidMount = () => {\n    this.props.updateSocketInfo(false);\n    // this.getRecordedLives();\n    const isLoggedIn = _.isEmpty(this.props.user.info.user);\n\n    // \"https://upload.wikimedia.org/wikipedia/commons/f/f8/Odin%2C_der_G%C3%B6ttervater.jpg\"\n    this.activeSocket = io(\n      // client.io.io.uri,\n      getStreamUrl(client.io.io.uri),\n      {\n        query: {\n          // 'customerName': this.props.displayName,\n          // customerDbId: this.props.userId,\n          // customerAvatar: this.props.userAvatar\n          'customerName': this.props.user.authenticated ? `${this.props.user.info.user.firstName} ${this.props.user.info.user.lastName}` : 'Ccar User',\n          customerDbId: this.props.user.authenticated ? this.props.user.info.user._id : v4(),\n          customerAvatar: this.props.user.authenticated ? _.get(this.props.user, ['info', 'user', 'avatar']) || \"https://is4-ssl.mzstatic.com/image/thumb/Purple124/v4/fe/6f/1a/fe6f1a3a-9d14-cfdf-499c-222b7b842fb2/source/512x512bb.jpg\" : \"https://is4-ssl.mzstatic.com/image/thumb/Purple124/v4/fe/6f/1a/fe6f1a3a-9d14-cfdf-499c-222b7b842fb2/source/512x512bb.jpg\"\n        }\n      }\n    );\n    this.newSocketConfig(this.activeSocket);\n    //this o\n    // this.socketConfig();\n    window.addEventListener('beforeunload', this.componentCleanup);\n  }\n\n  UNSAFE_componentWillMount() {\n    this.props.updateActiveMenu('4');\n  }\n\n  componentDidUpdate(prevProps, prevState) {\n\n\n    // if (!_.isEqual(prevState.broadcasters, this.state.broadcasters)) {\n\n    //   // this.socketConfig();\n    //   if (!!this.timeoutFunction) {\n    //     clearTimeout(this.timeoutFunction);\n    //   }\n    //   this.timeoutFunction = setTimeout(() => {\n    //     // this.syncPeerConnections();\n    //   }, 1000);\n\n    // }\n\n\n    // if (!_.isEqual(prevState.peerConnections, this.state.peerConnections)) {\n    //   console.log('peerConnections');\n    //   console.log(this.state.peerConnections);\n    // }\n\n    // if (prevState.recordedLivePage != this.state.recordedLivePage) {\n    //   this.getRecordedLives((this.state.recordedLivePage - 1) * RECORDED_LIVE_LIMIT)\n    // }\n\n    if (prevState.searchWord != this.state.searchWord) {\n      // let data = _.cloneDeep(this.state.broadcasters);\n      //no need to clone deep cuz filter returns a new obj\n      let data = this.state.broadcasters;\n      let self = this;\n      if (this.state.searchWord != null) {\n        data = _.filter(data, function (item) {\n          let regex = new RegExp(`^${self.state.searchWord}`, 'i');\n          return regex.test(item.name);\n        })\n      }\n\n      this.setState({\n        filteredBroadcasters: data,\n      })\n    }\n\n  }\n\n  componentWillUnmount() {\n\n    if (isIOS && isMobile) {\n      setTimeout(function () { window.location = `https://apps.apple.com/my/app/ccar-my/id1526288072`; }, 25);\n      window.location = \"ccarmy:/\" + this.props.router.asPath    }\n\n    this.componentCleanup();\n    window.removeEventListener('beforeunload', this.componentCleanup); // remove the event handler for normal unmounting\n  }\n\n\n  componentCleanup() {\n    // this will hold the cleanup code\n    // whatever you want to do when the component is unmounted or page refreshes\n\n    let self = this;\n    // if (_.isPlainObject(this.state.peerConnections) && notEmptyLength(this.state.peerConnections)) {\n    //   let peerConnections = Object.entries(this.state.peerConnections)\n    //   _.forEach(peerConnections, function (pc) {\n    //     self.closeThePeerConnection(pc[0]);\n    //   })\n    //   if (!!this.activeSocket) {\n    //     this.activeSocket.close();\n    //   }\n    // }\n    self.activeSocket && self.activeSocket.close();\n\n  }\n\n  newSocketConfig = (socket) => {\n    socket.on(\"pushAllBroadcaster\", (broadcasters) => {\n\n      let broadcastersArr = Object.entries(broadcasters);\n\n\n      if (notEmptyLength(broadcastersArr)) {\n        //Restruct data\n        broadcastersArr = _.map(broadcastersArr, function (broadcaster) {\n          broadcaster[1].name = broadcaster[1].dealerName;\n          broadcaster[1].avatar = broadcaster[1].dealerAvatar;\n          broadcaster[1].dealerSocketId = broadcaster[0];\n          broadcaster[1].dealerVideoThumbnailUrl = `${getStreamUrl(client.io.io.uri)}/dealerVideoThumbnails/${broadcaster[0]}.png`\n          return broadcaster[1];\n        })\n      } else {\n        broadcastersArr = [];\n      }\n\n      this.setState(() => {\n        return {\n          broadcasters: broadcastersArr,\n          // broadcasters: _.slice(broadcastersArr, 0, TOP_LIVE_LIMIT),\n          filteredBroadcasters: broadcastersArr,\n          // activeBroadcasterId: broadcastersArr[0][0],\n        }\n      })\n\n    })\n  }\n\n\n  socketConfig() {\n\n    this.activeSocket.removeEventListener('sendAnswerToClient')\n    this.activeSocket.on('sendAnswerToClient', (data) => {\n      this.setBroadcasterAnswer(data);\n    })\n\n\n    this.activeSocket.removeEventListener('sendCandidateToClient')\n    this.activeSocket.on('sendCandidateToClient', (data) => {\n      this.setBroadcasterIceCandidate(data);\n    })\n\n\n    this.activeSocket.removeEventListener('pushAllBroadcaster')\n    this.activeSocket.on(\"pushAllBroadcaster\", (broadcasters) => {\n\n      let broadcastersArr = Object.entries(broadcasters);\n\n\n      if (notEmptyLength(broadcastersArr)) {\n        //Restruct data\n        broadcastersArr = _.map(broadcastersArr, function (broadcaster) {\n          broadcaster[1].name = broadcaster[1].dealerName;\n          broadcaster[1].avatar = broadcaster[1].dealerAvatar;\n          broadcaster[1].dealerSocketId = broadcaster[0];\n          broadcaster[1].dealerVideoThumbnailUrl = `${getStreamUrl(client.io.io.uri)}/dealerVideoThumbnails/${broadcaster[0]}.png`\n          return broadcaster[1];\n        })\n      } else {\n        broadcastersArr = [];\n      }\n\n      if (!_.isEqual(this.state.broadcasters, broadcastersArr)) {\n        this.setState(() => {\n          return {\n            // broadcasters: _.slice(broadcastersArr, 0, TOP_LIVE_LIMIT),\n            broadcasters: broadcastersArr,\n            filteredBroadcasters: broadcastersArr,\n            // activeBroadcasterId: broadcastersArr[0][0],\n          }\n        })\n      }\n    })\n\n\n    this.activeSocket.removeEventListener('newMessage')\n    this.activeSocket.on(\"newMessage\", (data) => {\n\n      if (notEmptyLength(objectRemoveEmptyValue(data))) {\n        let temp = _.map(this.state.broadcasters, function (broadcaster) {\n          if (broadcaster.dealerSocketId == data.dealerSocketId) {\n            broadcaster.connectedUsers = data.connectedUsers;\n          }\n          return broadcaster;\n        })\n        this.setState({\n          broadcasters: temp,\n        })\n      }\n    })\n\n\n    this.activeSocket.removeEventListener('getAllMessages')\n    this.activeSocket.on(\"getAllMessages\", (data) => {\n      let temp = _.map(this.state.broadcasters, function (broadcaster) {\n        if (broadcaster.dealerSocketId == data.dealerSocketId) {\n          broadcaster = { ...broadcaster, ...data };\n        }\n        return broadcaster;\n      })\n      this.setState({\n        broadcasters: temp,\n      })\n    })\n\n\n    this.activeSocket.removeEventListener('getSpecialLives')\n    // this.activeSocket.on(\"getSpecialLives\", (data) => {\n    //     if (data) {\n    //         this.setState({\n    //             popularLives: _.isArray(data.popularLives) && notEmptyLength(data.popularLives) ? data.popularLives : [],\n    //         })\n    //     }\n    // });\n\n\n  }\n\n  syncPeerConnections = () => {\n    let self = this;\n    try {\n\n      let peerConnections = Object.entries(this.state.peerConnections);\n      //Broadcasters\n      let newIds = _.compact(_.map(_.cloneDeep(this.state.broadcasters), function (broadcaster) {\n        return broadcaster.dealerSocketId;\n      }));\n\n\n      // if (notEmptyLength(this.state.popularLives)) {\n      //     let popularLiveIds = _.compact(_.map(_.cloneDeep(this.state.popularLives), function (popularLive) {\n      //         if (popularLive.liveType == 'current') {\n      //             return popularLive.dealerSocketId;\n      //         } else {\n      //             return null;\n      //         }\n      //     }));\n\n      //     newIds = _.union(newIds, popularLiveIds);\n      // }\n\n\n      let peerConnectionToAddIds = _.compact(_.map(newIds, function (id) {\n        return !_.some(peerConnections, function (peerConnection) {\n          return peerConnection[0] == id;\n        }) ? id : null\n      }))\n\n      let peerConnectionToRemoveIds = _.compact(_.map(peerConnections, function (peerConnection) {\n        return !_.some(newIds, function (id) {\n          return peerConnection[0] == id;\n        }) ? peerConnection[0] : null\n      }))\n\n      _.forEach(peerConnectionToAddIds, function (id) {\n\n        if (!self.state.peerConnections[id] || !self.state.peerConnections[id].pc) {\n          self.createOffer(id);\n        }\n      })\n\n      _.forEach(peerConnectionToRemoveIds, function (id) {\n        if (self.state.peerConnections[id] || self.state.peerConnections[id].pc) {\n          self.closeThePeerConnection(id);\n        }\n      })\n\n\n      //Find removed peerConnections\n\n    } catch (error) {\n      console.log(error);\n    }\n  }\n\n  //cleared\n  sendToPeer = (messageType, payload) => {\n    this.activeSocket.emit(messageType, {\n      senderId: this.activeSocket.id,\n      payload\n    })\n  }\n\n  //cleared\n  closeThePeerConnection = (previousDealerSocketId) => {\n\n\n    let peerConnections = _.cloneDeep(this.state.peerConnections);\n    if (!!peerConnections[previousDealerSocketId]) {\n      if (!!peerConnections[previousDealerSocketId].pc) {\n        peerConnections[previousDealerSocketId].pc.close();\n        this.activeSocket.emit('closeClientSocket', previousDealerSocketId);\n        delete peerConnections[previousDealerSocketId];\n        this.setState({\n          peerConnections: peerConnections\n        })\n      }\n    }\n  }\n  //cleared\n  setBroadcasterAnswer = (data) => {\n    if (!data || !data.sdp || !data.dealerSocketId) {\n      return null;\n    } else {\n      let peerConnections = this.state.peerConnections;\n      if (!!peerConnections[data.dealerSocketId]) {\n        if (!!peerConnections[data.dealerSocketId].pc) {\n          peerConnections[data.dealerSocketId].pc.setRemoteDescription(new RTCSessionDescription(data.sdp));\n        }\n      }\n\n      this.setState({\n        peerConnections: peerConnections,\n      })\n\n    }\n  }\n  //cleared\n  setBroadcasterIceCandidate = (data) => {\n    if (!data || !data.candidate || !data.dealerSocketId) {\n      return null;\n    } else {\n      let peerConnections = this.state.peerConnections;\n      if (!!peerConnections[data.dealerSocketId]) {\n        if (!!peerConnections[data.dealerSocketId].pc) {\n          peerConnections[data.dealerSocketId].pc.addIceCandidate(new RTCIceCandidate(data.candidate))\n        }\n      }\n\n      this.setState({\n        peerConnections: peerConnections,\n      })\n\n    }\n  }\n\n  //cleared\n  setBroadcasterStream = (dealerSocketId, stream) => {\n    try {\n      let peerConnections = this.state.peerConnections;\n      let self = this;\n      if (!!peerConnections[dealerSocketId] && _.get(peerConnections, [dealerSocketId, 'videoRef', 'current']) && stream) {\n        peerConnections[dealerSocketId].videoRef.current.srcObject = stream;\n        peerConnections[dealerSocketId].stream = stream;\n        this.setState({\n          peerConnections: peerConnections,\n        })\n      }\n    } catch (error) {\n      console.log(error);\n    }\n  }\n\n  //cleared\n  createOffer = (dealerSocketId) => {\n    if (!!dealerSocketId) {\n\n      let self = this;\n\n      let peerConnections = this.state.peerConnections;\n      peerConnections[dealerSocketId] = {\n        pc: new RTCPeerConnection(pc_config),\n        videoRef: React.createRef(),\n        stream: null,\n      }\n\n      peerConnections[dealerSocketId].pc.ontrack = event => {\n        self.setBroadcasterStream(dealerSocketId, event.streams[0]);\n      };\n\n      peerConnections[dealerSocketId].pc.createOffer({\n        offerToReceiveVideo: 1,\n        //for audio\n        offerToReceiveAudio: 1\n      })\n        .then(sdp => {\n          peerConnections[dealerSocketId].pc.setLocalDescription(sdp);\n\n          self.setState({\n            peerConnections: peerConnections,\n          }, () => {\n            self.sendToPeer('clientRequestVideoWithDealerSocketId', { sdp, dealerSocketId: dealerSocketId })\n          })\n\n        }).catch(x => {\n\n          console.log('offer failed');\n        });\n\n    }\n  }\n\n  //cleared\n  getRecordedLives = (skip) => {\n    if (!isValidNumber(skip)) {\n      skip = 0;\n    } else {\n      skip = parseInt(skip);\n    }\n    this.setState({\n      isLoading: true,\n    })\n    client.service('live-stream-messages').find({\n      query: {\n        $limit: RECORDED_LIVE_LIMIT,\n        $sort: {\n          createdAt: -1,\n        },\n        $skip: skip,\n        $populate: 'dealerDbId'\n      }\n    }).then(res => {\n      this.setState({\n        isLoading: false,\n      })\n      if (notEmptyLength(res.data)) {\n        this.setState({\n          recordedLives: this.state.recordedLives.concat(res.data),\n          recordedLiveTotal: res.total,\n        })\n      } else {\n        this.setState({\n          recordedLives: this.state.recordedLives.concat([]),\n          recordedLiveTotal: res.total,\n        })\n      }\n    }).catch(err => {\n      this.setState({\n        isLoading: false,\n      })\n      message.error(err.message)\n    });\n  }\n\n\n  _renderTopLives = () => {\n    let self = this;\n\n    if (notEmptyLength(this.state.broadcasters)) {\n      return (\n        this.state.broadcasters.map(function (broadcaster) {\n          return (\n            <React.Fragment>\n              <Col xs={24} sm={24} md={12} lg={8} xl={8} >\n                <Link shallow={false} href={`/live/${broadcaster.dealerSocketId}`} >\n                  <a>\n                    <LiveBoxPreview1\n                      data={broadcaster}\n                      key={`live-box-${broadcaster.dealerSocketId}`}\n                      className='cursor-pointer'\n                      videoRef={_.get(self, ['state', 'peerConnections', _.get(broadcaster, ['dealerSocketId']), 'videoRef'])}\n\n                      dealerSocketId={broadcaster.dealerSocketId}\n                      sharedSocket={self.activeSocket}\n                    />\n                  </a>\n                </Link>\n              </Col>\n            </React.Fragment>\n          )\n        })\n      )\n    } else {\n      return <Col xs={24} sm={24} md={24} lg={24} xl={24} className='background-white'>\n        <Empty />\n      </Col>\n    }\n  }\n\n  //@implementation new socket code\n\n\n  //@end new socket code\n  render() {\n    let self = this;\n    return (\n      <React.Fragment>\n        <LayoutV2>\n          <div className='section-version3'>\n            <div className='padding-x-sm padding-y-lg'>\n              <Row gutter={[10, 30]} type=\"flex\" align=\"stretch\">\n                <Col style={{padding:'0px'}} xs={24} sm={24} md={24} lg={24} xl={24} >\n                  <div className=\"font-weight-bold padding-sm\">\n                    Live Streamer\n                  </div>\n                </Col>\n\n                <Col style={{padding:'0px'}} span={4}>\n                <div className=\"width-100 background-white\">\n                    <div className=\"width-100 \">\n                      <BroadCasterListScroll\n                        showName={false}\n                        activeBroadcasters={notEmptyLength(this.state.filteredBroadcasters) ? this.state.filteredBroadcasters : []}\n                        // allowSearch\n                      />\n                    </div>\n                  </div>\n                </Col>\n\n                {/* {\n                  _.isArray(this.state.broadcasters) && !_.isEmpty(this.state.broadcasters) ?\n                    <Col xs={24} sm={24} md={24} lg={24} xl={24}>\n                      <div className=\"h6 font-weight-bold\">TOP LIVE</div>\n                    </Col>\n                    :\n                    null\n                } */}\n\n                <Col xs={20} sm={20} md={20} lg={20} xl={20}>\n                  <Row gutter={[10,10]}>\n                    {\n                      _.isArray(this.state.broadcasters) && !_.isEmpty(this.state.broadcasters) ?\n                        this._renderTopLives()\n                        :\n                        <div className=\"flex-justify-center flex-items-align-center\">\n                          <img style={{width:'50%', height:'50%'}} src=\"/assets/live-stream.png\"/>\n                        </div>\n                    }\n                  </Row>\n                </Col>\n\n                {/* <Col xs={24} sm={24} md={24} lg={24} xl={24}>\n                  <Row>\n                    <Col className=\"gutter-row\" span={24} className=\"margin-bottom-sm margin-top-sm \">\n                      <span className='d-inline-block h6 font-weight-bold grey-darken-3' style={{ marginLeft: '10px' }} >Social Videos</span>\n                    </Col>\n                    <Col xs={24} sm={24} md={24} lg={24} xl={24} style={{ overflowX: 'auto' }} >\n                      <SocialVideoTabs />\n                    </Col>\n                    <Col xs={24} sm={24} md={24} lg={24} xl={24} className=\"margin-top-md margin-bottom-md text-align-center\">\n                      <a href=\"/socialNewsAndVideo?type=videos\"><Button type=\"primary\"> Show More </Button></a>\n                    </Col>\n                  </Row>\n                </Col> */}\n\n              </Row>\n            </div>\n          </div>\n\n        </LayoutV2>\n      </React.Fragment >\n    )\n  }\n\n}\n\nconst mapStateToProps = state => ({\n  app: state.app,\n  user: state.user,\n});\n\nconst mapDispatchToProps = {\n  updateSocketInfo,\n  updateActiveMenu: updateActiveMenu,\n  fetchClientSocketIo: fetchClientSocketIo,\n  clearClientSocketIo: clearClientSocketIo,\n}\n\nexport default connect(mapStateToProps, mapDispatchToProps)(withRouter(LiveIndex));\n"]},"metadata":{},"sourceType":"module"}