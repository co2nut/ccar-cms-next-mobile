{"ast":null,"code":"import _regeneratorRuntime from \"@babel/runtime/regenerator\";\nimport _asyncToGenerator from \"@babel/runtime/helpers/esm/asyncToGenerator\";\nimport firebase from 'firebase/app';\nimport 'firebase/messaging';\nimport localforage from 'localforage';\nvar PUBLIC_VAPID_KEY = \"BCpKq8t61asvp3b1_uIcq1nL6cZZe-zhoDy83M84EmmTnxgTtn2Rj4CVXR3PjDQPbQ7oVdsWfge2BABk1HNIefs\"; // For Firebase JS SDK v7.20.0 and later, measurementId is optional\n\nvar firebaseConfig = {\n  apiKey: \"AIzaSyBNkd-inUJRLD_ke7pwJg66LND8M2e9A_s\",\n  authDomain: \"ccar-my.firebaseapp.com\",\n  databaseURL: \"https://ccar-my.firebaseio.com\",\n  projectId: \"ccar-my\",\n  storageBucket: \"ccar-my.appspot.com\",\n  messagingSenderId: \"827147986430\",\n  appId: \"1:827147986430:web:9b41b5e04dafd307f98caf\",\n  measurementId: \"G-L8NHNSDC47\"\n};\n\nif (!firebase.apps.length) {\n  firebase.initializeApp(firebaseConfig);\n}\n\nexport var tokenInlocalforage = /*#__PURE__*/function () {\n  var _ref = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee() {\n    return _regeneratorRuntime.wrap(function _callee$(_context) {\n      while (1) {\n        switch (_context.prev = _context.next) {\n          case 0:\n            return _context.abrupt(\"return\", localforage.getItem('fcm_token'));\n\n          case 1:\n          case \"end\":\n            return _context.stop();\n        }\n      }\n    }, _callee);\n  }));\n\n  return function tokenInlocalforage() {\n    return _ref.apply(this, arguments);\n  };\n}();\nexport var initFirebaseToken = /*#__PURE__*/function () {\n  var _ref2 = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee2() {\n    var messaging, tokenInLocalForage, status, fcm_token;\n    return _regeneratorRuntime.wrap(function _callee2$(_context2) {\n      while (1) {\n        switch (_context2.prev = _context2.next) {\n          case 0:\n            _context2.prev = 0;\n            messaging = firebase.messaging();\n            _context2.next = 4;\n            return tokenInlocalforage();\n\n          case 4:\n            tokenInLocalForage = _context2.sent;\n            _context2.next = 7;\n            return Notification.requestPermission();\n\n          case 7:\n            status = _context2.sent;\n\n            if (!(status && status === 'granted')) {\n              _context2.next = 15;\n              break;\n            }\n\n            _context2.next = 11;\n            return messaging.getToken({\n              vapidKey: PUBLIC_VAPID_KEY\n            });\n\n          case 11:\n            fcm_token = _context2.sent;\n\n            if (!fcm_token) {\n              _context2.next = 15;\n              break;\n            }\n\n            //setting FCM token in indexed db using localforage\n            localforage.setItem('fcm_token', fcm_token); //return the FCM token after saving it\n\n            return _context2.abrupt(\"return\", fcm_token);\n\n          case 15:\n            _context2.next = 21;\n            break;\n\n          case 17:\n            _context2.prev = 17;\n            _context2.t0 = _context2[\"catch\"](0);\n            console.error(_context2.t0);\n            return _context2.abrupt(\"return\", null);\n\n          case 21:\n          case \"end\":\n            return _context2.stop();\n        }\n      }\n    }, _callee2, null, [[0, 17]]);\n  }));\n\n  return function initFirebaseToken() {\n    return _ref2.apply(this, arguments);\n  };\n}();\nexport var onMessageListener = function onMessageListener() {\n  var messaging = firebase.messaging();\n  return new Promise(function (resolve) {\n    messaging.onMessage(function (payload) {\n      // console.log(payload);\n      resolve(payload);\n    });\n  });\n};","map":{"version":3,"sources":["/Users/faraheen/ccar-cms-next-mobile/webPush.js"],"names":["firebase","localforage","PUBLIC_VAPID_KEY","firebaseConfig","apiKey","authDomain","databaseURL","projectId","storageBucket","messagingSenderId","appId","measurementId","apps","length","initializeApp","tokenInlocalforage","getItem","initFirebaseToken","messaging","tokenInLocalForage","Notification","requestPermission","status","getToken","vapidKey","fcm_token","setItem","console","error","onMessageListener","Promise","resolve","onMessage","payload"],"mappings":";;AACA,OAAOA,QAAP,MAAqB,cAArB;AACA,OAAO,oBAAP;AACA,OAAOC,WAAP,MAAwB,aAAxB;AAEA,IAAMC,gBAAgB,GAAG,yFAAzB,C,CACA;;AACA,IAAMC,cAAc,GAAG;AACnBC,EAAAA,MAAM,EAAE,yCADW;AAEnBC,EAAAA,UAAU,EAAE,yBAFO;AAGnBC,EAAAA,WAAW,EAAE,gCAHM;AAInBC,EAAAA,SAAS,EAAE,SAJQ;AAKnBC,EAAAA,aAAa,EAAE,qBALI;AAMnBC,EAAAA,iBAAiB,EAAE,cANA;AAOnBC,EAAAA,KAAK,EAAE,2CAPY;AAQnBC,EAAAA,aAAa,EAAE;AARI,CAAvB;;AAYA,IAAI,CAACX,QAAQ,CAACY,IAAT,CAAcC,MAAnB,EAA2B;AACvBb,EAAAA,QAAQ,CAACc,aAAT,CAAuBX,cAAvB;AACH;;AAED,OAAO,IAAMY,kBAAkB;AAAA,sEAAG;AAAA;AAAA;AAAA;AAAA;AAAA,6CACvBd,WAAW,CAACe,OAAZ,CAAoB,WAApB,CADuB;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,GAAH;;AAAA,kBAAlBD,kBAAkB;AAAA;AAAA;AAAA,GAAxB;AAKP,OAAO,IAAME,iBAAiB;AAAA,uEAAG;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAEnBC,YAAAA,SAFmB,GAEPlB,QAAQ,CAACkB,SAAT,EAFO;AAAA;AAAA,mBAGQH,kBAAkB,EAH1B;;AAAA;AAGnBI,YAAAA,kBAHmB;AAAA;AAAA,mBASJC,YAAY,CAACC,iBAAb,EATI;;AAAA;AASnBC,YAAAA,MATmB;;AAAA,kBAUrBA,MAAM,IAAIA,MAAM,KAAK,SAVA;AAAA;AAAA;AAAA;;AAAA;AAAA,mBAYGJ,SAAS,CAACK,QAAV,CAAmB;AAACC,cAAAA,QAAQ,EAAGtB;AAAZ,aAAnB,CAZH;;AAAA;AAYfuB,YAAAA,SAZe;;AAAA,iBAajBA,SAbiB;AAAA;AAAA;AAAA;;AAcjB;AACAxB,YAAAA,WAAW,CAACyB,OAAZ,CAAoB,WAApB,EAAiCD,SAAjC,EAfiB,CAgBjB;;AAhBiB,8CAiBVA,SAjBU;;AAAA;AAAA;AAAA;;AAAA;AAAA;AAAA;AAqBzBE,YAAAA,OAAO,CAACC,KAAR;AArByB,8CAsBlB,IAtBkB;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,GAAH;;AAAA,kBAAjBX,iBAAiB;AAAA;AAAA;AAAA,GAAvB;AA0BP,OAAO,IAAMY,iBAAiB,GAAG,SAApBA,iBAAoB,GAAM;AAEnC,MAAMX,SAAS,GAAGlB,QAAQ,CAACkB,SAAT,EAAlB;AACA,SAAO,IAAIY,OAAJ,CAAY,UAACC,OAAD,EAAa;AAC5Bb,IAAAA,SAAS,CAACc,SAAV,CAAoB,UAACC,OAAD,EAAa;AAC7B;AACAF,MAAAA,OAAO,CAACE,OAAD,CAAP;AACH,KAHD;AAIH,GALM,CAAP;AAMH,CATM","sourcesContent":["\nimport firebase from 'firebase/app';\nimport 'firebase/messaging';\nimport localforage from 'localforage';\n\nconst PUBLIC_VAPID_KEY = \"BCpKq8t61asvp3b1_uIcq1nL6cZZe-zhoDy83M84EmmTnxgTtn2Rj4CVXR3PjDQPbQ7oVdsWfge2BABk1HNIefs\";\n// For Firebase JS SDK v7.20.0 and later, measurementId is optional\nconst firebaseConfig = {\n    apiKey: \"AIzaSyBNkd-inUJRLD_ke7pwJg66LND8M2e9A_s\",\n    authDomain: \"ccar-my.firebaseapp.com\",\n    databaseURL: \"https://ccar-my.firebaseio.com\",\n    projectId: \"ccar-my\",\n    storageBucket: \"ccar-my.appspot.com\",\n    messagingSenderId: \"827147986430\",\n    appId: \"1:827147986430:web:9b41b5e04dafd307f98caf\",\n    measurementId: \"G-L8NHNSDC47\"\n};\n\n\nif (!firebase.apps.length) {\n    firebase.initializeApp(firebaseConfig);\n}\n\nexport const tokenInlocalforage = async () => {\n    return localforage.getItem('fcm_token');\n}\n\n\nexport const initFirebaseToken = async () => {\n    try {\n        const messaging = firebase.messaging();\n        const tokenInLocalForage = await tokenInlocalforage();\n        //if FCM token is already there just return the token\n        // if (tokenInLocalForage !== null) {\n        //     return tokenInLocalForage;\n        // }\n        //requesting notification permission from browser\n        const status = await Notification.requestPermission();\n        if (status && status === 'granted') {\n            //getting token from FCM\n            const fcm_token = await messaging.getToken({vapidKey : PUBLIC_VAPID_KEY});\n            if (fcm_token) {\n                //setting FCM token in indexed db using localforage\n                localforage.setItem('fcm_token', fcm_token);\n                //return the FCM token after saving it\n                return fcm_token;\n            }\n        }\n    } catch (error) {\n        console.error(error);\n        return null;\n    }\n}\n\nexport const onMessageListener = () => {\n\n    const messaging = firebase.messaging();\n    return new Promise((resolve) => {\n        messaging.onMessage((payload) => {\n            // console.log(payload);\n            resolve(payload);\n        });\n    });\n}\n"]},"metadata":{},"sourceType":"module"}