{"ast":null,"code":"var __jsx = React.createElement;\nimport { Card, message, Switch, Table } from 'antd';\nimport _ from 'lodash';\nimport React, { useEffect, useState } from 'react';\nimport { connect } from 'react-redux';\nimport { fetchDetails, filteredCompareData } from '../../redux/actions/newcars-actions';\nimport { arrayLengthCount, isValidNumber, notEmptyLength } from '../../common-function';\nimport client from '../../feathers';\nimport { loading } from '../../redux/actions/app-actions';\nloading;\n\nconst CarspecsCompareTable = props => {\n  const {\n    0: carspecs,\n    1: setCarspecs\n  } = useState([]);\n  const {\n    0: filteredCompareData,\n    1: setFilteredCompareData\n  } = useState([]);\n  const {\n    0: expandedRow,\n    1: setExpandedRow\n  } = useState([]);\n  const {\n    0: columns,\n    1: setColumns\n  } = useState([]);\n  const {\n    0: mainCategory,\n    1: setMainCategory\n  } = useState([{\n    key: 'engineCapacity',\n    name: 'Engine Capacity'\n  }, {\n    key: 'transmission',\n    name: 'Transmission'\n  }, {\n    key: 'year',\n    name: 'Year'\n  }, {\n    key: 'mileage',\n    name: 'Mileage'\n  }, {\n    key: 'bodyType',\n    name: 'Body Type'\n  }]);\n\n  function updateTableCols(data) {\n    let colObj = [{\n      title: 'Name',\n      dataIndex: 'name',\n      key: 'name',\n      width: '250px',\n      fixed: 'left',\n      render: (text, row) => {\n        if (notEmptyLength(row.children)) {\n          return {\n            children: __jsx(\"span\", null, __jsx(\"strong\", null, row.name)),\n            props: {\n              colSpan: notEmptyLength(data) ? data.length + 1 : 1\n            }\n          };\n        } else {\n          if (row.name) {\n            return {\n              children: __jsx(\"span\", null, row.name)\n            };\n          } else {\n            return {\n              children: __jsx(\"span\", null, row.field)\n            };\n          }\n        }\n      }\n    }];\n\n    if (notEmptyLength(data)) {\n      data.forEach(function (item, index) {\n        colObj.push({\n          title: `${_.capitalize(item.make)} ${_.capitalize(item.model)} ${_.capitalize(item.variant)}`,\n          dataIndex: `compare${index}`,\n          key: `compare${index}`,\n          width: arrayLengthCount(data) > 4 ? '250px' : null,\n          render: (text, row) => {\n            if (notEmptyLength(row.children)) {\n              return {\n                props: {\n                  colSpan: 0\n                }\n              };\n            } else {\n              if (row[`compare${index}`]) {\n                return {\n                  children: __jsx(\"span\", null, row[`compare${index}`])\n                };\n              } else {\n                return {\n                  children: __jsx(\"span\", null, \"-\")\n                };\n              }\n            }\n          }\n        });\n      });\n    }\n\n    setColumns(colObj);\n  }\n\n  useEffect(() => {\n    console.log(props.data);\n\n    if (notEmptyLength(props.data)) {\n      let data = _.cloneDeep(props.data);\n\n      if (!isNaN(parseInt(props.limit)) && data.length > parseInt(props.limit)) {\n        data = _.slice(data, 0, parseInt(props.limit));\n        message.warning(`Maximum ${parseInt(props.limit)} items to compare. Removed overflow items.`);\n      }\n\n      if (props.findById) {\n        props.loading(true);\n        client.service('carspecs').find({\n          query: {\n            _id: {\n              $in: data\n            }\n          }\n        }).then(res => {\n          console.log(res);\n          props.loading(false);\n\n          if (notEmptyLength(res.data)) {\n            setCarspecs(res.data);\n          } else {\n            setCarspecs([]);\n          }\n        }).catch(err => {\n          props.loading(false);\n          message.error(err.message);\n        });\n      } else {\n        setCarspecs(data);\n      }\n    } else {\n      setCarspecs([]);\n    }\n  }, [props.data]);\n  useEffect(() => {\n    if (notEmptyLength(carspecs)) {\n      filteringCompareData(carspecs);\n      updateTableCols(carspecs);\n    }\n  }, [carspecs]);\n  useEffect(() => {\n    expandAllRow();\n  }, [filteredCompareData]);\n\n  function filteringCompareData(data) {\n    let baseCategory = _.cloneDeep(mainCategory);\n\n    let rows = [];\n\n    if (notEmptyLength(data)) {\n      let allCategory = []; //Restruct data\n\n      _.map(data, function (item) {\n        //prepare base field row\n        let mainCategoryRow = [];\n        let splitObj = Object.entries(item); //IF it is main category data push into specification\n\n        _.forEach(splitObj, function (splitValue) {\n          let selectedBase = _.find(baseCategory, ['key', splitValue[0]]);\n\n          if (notEmptyLength(selectedBase)) {\n            mainCategoryRow.push({\n              category: 'Main Category',\n              field: selectedBase.name,\n              value: splitValue[1]\n            });\n          }\n        });\n\n        if (!item.specification) {\n          return item;\n        } //Push Main Category to Specification\n\n\n        item.specification = _.compact(_.concat(mainCategoryRow, item.specification)); //Find all distinct category\n\n        allCategory = _.unionBy(_.map(_.uniqBy(item.specification, 'category'), 'category'), allCategory);\n        return item;\n      });\n\n      if (isValidNumber(parseInt(props.groupLimit))) {\n        allCategory = _.take(allCategory, parseInt(props.groupLimit));\n      } //prepare expandable rows\n\n\n      if (notEmptyLength(allCategory)) {\n        _.forEach(allCategory, function (category) {\n          let rowData = {\n            key: category,\n            name: category,\n            children: []\n          };\n\n          _.forEach(_.compact(data), function (item, compareCarIndex) {\n            _.forEach(_.compact(item.specification), function (specItem, specificationIndex) {\n              //Found record then push to children\n              if (_.toLower(category) == _.toLower(specItem.category)) {\n                let selectedRowChildren = {}; //find if children already inserted\n\n                selectedRowChildren = _.find(rowData.children, function (child) {\n                  return child.name == specItem.field;\n                });\n\n                if (notEmptyLength(selectedRowChildren)) {\n                  //inserted\n                  selectedRowChildren[`compare${compareCarIndex}`] = specItem.value;\n                } else {\n                  //haven't insert yet\n                  let temp = {\n                    name: specItem.field,\n                    key: `${specItem.field}-${specificationIndex}`\n                  };\n                  temp[`compare${compareCarIndex}`] = specItem.value;\n                  rowData.children.push(temp);\n                }\n              }\n            });\n          });\n\n          rows.push(rowData);\n        });\n      }\n    }\n\n    setFilteredCompareData(rows);\n  }\n\n  function onChange(checked) {\n    if (checked) {\n      hideSameDetails(filteredCompareData);\n    } else {\n      filteringCompareData(carspecs);\n    }\n  }\n\n  function hideSameDetails(data) {\n    if (notEmptyLength(data)) {\n      let finalData = _.cloneDeep(data);\n\n      data.forEach(function (rowData) {\n        let compareFields = findRowCompareFields(rowData, true);\n\n        if (notEmptyLength(compareFields)) {\n          //Check only more than 1 data\n          if (compareFields.length > 1) {\n            let uniqValue = _.uniq(compareFields); //Is same\n\n\n            if (uniqValue.length <= 1) {\n              finalData = removeRowData(finalData, rowData.key);\n            }\n          }\n        } else {\n          if (notEmptyLength(rowData.children)) {\n            _.forEach(rowData.children, function (childrenRowData) {\n              compareFields = findRowCompareFields(childrenRowData, true);\n\n              if (notEmptyLength(compareFields)) {\n                if (compareFields.length > 1) {\n                  let uniqValue = _.uniq(compareFields); //Is same\n\n\n                  if (uniqValue.length <= 1) {\n                    finalData = removeRowData(finalData, childrenRowData.key);\n                  }\n                }\n              } else {\n                finalData = removeRowData(finalData, childrenRowData.key);\n              }\n            });\n          } else {\n            finalData = removeRowData(finalData, rowData.key);\n          }\n        }\n      });\n      setFilteredCompareData(finalData);\n    } else {\n      return data;\n    }\n  }\n\n  function findRowCompareFields(row, returnDataOnly) {\n    if (notEmptyLength(row)) {\n      let splitObj = Object.entries(row);\n\n      let compareFields = _.filter(splitObj, function (obj) {\n        let regex = new RegExp('^compare', 'i');\n        return regex.test(obj[0]);\n      });\n\n      if (returnDataOnly) {\n        return _.map(compareFields, function (item) {\n          return item[1];\n        });\n      } else {\n        return compareFields;\n      }\n    } else {\n      return [];\n    }\n  }\n\n  function removeRowData(data, key) {\n    if (key) {\n      let finalData = _.cloneDeep(data); //Check for non expandable row first\n\n\n      finalData = _.filter(finalData, function (row) {\n        return row.key != key;\n      }); //Check for expandable row\n\n      finalData = _.compact(_.map(finalData, function (row) {\n        if (notEmptyLength(row.children)) {\n          let filteredChildren = _.filter(row.children, function (childrenRow) {\n            return childrenRow.key != key;\n          }); //Dont have any children now\n\n\n          if (!notEmptyLength(filteredChildren)) {\n            return null;\n          } else {\n            row.children = filteredChildren;\n            return row;\n          }\n        }\n\n        return row;\n      }));\n      return finalData;\n    } else {\n      return null;\n    }\n  }\n\n  function expandAllRow() {\n    if (notEmptyLength(filteredCompareData)) {\n      let keys = _.map(filteredCompareData, 'key');\n\n      if (notEmptyLength(keys)) {\n        setExpandedRow(keys);\n      }\n    } else {\n      setExpandedRow([]);\n    }\n  }\n\n  function shrinkAllRow() {\n    setExpandedRow([]);\n  }\n\n  const _renderTableTitle = () => {\n    return __jsx(React.Fragment, null, __jsx(\"div\", {\n      className: \" flex-justify-start w-100 flex-items-align-center \"\n    }, props.rowExpandControl == null || props.rowExpandControl == true ? __jsx(\"span\", {\n      className: \"d-inline-block margin-x-sm\"\n    }, __jsx(Switch, {\n      onChange: e => {\n        e ? expandAllRow() : shrinkAllRow();\n      },\n      defaultChecked: true,\n      unCheckedChildren: \"Expand Rows\",\n      checkedChildren: \"Shrink Rows\"\n    })) : null, (props.hideExpandControl == null || props.hideExpandControl == true) && arrayLengthCount(carspecs) > 1 ? __jsx(\"span\", {\n      className: \"d-inline-block margin-x-sm\"\n    }, __jsx(Switch, {\n      onChange: onChange,\n      unCheckedChildren: \"Hide Same Items\",\n      checkedChildren: \"Show All Items\"\n    })) : null));\n  };\n\n  return __jsx(React.Fragment, null, __jsx(Card, {\n    className: \"card-padding-0\"\n  }, __jsx(Table, {\n    bordered: true,\n    row: \"key\",\n    className: \"compare-table\",\n    title: props.showTitle == null || props.showTitle == true ? () => _renderTableTitle() : null,\n    scroll: {\n      x: 1000,\n      y: 1000\n    },\n    expandedRowKeys: expandedRow,\n    onExpandedRowsChange: e => {\n      setExpandedRow(e);\n    },\n    columns: columns,\n    pagination: false,\n    dataSource: filteredCompareData\n  })));\n};\n\nconst mapStateToProps = state => ({\n  newCars: state.newCars\n});\n\nconst mapDispatchToProps = {\n  loading: loading,\n  filteredCompareData: filteredCompareData,\n  fetchDetails: fetchDetails\n};\nexport default connect(mapStateToProps, mapDispatchToProps)(CarspecsCompareTable);","map":{"version":3,"sources":["/Users/faraheen/ccar-cms-next-mobile/components/compare/CarspecsCompareTable.jsx"],"names":["Card","message","Switch","Table","_","React","useEffect","useState","connect","fetchDetails","filteredCompareData","arrayLengthCount","isValidNumber","notEmptyLength","client","loading","CarspecsCompareTable","props","carspecs","setCarspecs","setFilteredCompareData","expandedRow","setExpandedRow","columns","setColumns","mainCategory","setMainCategory","key","name","updateTableCols","data","colObj","title","dataIndex","width","fixed","render","text","row","children","colSpan","length","field","forEach","item","index","push","capitalize","make","model","variant","console","log","cloneDeep","isNaN","parseInt","limit","slice","warning","findById","service","find","query","_id","$in","then","res","catch","err","error","filteringCompareData","expandAllRow","baseCategory","rows","allCategory","map","mainCategoryRow","splitObj","Object","entries","splitValue","selectedBase","category","value","specification","compact","concat","unionBy","uniqBy","groupLimit","take","rowData","compareCarIndex","specItem","specificationIndex","toLower","selectedRowChildren","child","temp","onChange","checked","hideSameDetails","finalData","compareFields","findRowCompareFields","uniqValue","uniq","removeRowData","childrenRowData","returnDataOnly","filter","obj","regex","RegExp","test","filteredChildren","childrenRow","keys","shrinkAllRow","_renderTableTitle","rowExpandControl","e","hideExpandControl","showTitle","x","y","mapStateToProps","state","newCars","mapDispatchToProps"],"mappings":"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","sourcesContent":["import { Card, message, Switch, Table } from 'antd';\nimport _ from 'lodash';\nimport React, { useEffect, useState } from 'react';\nimport { connect } from 'react-redux';\nimport { fetchDetails, filteredCompareData } from '../../redux/actions/newcars-actions';\nimport { arrayLengthCount, isValidNumber, notEmptyLength } from '../../common-function';\nimport client from '../../feathers';\nimport { loading } from '../../redux/actions/app-actions';\n\nloading\nconst CarspecsCompareTable = (props) => {\n    const [carspecs, setCarspecs] = useState([])\n    const [filteredCompareData, setFilteredCompareData] = useState([])\n    const [expandedRow, setExpandedRow] = useState([])\n    const [columns, setColumns] = useState([])\n\n    const [mainCategory, setMainCategory] = useState([\n        { key: 'engineCapacity', name: 'Engine Capacity' },\n        { key: 'transmission', name: 'Transmission' },\n        { key: 'year', name: 'Year' },\n        { key: 'mileage', name: 'Mileage' },\n        { key: 'bodyType', name: 'Body Type' },\n    ])\n\n    function updateTableCols(data) {\n\n        let colObj = [\n            {\n                title: 'Name',\n                dataIndex: 'name',\n                key: 'name',\n                width: '250px',\n                fixed: 'left',\n                render: (text, row) => {\n                    if (notEmptyLength(row.children)) {\n                        return {\n                            children: <span><strong>{row.name}</strong></span>,\n                            props: {\n                                colSpan: notEmptyLength(data) ? data.length + 1 : 1,\n                            },\n                        };\n                    } else {\n                        if (row.name) {\n                            return {\n                                children: <span>{row.name}</span>,\n                            };\n                        } else {\n                            return {\n                                children: <span>{row.field}</span>,\n                            };\n                        }\n                    }\n                },\n            }\n        ];\n        if (notEmptyLength(data)) {\n\n            data.forEach(function (item, index) {\n                colObj.push(\n                    {\n                        title: `${_.capitalize(item.make)} ${_.capitalize(item.model)} ${_.capitalize(item.variant)}`,\n                        dataIndex: `compare${index}`,\n                        key: `compare${index}`,\n                        width: arrayLengthCount(data) > 4 ? '250px' : null,\n                        render: (text, row) => {\n                            if (notEmptyLength(row.children)) {\n                                return {\n                                    props: {\n                                        colSpan: 0,\n                                    },\n                                };\n                            } else {\n                                if (row[`compare${index}`]) {\n                                    return {\n                                        children: <span>{row[`compare${index}`]}</span>,\n                                    };\n                                } else {\n                                    return {\n                                        children: <span>-</span>,\n                                    };\n                                }\n                            }\n                        },\n                    },\n                )\n            })\n\n        }\n        setColumns(colObj);\n    }\n\n    useEffect(() => {\n\n        console.log(props.data);\n        if (notEmptyLength(props.data)) {\n            let data = _.cloneDeep(props.data);\n            if (!isNaN(parseInt(props.limit)) && data.length > parseInt(props.limit)) {\n                data = _.slice(data, 0, parseInt(props.limit));\n                message.warning(`Maximum ${parseInt(props.limit)} items to compare. Removed overflow items.`)\n            }\n\n            if (props.findById) {\n                props.loading(true);\n                client.service('carspecs').find({\n                    query: {\n                        _id: {\n                            $in: data,\n                        }\n                    }\n                }).then(res => {\n                    console.log(res);\n                    props.loading(false);\n \n                    if (notEmptyLength(res.data)) {\n                        setCarspecs(res.data);\n                    } else {\n                        setCarspecs([]);\n                    }\n\n                }).catch(err => {\n                    props.loading(false);\n                    message.error(err.message)\n                });\n\n            } else {\n                setCarspecs(data);\n            }\n        } else {\n            setCarspecs([]);\n        }\n    }, [props.data])\n\n    useEffect(() => {\n        if (notEmptyLength(carspecs)) {\n            filteringCompareData(carspecs)\n            updateTableCols(carspecs);\n        }\n    }, [carspecs])\n\n    useEffect(() => {\n\n        expandAllRow();\n    }, [filteredCompareData])\n\n\n\n    function filteringCompareData(data) {\n\n        let baseCategory = _.cloneDeep(mainCategory)\n        let rows = []\n\n\n        if (notEmptyLength(data)) {\n\n            let allCategory = [];\n\n            //Restruct data\n            _.map(data, function (item) {\n                //prepare base field row\n                let mainCategoryRow = [];\n                let splitObj = Object.entries(item);\n\n                //IF it is main category data push into specification\n                _.forEach(splitObj, function (splitValue) {\n                    let selectedBase = _.find(baseCategory, ['key', splitValue[0]])\n\n                    if (notEmptyLength(selectedBase)) {\n                        mainCategoryRow.push({\n                            category: 'Main Category',\n                            field: selectedBase.name,\n                            value: splitValue[1],\n                        })\n                    }\n                });\n                if(!item.specification){\n                    return item\n                }\n                //Push Main Category to Specification\n                item.specification = _.compact(_.concat(mainCategoryRow, item.specification));\n\n                //Find all distinct category\n                allCategory = _.unionBy(\n                    _.map(_.uniqBy(item.specification, 'category'), 'category')\n                    ,\n                    allCategory\n                );\n\n                return item;\n            });\n\n            if(isValidNumber(parseInt(props.groupLimit))){\n                allCategory = _.take(allCategory, parseInt(props.groupLimit))\n            }\n\n            //prepare expandable rows\n            if (notEmptyLength(allCategory)) {\n                _.forEach(allCategory, function (category) {\n                    let rowData = {\n                        key: category,\n                        name: category,\n                        children: [],\n                    }\n\n                    _.forEach(_.compact(data), function (item, compareCarIndex) {\n                        _.forEach(_.compact(item.specification), function (specItem, specificationIndex) {\n                            //Found record then push to children\n                            if (_.toLower(category) == _.toLower(specItem.category)) {\n\n                                let selectedRowChildren = {};\n\n                                //find if children already inserted\n                                selectedRowChildren = _.find(rowData.children, function (child) {\n                                    return child.name == specItem.field;\n                                })\n\n                                if (notEmptyLength(selectedRowChildren)) {\n                                    //inserted\n                                    selectedRowChildren[`compare${compareCarIndex}`] = specItem.value;\n                                } else {\n                                    //haven't insert yet\n                                    let temp = { name: specItem.field, key: `${specItem.field}-${specificationIndex}` };\n                                    temp[`compare${compareCarIndex}`] = specItem.value;\n                                    rowData.children.push(temp)\n                                }\n                            }\n\n\n                        })\n\n                    });\n\n                    rows.push(rowData);\n\n                })\n\n            }\n\n\n        }\n\n        setFilteredCompareData(rows)\n    }\n\n    function onChange(checked) {\n        if (checked) {\n            hideSameDetails(filteredCompareData)\n        } else {\n            filteringCompareData(carspecs);\n        }\n    }\n\n    function hideSameDetails(data) {\n\n        if (notEmptyLength(data)) {\n            let finalData = _.cloneDeep(data);\n\n            data.forEach(function (rowData) {\n\n                let compareFields = findRowCompareFields(rowData, true);\n\n                if (notEmptyLength(compareFields)) {\n\n                    //Check only more than 1 data\n                    if (compareFields.length > 1) {\n                        let uniqValue = _.uniq(compareFields);\n\n                        //Is same\n                        if (uniqValue.length <= 1) {\n                            finalData = removeRowData(finalData, rowData.key);\n                        }\n\n                    }\n                } else {\n\n                    if (notEmptyLength(rowData.children)) {\n\n                        _.forEach(rowData.children, function (childrenRowData) {\n                            compareFields = findRowCompareFields(childrenRowData, true);\n                            if (notEmptyLength(compareFields)) {\n                                if (compareFields.length > 1) {\n                                    let uniqValue = _.uniq(compareFields);\n\n                                    //Is same\n                                    if (uniqValue.length <= 1) {\n                                        finalData = removeRowData(finalData, childrenRowData.key);\n                                    }\n                                }\n                            } else {\n                                finalData = removeRowData(finalData, childrenRowData.key);\n                            }\n                        })\n\n                    } else {\n                        finalData = removeRowData(finalData, rowData.key);\n                    }\n                }\n\n            })\n\n\n            setFilteredCompareData(finalData);\n\n        } else {\n            return data;\n        }\n    }\n\n    function findRowCompareFields(row, returnDataOnly) {\n        if (notEmptyLength(row)) {\n            let splitObj = Object.entries(row);\n            let compareFields = _.filter(splitObj, function (obj) {\n                let regex = new RegExp('^compare', 'i');\n                return regex.test(obj[0]);\n            })\n            if (returnDataOnly) {\n                return _.map(compareFields, function (item) {\n                    return item[1];\n                });\n            } else {\n                return compareFields;\n            }\n\n        } else {\n            return [];\n        }\n    }\n\n    function removeRowData(data, key) {\n        if (key) {\n            let finalData = _.cloneDeep(data);\n\n            //Check for non expandable row first\n            finalData = _.filter(finalData, function (row) {\n                return row.key != key;\n            })\n\n            //Check for expandable row\n            finalData = _.compact(\n                _.map(finalData, function (row) {\n\n                    if (notEmptyLength(row.children)) {\n                        let filteredChildren = _.filter(row.children, function (childrenRow) {\n                            return childrenRow.key != key;\n                        })\n\n                        //Dont have any children now\n                        if (!notEmptyLength(filteredChildren)) {\n                            return null;\n                        } else {\n                            row.children = filteredChildren\n                            return row;\n                        }\n                    }\n\n                    return row;\n                })\n            )\n\n\n            return finalData;\n        } else {\n            return null;\n        }\n    }\n\n    function expandAllRow() {\n        if (notEmptyLength(filteredCompareData)) {\n            let keys = _.map(filteredCompareData, 'key');\n            if (notEmptyLength(keys)) {\n                setExpandedRow(keys);\n            }\n        } else {\n            setExpandedRow([]);\n        }\n    }\n\n    function shrinkAllRow() {\n        setExpandedRow([]);\n    }\n\n    const _renderTableTitle = () => {\n        return (\n            <React.Fragment>\n                <div className=' flex-justify-start w-100 flex-items-align-center '>\n                    {\n                        props.rowExpandControl == null || props.rowExpandControl == true ?\n                            <span className='d-inline-block margin-x-sm' >\n                                <Switch onChange={(e) => { e ? expandAllRow() : shrinkAllRow() }} defaultChecked unCheckedChildren=\"Expand Rows\" checkedChildren=\"Shrink Rows\" />\n                            </span>\n                            :\n                            null\n                    }\n                    {\n                        (props.hideExpandControl == null || props.hideExpandControl == true) && arrayLengthCount(carspecs) > 1 ?\n                            <span className='d-inline-block margin-x-sm' >\n                                <Switch onChange={onChange} unCheckedChildren=\"Hide Same Items\" checkedChildren=\"Show All Items\" />\n                            </span>\n                            :\n                            null\n                    }\n                </div>\n            </React.Fragment>\n        )\n    }\n\n    return (\n\n        <React.Fragment>\n            <Card className=\"card-padding-0\" >\n                <Table\n                    bordered\n                    row=\"key\"\n                    className=\"compare-table\"\n                    title={props.showTitle == null || props.showTitle == true ? () => _renderTableTitle() : null}\n                    scroll={{ x: 1000, y: 1000 }}\n                    expandedRowKeys={expandedRow}\n                    onExpandedRowsChange={(e) => { setExpandedRow(e); }}\n                    columns={columns}\n                    pagination={false}\n                    dataSource={filteredCompareData} />\n            </Card>\n        </React.Fragment>\n    );\n}\n\nconst mapStateToProps = state => ({\n    newCars: state.newCars,\n});\n\nconst mapDispatchToProps = {\n    loading: loading,\n    filteredCompareData: filteredCompareData,\n    fetchDetails: fetchDetails\n}\n\nexport default connect(mapStateToProps, mapDispatchToProps)(CarspecsCompareTable);"]},"metadata":{},"sourceType":"module"}