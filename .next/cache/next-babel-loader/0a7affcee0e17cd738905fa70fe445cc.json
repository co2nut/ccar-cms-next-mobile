{"ast":null,"code":"var __jsx = React.createElement;\n\nfunction ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); if (enumerableOnly) { symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; }); } keys.push.apply(keys, symbols); } return keys; }\n\nfunction _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; if (i % 2) { ownKeys(Object(source), true).forEach(function (key) { _defineProperty(target, key, source[key]); }); } else if (Object.getOwnPropertyDescriptors) { Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)); } else { ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } } return target; }\n\nfunction _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }\n\nimport { Form } from 'antd';\nimport _ from 'lodash';\nimport React, { useEffect, useState } from 'react';\nimport { connect } from 'react-redux';\nimport ShowMoreText from 'react-show-more-text';\nimport { parseTagStringToArray } from '../carFreak/config';\nimport { withRouter } from 'next/router';\nimport client from '../../feathers';\nlet timeoutFunc;\n\nconst ParseTag = props => {\n  const {\n    0: text,\n    1: setText\n  } = useState('');\n  useEffect(() => {\n    if (_.isString(props.data)) {\n      parseText(props.data);\n    } else {\n      setText(props.data);\n    }\n  }, [props.data]);\n\n  async function parseText(data) {\n    let userIds = [];\n    let users = [];\n\n    if (_.isString(data)) {\n      let textArr = parseTagStringToArray(data || '') || [];\n\n      _.forEach(textArr, function (v) {\n        if (v.type == 'tag') {\n          userIds.push(v.id);\n        }\n      });\n\n      if (_.isArray(userIds) && !_.isEmpty(userIds)) {\n        let userRes = await client.service('users').find({\n          query: {\n            _id: {\n              $in: userIds || []\n            }\n          }\n        });\n        users = _.get(userRes, 'data') || [];\n      }\n\n      setText(_.map(textArr, function (v, i) {\n        if (v.type == 'tag') {\n          let user = _.find(users, function (user) {\n            return user._id == v.id;\n          });\n\n          if (_.get(user, ['userurlId'])) {\n            return __jsx(\"a\", {\n              key: 'ccartag' + i,\n              className: `${props.tagClassName || 'font-weight-bold blue'} cursor-pointer`,\n              href: `/profile/${user.userurlId}`,\n              target: \"_blank\"\n            }, v.value);\n          }\n        }\n\n        if (v.type == 'hashTag') {\n          return __jsx(\"a\", {\n            key: 'ccarhashtag' + i,\n            className: `${props.tagClassName || 'font-weight-bold black'} cursor-pointer`,\n            href: v.id ? `/hashtag/${(v.value || '').replace('#', '')}` : '#',\n            target: \"_blank\"\n          }, v.value);\n        }\n\n        return v.value;\n      }));\n    } else {\n      setText(data);\n    }\n  }\n\n  return __jsx(\"span\", {\n    className: `text-overflow-break d-inline-block ${props.className || ''}`,\n    style: _objectSpread({\n      maxWidth: '100%'\n    }, props.style)\n  }, props.expandable ? __jsx(ShowMoreText, {\n    lines: props.lines || 1,\n    more: props.more || __jsx(\"a\", {\n      className: \"small-text\"\n    }, \"Show More\"),\n    less: props.less || __jsx(\"a\", {\n      className: \"small-text\"\n    }, \"Show Less\"),\n    expanded: false\n  }, text || '') : text || '');\n};\n\nconst mapStateToProps = state => ({\n  app: state.app,\n  user: state.user\n});\n\nconst mapDispatchToProps = {};\nexport default connect(mapStateToProps, mapDispatchToProps)(Form.create()(withRouter(ParseTag)));","map":{"version":3,"sources":["/Users/faraheen/ccar-cms-next-mobile/components/general/ParseTag.jsx"],"names":["Form","_","React","useEffect","useState","connect","ShowMoreText","parseTagStringToArray","withRouter","client","timeoutFunc","ParseTag","props","text","setText","isString","data","parseText","userIds","users","textArr","forEach","v","type","push","id","isArray","isEmpty","userRes","service","find","query","_id","$in","get","map","i","user","tagClassName","userurlId","value","replace","className","maxWidth","style","expandable","lines","more","less","mapStateToProps","state","app","mapDispatchToProps","create"],"mappings":"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","sourcesContent":["import { Form } from 'antd';\nimport _ from 'lodash';\nimport React, { useEffect, useState } from 'react';\nimport { connect } from 'react-redux';\nimport ShowMoreText from 'react-show-more-text';\nimport { parseTagStringToArray } from '../carFreak/config';\nimport { withRouter } from 'next/router';\nimport client from '../../feathers';\n\n\nlet timeoutFunc;\n\nconst ParseTag = (props) => {\n\n    const [text, setText] = useState('');\n\n    useEffect(() => {\n\n        if (_.isString(props.data)) {\n            parseText(props.data)\n        } else {\n            setText(props.data)\n        }\n\n    }, [props.data])\n\n\n    async function parseText(data) {\n        let userIds = [];\n        let users = [];\n        if (_.isString(data)) {\n\n            let textArr = parseTagStringToArray(data || '') || [];\n            _.forEach(textArr, function (v) {\n                if (v.type == 'tag') {\n                    userIds.push(v.id)\n                }\n            })\n\n            if (_.isArray(userIds) && !_.isEmpty(userIds)) {\n                let userRes = await client.service('users').find({\n                    query: {\n                        _id: {\n                            $in: userIds || [],\n                        }\n                    }\n                })\n\n                users = _.get(userRes, 'data') || [];\n            }\n\n\n            setText(_.map(textArr, function (v, i) {\n\n                if (v.type == 'tag') {\n                    let user = _.find(users, function (user) {\n                        return user._id == v.id;\n                    })\n                    if (_.get(user, ['userurlId'])) {\n                        return <a key={'ccartag' + i} className={`${props.tagClassName || 'font-weight-bold blue'} cursor-pointer`} href={`/profile/${user.userurlId}`} target=\"_blank\">\n                            {v.value}\n                        </a>\n                    }\n                }\n                if (v.type == 'hashTag') {\n                    return <a key={'ccarhashtag' + i} className={`${props.tagClassName || 'font-weight-bold black'} cursor-pointer`} href={v.id ? `/hashtag/${(v.value || '').replace('#', '')}` : '#'} target=\"_blank\">\n                        {v.value}\n                    </a>\n                }\n                return v.value;\n            }))\n        } else {\n            setText(data)\n        }\n    }\n\n\n    return (\n        <span className={`text-overflow-break d-inline-block ${props.className || ''}`} style={{ maxWidth: '100%', ...props.style }}>\n            {\n                props.expandable ?\n                    <ShowMoreText\n                        lines={props.lines || 1}\n                        more={props.more || <a className=\"small-text\">Show More</a>}\n                        less={props.less || <a className=\"small-text\">Show Less</a>}\n                        expanded={false}\n                    >\n                        {\n                            text || ''\n                        }\n                    </ShowMoreText>\n                    :\n                    text || ''\n            }\n        </span>\n    );\n}\n\n\nconst mapStateToProps = state => ({\n    app: state.app,\n    user: state.user,\n});\n\nconst mapDispatchToProps = {\n};\nexport default connect(mapStateToProps, mapDispatchToProps)(Form.create()(withRouter(ParseTag)));"]},"metadata":{},"sourceType":"module"}