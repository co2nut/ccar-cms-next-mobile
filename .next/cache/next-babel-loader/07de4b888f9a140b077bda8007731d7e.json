{"ast":null,"code":"var __jsx = React.createElement;\n\nfunction ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); if (enumerableOnly) { symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; }); } keys.push.apply(keys, symbols); } return keys; }\n\nfunction _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; if (i % 2) { ownKeys(Object(source), true).forEach(function (key) { _defineProperty(target, key, source[key]); }); } else if (Object.getOwnPropertyDescriptors) { Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)); } else { ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } } return target; }\n\nfunction _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }\n\nimport { Avatar, Form, Tooltip } from 'antd';\nimport _ from 'lodash';\nimport React, { useState } from 'react';\nimport { connect } from 'react-redux';\nimport { darkThemeColorList } from '../../params/darkThemeColorList';\nimport { withRouter } from 'next/router';\nimport { loading } from '../../redux/actions/app-actions';\nimport { isValidNumber } from '../../common-function';\nimport LightBoxGallery from '../general/light-box-gallery';\n/*\n    This works with broadcasters data\n    \n    \n    For the messages data, what we do is we put a userName in all the messages\n    make sure the user name is in the exact same format as displayName\n*/\n\nconst UserAvatar = props => {\n  if (props.data.avatar === \"undefined\") {\n    props.data.avatar = null;\n  } // ...props.avatar for chats and broadcasters...\n\n\n  const {\n    0: tooltipVisible,\n    1: setTooltipVisible\n  } = useState(false); //../../assets/ccarLive/ccar_anonymous.png\n  // const anonymous = ()\n  // the real avatar\n\n  var realAvatar;\n\n  if (props.isAnonymous) {\n    realAvatar = \"/assets/ccarLive/ccar_anonymous.png\";\n  } else {\n    //it is the anonymous\n    // realAvatar = !props.data || !props.data.avatar ? null : props.data.avatar;\n    realAvatar = !props.data || !props.data.avatar ? null : props.data.avatar;\n  }\n\n  var calculatedFullName; //it can be used in broadcasters list or the list for ccar messages\n\n  if (props.isBroadcastersList) {\n    calculatedFullName = _.chain([props.data.firstName, props.data.lastName]).compact().join(' ').value();\n  } else {\n    //name: chat.userName from the chat messages\n    calculatedFullName = props.data.name;\n  }\n\n  var realStyle;\n\n  if (!realAvatar) {\n    realStyle = {\n      backgroundColor: darkThemeColorList[//props.data.name means it is a message\n      _.toString(calculatedFullName).length % darkThemeColorList.length].code,\n      verticalAlign: 'middle'\n    };\n  } else {\n    realStyle = {};\n  }\n\n  if (props.data.name === \"banana Bong\" && !props.isBroadcastersList) {}\n\n  return __jsx(React.Fragment, null, __jsx(\"div\", {\n    className: `flex-items-align-center flex-justify-center ${props.className ? props.className : ''} ${props.redirectProfile ? 'cursor-pointer' : ''} `,\n    style: _objectSpread({}, props.style),\n    onClick: e => {\n      if (props.onClick) {\n        props.onClick(e);\n      }\n\n      if (_.get(props.data, ['userurlId']) && props.redirectProfile) {\n        if (props.onRedirect) {\n          props.onRedirect();\n        }\n\n        props.router.push(`/profile/${props.data.userurlId}`, undefined, {\n          shallow: false\n        });\n      }\n    }\n  }, __jsx(LightBoxGallery, {\n    images: _.compact([_.get(props.data, ['avatar'])])\n  }, (data, setCurrentIndex, setVisible) => {\n    return __jsx(Tooltip, {\n      title: _.isPlainObject(props.data) && !_.isEmpty(props.data) ? _.get(props.data, ['name']) ? _.get(props.data, ['name']) || '' : _.get(props.data, ['firstName', 'lastName']) || '' : '',\n      visible: tooltipVisible,\n      onVisibleChange: visible => {\n        if (props.showTooltip) {\n          setTooltipVisible(visible);\n        }\n      }\n    }, __jsx(Avatar, {\n      onClick: e => {\n        if (!props.redirectProfile && props.showPreview) {\n          setCurrentIndex(0);\n          setVisible(true);\n        }\n      },\n      size: isValidNumber(props.size) || props.size == 'small' || props.size == 'large' ? props.size : 'default' // src={!props.data || !props.data.avatar ? null : props.data.avatar}\n      ,\n      src: realAvatar,\n      icon: !props.data || !props.data.avatar && !props.data.name && !props.data.firstName && !props.data.lastName ? 'user' : null,\n      className: `${props.avatarClassName ? props.avatarClassName : ''} ${props.redirectProfile || props.showPreview ? 'cursor-pointer' : ''}`,\n      style: _objectSpread(_objectSpread({}, realStyle), props.avatarStyle)\n    }, !realAvatar && calculatedFullName));\n  }), props.showNameRight && props.data ? __jsx(\"span\", {\n    className: `d-inline-block text-align-center headline margin-left-md text-truncate ${props.textClassName ? props.textClassName : '  '}`,\n    style: _objectSpread(_objectSpread({}, props.textStyle), {}, {\n      maxWidth: '80%'\n    })\n  }, props.renderName ? props.renderName(props.data) : props.data.name ? props.data.name : `${props.data.firstName ? props.data.firstName : ''} ${props.data.lastName ? props.data.lastName : ''}`) : null), __jsx(\"div\", {\n    className: `text-align-center headline ${props.textClassName ? props.textClassName : '  '}`\n  }, props.showName && props.data && !props.showNameRight ? props.renderName ? props.renderName(props.data) : props.data.name ? props.data.name : `${props.data.firstName ? props.data.firstName : ''} ${props.data.lastName ? props.data.lastName : ''}` : null));\n};\n\nconst mapStateToProps = state => ({\n  app: state.app,\n  user: state.user\n});\n\nconst mapDispatchToProps = {\n  loading: loading\n};\nexport default connect(mapStateToProps, mapDispatchToProps)(Form.create()(withRouter(UserAvatar)));","map":{"version":3,"sources":["/Users/faraheen/ccar-cms-next-mobile/components/live/user-avatarCCARLive.jsx"],"names":["Avatar","Form","Tooltip","_","React","useState","connect","darkThemeColorList","withRouter","loading","isValidNumber","LightBoxGallery","UserAvatar","props","data","avatar","tooltipVisible","setTooltipVisible","realAvatar","isAnonymous","calculatedFullName","isBroadcastersList","chain","firstName","lastName","compact","join","value","name","realStyle","backgroundColor","toString","length","code","verticalAlign","className","redirectProfile","style","e","onClick","get","onRedirect","router","push","userurlId","undefined","shallow","setCurrentIndex","setVisible","isPlainObject","isEmpty","visible","showTooltip","showPreview","size","avatarClassName","avatarStyle","showNameRight","textClassName","textStyle","maxWidth","renderName","showName","mapStateToProps","state","app","user","mapDispatchToProps","create"],"mappings":"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","sourcesContent":["import { Avatar, Form, Tooltip } from 'antd';\nimport _ from 'lodash';\nimport React, { useState } from 'react';\nimport { connect } from 'react-redux';\nimport { darkThemeColorList } from '../../params/darkThemeColorList';\nimport { withRouter } from 'next/router';\nimport { loading } from '../../redux/actions/app-actions';\nimport { isValidNumber } from '../../common-function';\nimport LightBoxGallery from '../general/light-box-gallery';\n\n\n/*\n    This works with broadcasters data\n    \n    \n    For the messages data, what we do is we put a userName in all the messages\n    make sure the user name is in the exact same format as displayName\n*/\n\nconst UserAvatar = (props) => {\n    if(props.data.avatar === \"undefined\"){\n        props.data.avatar = null;\n    }\n    // ...props.avatar for chats and broadcasters...\n\n\n    const [tooltipVisible, setTooltipVisible] = useState(false);\n    //../../assets/ccarLive/ccar_anonymous.png\n    // const anonymous = ()\n    \n    // the real avatar\n    var realAvatar;\n    if(props.isAnonymous){\n        realAvatar = \"/assets/ccarLive/ccar_anonymous.png\";\n    } else {\n        //it is the anonymous\n        // realAvatar = !props.data || !props.data.avatar ? null : props.data.avatar;\n        realAvatar = (!props.data || !props.data.avatar) ? null : props.data.avatar;\n    }\n\n\n    var calculatedFullName;\n    //it can be used in broadcasters list or the list for ccar messages\n    if(props.isBroadcastersList){\n        calculatedFullName = _.chain([props.data.firstName, props.data.lastName])\n                            .compact()\n                            .join(' ')\n                            .value();\n    } else {\n        //name: chat.userName from the chat messages\n        calculatedFullName = props.data.name;\n    }\n\n    var realStyle;\n    if(!realAvatar){\n        realStyle = {\n            backgroundColor: darkThemeColorList[\n                //props.data.name means it is a message\n                _.toString(calculatedFullName)\n                .length % darkThemeColorList.length].code, verticalAlign: 'middle'\n            \n        }\n    } else {\n        realStyle={};\n    }\n\n    if(props.data.name === \"banana Bong\" && !props.isBroadcastersList){\n    }\n    \n\n    return (\n        <React.Fragment>\n            <div className={`flex-items-align-center flex-justify-center ${props.className ? props.className : ''} ${props.redirectProfile ? 'cursor-pointer' : ''} `} style={{ ...props.style }}\n                onClick={(e) => {\n                    if (props.onClick) {\n                        props.onClick(e)\n                    }\n\n                    if (_.get(props.data, ['userurlId']) && props.redirectProfile) {\n                        if (props.onRedirect) {\n                            props.onRedirect()\n                        }\n                        props.router.push(`/profile/${props.data.userurlId}`, undefined, { shallow : false })\n                    }\n                }}\n            >\n                <LightBoxGallery images={_.compact([_.get(props.data, ['avatar'])])}>\n                    {\n                        (data, setCurrentIndex, setVisible) => {\n                            return (\n                                <Tooltip title={_.isPlainObject(props.data) && !_.isEmpty(props.data) ? _.get(props.data, ['name']) ? _.get(props.data, ['name']) || '' : _.get(props.data, ['firstName', 'lastName']) || '' : ''} visible={tooltipVisible} onVisibleChange={(visible) => {\n                                    if (props.showTooltip) {\n                                        setTooltipVisible(visible)\n                                    }\n                                }}>\n                                    <Avatar\n                                        onClick={(e) => {\n                                            if (!props.redirectProfile && props.showPreview) {\n                                                setCurrentIndex(0);\n                                                setVisible(true);\n                                            }\n                                        }}\n                                        size={isValidNumber(props.size) || props.size == 'small' || props.size == 'large' ? props.size : 'default'}\n                                        // src={!props.data || !props.data.avatar ? null : props.data.avatar}\n                                        src={realAvatar}\n                                        icon={!props.data || (!props.data.avatar && !props.data.name && !props.data.firstName && !props.data.lastName) ? 'user' : null}\n                                        className={`${props.avatarClassName ? props.avatarClassName : ''} ${props.redirectProfile || props.showPreview ? 'cursor-pointer' : ''}`}\n                                        style={{...realStyle, ...props.avatarStyle}}\n                                            >\n                                        {\n                                            !realAvatar && (\n                                                calculatedFullName\n                                            )\n                                        }\n                                    </Avatar>\n                                </Tooltip>\n                            )\n                        }\n                    }\n                </LightBoxGallery>\n                {\n                    props.showNameRight && props.data ?\n                        <span className={`d-inline-block text-align-center headline margin-left-md text-truncate ${props.textClassName ? props.textClassName : '  '}`} style={{ ...props.textStyle, maxWidth: '80%' }} >\n                            {\n                                props.renderName ?\n                                    props.renderName(props.data)\n                                    :\n                                    props.data.name ?\n                                        props.data.name\n                                        :\n                                        `${props.data.firstName ? props.data.firstName : ''} ${props.data.lastName ? props.data.lastName : ''}`\n                            }\n                        </span>\n                        :\n                        null\n                }\n            </div>\n            <div className={`text-align-center headline ${props.textClassName ? props.textClassName : '  '}`}>\n                {\n                    props.showName && props.data && !props.showNameRight ?\n                        props.renderName ?\n                            props.renderName(props.data)\n                            :\n                            props.data.name ?\n                                props.data.name\n                                :\n                                `${props.data.firstName ? props.data.firstName : ''} ${props.data.lastName ? props.data.lastName : ''}`\n                        :\n                        null\n                }\n            </div>\n        </React.Fragment>\n    );\n}\n\n\nconst mapStateToProps = state => ({\n    app: state.app,\n    user: state.user,\n});\n\nconst mapDispatchToProps = {\n    loading: loading,\n};\nexport default connect(mapStateToProps, mapDispatchToProps)(Form.create()(withRouter(UserAvatar)));"]},"metadata":{},"sourceType":"module"}