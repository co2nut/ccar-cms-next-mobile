{"ast":null,"code":"var __jsx = React.createElement;\nimport { Col, Form, Icon, message, Row } from 'antd';\nimport _ from 'lodash';\nimport { withRouter } from 'next/router';\nimport React, { useEffect, useState } from 'react';\nimport { connect } from 'react-redux';\nimport { arrayLengthCount, notEmptyLength } from '../../common-function';\nimport client from '../../feathers';\nimport { loading } from '../../redux/actions/app-actions';\nimport { updateSellerProfile } from '../../redux/actions/sellerProfile-actions';\nimport WindowScrollLoadWrapper from '../general/WindowScrollLoadWrapper';\nimport UserPosts from './UserPosts';\nimport InfiniteScrollWrapper from '../general/InfiniteScrollWrapper';\n\nvar moment = require('moment');\n\nconst POSTSIZE = 11;\n\nconst UserCarFreakPosts = props => {\n  const {\n    0: profile,\n    1: setProfile\n  } = useState({});\n  const {\n    0: postLikes,\n    1: setPostLikes\n  } = useState([]);\n  const {\n    0: posts,\n    1: setPosts\n  } = useState([]);\n  const {\n    0: postTotal,\n    1: setPostTotal\n  } = useState(0);\n  const {\n    0: postPage,\n    1: setPostPage\n  } = useState(1);\n  const {\n    0: postLoading,\n    1: setPostLoading\n  } = useState(false);\n  useEffect(() => {\n    getUserChatLikes(_.map(posts, '_id'));\n  }, [props.user.authenticated]);\n  useEffect(() => {\n    if (_.isPlainObject(props.data) && !_.isEmpty(props.data)) {\n      setProfile(props.data);\n    } else {\n      setProfile({});\n    }\n  }, [props.data]);\n  useEffect(() => {\n    if (_.get(profile, ['_id'])) {\n      if (postPage == 1) {\n        getPosts(0);\n      } else {\n        setPostPage(1);\n      }\n    } else {\n      setPosts([]);\n      setPostTotal(0);\n      setPostPage(1);\n    }\n  }, [profile]);\n  useEffect(() => {}, [posts, postTotal, postLoading]);\n  useEffect(() => {\n    getPosts((postPage - 1) * POSTSIZE);\n  }, [postPage]);\n\n  function getPosts(skip) {\n    if (_.get(profile, ['_id'])) {\n      if (_.isNumber(skip)) {\n        skip = parseInt(skip);\n      } else {\n        skip = 0;\n      }\n\n      setPostLoading(true);\n      client.service('chats').find({\n        query: {\n          createdBy: _.get(profile, ['_id']),\n          chatType: 'carfreaks',\n          $and: [{\n            parentType: {\n              $ne: 'club'\n            }\n          }, {\n            parentType: {\n              $ne: 'clubEvent'\n            }\n          }],\n          $sort: {\n            createdAt: -1\n          },\n          $limit: POSTSIZE,\n          $populate: 'userId',\n          $skip: skip\n        }\n      }).then(res => {\n        setPostLoading(false);\n\n        if (notEmptyLength(res.data)) {\n          setPosts(postPage == 1 ? res.data : posts.concat(res.data));\n          setPostTotal(res.total);\n          getUserChatLikes(_.map(res.data, '_id'), true);\n        }\n      }).catch(err => {\n        setPostLoading(false);\n        message.error(err.message);\n      });\n    }\n  }\n\n  function getUserChatLikes(ids, concat) {\n    if (_.isArray(ids) && !_.isEmpty(ids) && _.get(props.user, ['authenticated']) && _.get(props.user, ['info', 'user', '_id'])) {\n      client.service('chatlikes').find({\n        query: {\n          chatId: {\n            $in: ids || []\n          },\n          userId: _.get(props.user, ['info', 'user', '_id'])\n        }\n      }).then(res => {\n        setPostLikes(concat ? _.concat(postLikes, res.data) : res.data);\n      });\n    }\n  }\n\n  return __jsx(Row, {\n    className: \"margin-top-md\"\n  }, __jsx(Col, {\n    xs: 24,\n    sm: 24,\n    md: 24,\n    lg: 24,\n    xl: 24\n  }, __jsx(InfiniteScrollWrapper, {\n    onScrolledBottom: () => {\n      if (arrayLengthCount(posts) < postTotal && !postLoading) {\n        setPostPage(postPage + 1);\n      }\n    },\n    hasMore: !postLoading && arrayLengthCount(posts) < postTotal\n  }, __jsx(UserPosts, {\n    posts: posts,\n    postLikes: postLikes,\n    showAddPostCard: _.get(props.user, ['authenticated']) ? _.get(profile, ['_id']) == _.get(props.user, ['info', 'user', '_id']) : false,\n    onUpdatePost: data => {\n      if (_.isPlainObject(data) && !_.isEmpty(data)) {\n        let newPosts = _.map(posts, function (post) {\n          return post._id == data._id ? data : post;\n        });\n\n        setPosts(newPosts);\n      }\n    },\n    onCreatePost: data => {\n      if (_.isPlainObject(data) && !_.isEmpty(data)) {\n        let newPosts = _.concat([data], posts);\n\n        setPosts(newPosts);\n      }\n    },\n    onUpdatePostLikes: data => {\n      if (_.isArray(data) && !_.isEmpty(data)) {\n        setPostLikes(data);\n      }\n    }\n  }))));\n};\n\nconst mapStateToProps = state => ({\n  app: state.app,\n  user: state.user,\n  sellerProfile: state.sellerProfile\n});\n\nconst mapDispatchToProps = {\n  loading: loading,\n  updateSellerProfile: updateSellerProfile\n};\nexport default connect(mapStateToProps, mapDispatchToProps)(Form.create()(withRouter(UserCarFreakPosts)));","map":{"version":3,"sources":["/Users/faraheen/ccar-cms-next-mobile/components/profile/UserCarFreakPosts.jsx"],"names":["Col","Form","Icon","message","Row","_","withRouter","React","useEffect","useState","connect","arrayLengthCount","notEmptyLength","client","loading","updateSellerProfile","WindowScrollLoadWrapper","UserPosts","InfiniteScrollWrapper","moment","require","POSTSIZE","UserCarFreakPosts","props","profile","setProfile","postLikes","setPostLikes","posts","setPosts","postTotal","setPostTotal","postPage","setPostPage","postLoading","setPostLoading","getUserChatLikes","map","user","authenticated","isPlainObject","data","isEmpty","get","getPosts","skip","isNumber","parseInt","service","find","query","createdBy","chatType","$and","parentType","$ne","$sort","createdAt","$limit","$populate","$skip","then","res","concat","total","catch","err","error","ids","isArray","chatId","$in","userId","newPosts","post","_id","mapStateToProps","state","app","sellerProfile","mapDispatchToProps","create"],"mappings":"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","sourcesContent":["import { Col, Form, Icon, message, Row } from 'antd';\nimport _ from 'lodash';\nimport { withRouter } from 'next/router';\nimport React, { useEffect, useState } from 'react';\nimport { connect } from 'react-redux';\nimport { arrayLengthCount, notEmptyLength } from '../../common-function';\nimport client from '../../feathers';\nimport { loading } from '../../redux/actions/app-actions';\nimport { updateSellerProfile } from '../../redux/actions/sellerProfile-actions';\nimport WindowScrollLoadWrapper from '../general/WindowScrollLoadWrapper';\nimport UserPosts from './UserPosts';\nimport InfiniteScrollWrapper from '../general/InfiniteScrollWrapper';\n\n\nvar moment = require('moment');\n\nconst POSTSIZE = 11;\nconst UserCarFreakPosts = (props) => {\n\n    const [profile, setProfile] = useState({})\n    const [postLikes, setPostLikes] = useState([]);\n    const [posts, setPosts] = useState([]);\n    const [postTotal, setPostTotal] = useState(0);\n    const [postPage, setPostPage] = useState(1);\n    const [postLoading, setPostLoading] = useState(false);\n\n    useEffect(() => {\n        getUserChatLikes(_.map(posts, '_id'))\n    }, [props.user.authenticated])\n\n    useEffect(() => {\n        if (_.isPlainObject(props.data) && !_.isEmpty(props.data)) {\n            setProfile(props.data);\n        } else {\n            setProfile({});\n        }\n    }, [props.data])\n\n    useEffect(() => {\n        if (_.get(profile, ['_id'])) {\n            if (postPage == 1) {\n                getPosts(0)\n            } else {\n                setPostPage(1);\n            }\n        } else {\n            setPosts([])\n            setPostTotal(0);\n            setPostPage(1);\n        }\n    }, [profile])\n\n    useEffect(() => {\n\n    }, [posts, postTotal, postLoading])\n\n    useEffect(() => {\n        getPosts((postPage - 1) * POSTSIZE);\n    }, [postPage])\n\n    function getPosts(skip) {\n        if (_.get(profile, ['_id'])) {\n            if (_.isNumber(skip)) {\n                skip = parseInt(skip)\n            } else {\n                skip = 0;\n            }\n            setPostLoading(true);\n            client.service('chats').find({\n                query: {\n                    createdBy: _.get(profile, ['_id']),\n                    chatType: 'carfreaks',\n                    $and: [\n                        {\n                            parentType: { $ne: 'club' }\n                        },\n                        {\n                            parentType: { $ne: 'clubEvent' }\n                        },\n                    ],\n                    $sort: {\n                        createdAt: -1,\n                    },\n                    $limit: POSTSIZE,\n                    $populate: 'userId',\n                    $skip: skip,\n                }\n            }).then(res => {\n                setPostLoading(false);\n                if (notEmptyLength(res.data)) {\n                    setPosts(postPage == 1 ? res.data : posts.concat(res.data));\n                    setPostTotal(res.total)\n                    getUserChatLikes(_.map(res.data, '_id'), true)\n                }\n            }).catch(err => {\n                setPostLoading(false);\n                message.error(err.message)\n            });\n        }\n    }\n\n    function getUserChatLikes(ids, concat) {\n\n        if (_.isArray(ids) && !_.isEmpty(ids) && _.get(props.user, ['authenticated']) && _.get(props.user, ['info', 'user', '_id'])) {\n            client.service('chatlikes')\n                .find({\n                    query: {\n                        chatId: {\n                            $in: ids || [],\n                        },\n                        userId: _.get(props.user, ['info', 'user', '_id'])\n                    }\n                })\n                .then((res) => {\n                    setPostLikes(concat ? _.concat(postLikes, res.data) : res.data)\n                })\n        }\n    }\n    return (\n        <Row className='margin-top-md'>\n            <Col xs={24} sm={24} md={24} lg={24} xl={24}>\n\n                <InfiniteScrollWrapper\n                    onScrolledBottom={() => {\n                        if (arrayLengthCount(posts) < postTotal && !postLoading) {\n                            setPostPage(postPage + 1);\n                        }\n                    }}\n                    hasMore={!postLoading && arrayLengthCount(posts) < postTotal}\n\n                >\n                    <UserPosts\n                        posts={posts}\n                        postLikes={postLikes}\n                        showAddPostCard={_.get(props.user, ['authenticated']) ? _.get(profile, ['_id']) == _.get(props.user, ['info', 'user', '_id']) : false}\n                        onUpdatePost={(data) => {\n                            if (_.isPlainObject(data) && !_.isEmpty(data)) {\n                                let newPosts = _.map(posts, function (post) {\n                                    return post._id == data._id ? data : post;\n                                })\n                                setPosts(newPosts); \n                            }\n                        }}\n                        onCreatePost={(data) => {\n                            if (_.isPlainObject(data) && !_.isEmpty(data)) {\n                                let newPosts = _.concat([data], posts)\n                                setPosts(newPosts);\n                            }\n                        }}\n                        onUpdatePostLikes={(data) => {\n                            if (_.isArray(data) && !_.isEmpty(data)) {\n                                setPostLikes(data);\n                            }\n                        }}\n                    />\n                </InfiniteScrollWrapper>\n            </Col>\n        </Row>\n    );\n}\n\n\nconst mapStateToProps = state => ({\n    app: state.app,\n    user: state.user,\n    sellerProfile: state.sellerProfile,\n});\n\nconst mapDispatchToProps = {\n    loading: loading,\n    updateSellerProfile: updateSellerProfile,\n};\nexport default connect(mapStateToProps, mapDispatchToProps)(Form.create()(withRouter(UserCarFreakPosts)));"]},"metadata":{},"sourceType":"module"}