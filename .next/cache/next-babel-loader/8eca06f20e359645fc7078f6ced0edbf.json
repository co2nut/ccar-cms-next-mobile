{"ast":null,"code":"var __jsx = React.createElement;\nimport { Button, Form, message, Modal } from 'antd';\nimport axios from 'axios';\nimport React, { useEffect, useState } from 'react';\nimport { connect } from 'react-redux';\nimport client from '../../feathers';\nimport { withRouter } from 'next/router';\nimport { loading, loginMode } from '../../redux/actions/app-actions';\nimport { notEmptyLength } from '../../common-function';\n\nconst RemoveReviewButton = props => {\n  const {\n    0: confirmModalState,\n    1: setConfirmModalState\n  } = useState(false);\n  const {\n    0: review,\n    1: setReview\n  } = useState({});\n  useEffect(() => {\n    client.service('rating').get(props.id).then(res => {\n      if (notEmptyLength(res)) {\n        setReview(res);\n      } else {\n        setReview({});\n      }\n    }).catch(err => {\n      message.error(err.message);\n    });\n  }, [props.id]);\n\n  function removeReview() {\n    if (props.user.authenticated && review._id) {\n      let promises = [];\n      promises.push(client.authenticate());\n      promises.push(client.service('rating').remove(review._id));\n      props.loading(true);\n\n      if (notEmptyLength(review.images)) {\n        promises.push(axios.post(`${client.io.io.uri}deleteImageS3`, {\n          params: {\n            imageUrl: review.images\n          },\n          headers: {\n            'Content-Type': 'text/xml; charset=utf-8',\n            'Content-Length': 'length'\n          }\n        }));\n      }\n\n      if (notEmptyLength(review.videos)) {\n        promises.push(axios.post(`${client.io.io.uri}deleteVideoS3`, {\n          params: {\n            videoUrl: review.videos\n          },\n          headers: {\n            'Content-Type': 'text/xml; charset=utf-8',\n            'Content-Length': 'length'\n          }\n        }));\n      }\n\n      Promise.all(promises).then(responses => {\n        props.loading(false);\n        message.success('Review removed.');\n\n        if (props.handleSuccess) {\n          props.handleSuccess(responses[1]);\n        }\n      }).catch(err => {\n        props.loading(false);\n\n        if (props.handleError) {\n          props.handleError(err);\n        }\n\n        message.error(err.message);\n      });\n    } else {\n      props.loginMode(true);\n      message.error('Please login to remove this review.');\n\n      if (props.handleError) {\n        props.handleError({\n          message: 'Please login to remove this review.'\n        });\n      }\n    }\n  }\n\n  return __jsx(\"span\", {\n    className: props.className ? props.className : null,\n    style: props.style ? props.style : null\n  }, __jsx(Modal, {\n    visible: confirmModalState,\n    title: \"Are you sure?\",\n    maskClosable: true,\n    centered: true,\n    onOk: e => {\n      removeReview();\n      setConfirmModalState(false);\n    },\n    onCancel: e => {\n      setConfirmModalState(false);\n    }\n  }, __jsx(\"div\", null, \"Do you want to remove this review?\")), __jsx(\"a\", {\n    onClick: () => {\n      setConfirmModalState(true);\n    }\n  }, props.button ? props.button() : __jsx(Button, {\n    type: \"danger\",\n    icon: \"delete\"\n  }, \"Remove post\")));\n};\n\nconst mapStateToProps = state => ({\n  app: state.app,\n  user: state.user\n});\n\nconst mapDispatchToProps = {\n  loginMode: loginMode,\n  loading: loading\n};\nexport default connect(mapStateToProps, mapDispatchToProps)(Form.create()(withRouter(RemoveReviewButton)));","map":{"version":3,"sources":["/Users/faraheen/ccar-cms-next-mobile/components/rating/RemoveReviewButton.jsx"],"names":["Button","Form","message","Modal","axios","React","useEffect","useState","connect","client","withRouter","loading","loginMode","notEmptyLength","RemoveReviewButton","props","confirmModalState","setConfirmModalState","review","setReview","service","get","id","then","res","catch","err","error","removeReview","user","authenticated","_id","promises","push","authenticate","remove","images","post","io","uri","params","imageUrl","headers","videos","videoUrl","Promise","all","responses","success","handleSuccess","handleError","className","style","e","button","mapStateToProps","state","app","mapDispatchToProps","create"],"mappings":"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","sourcesContent":["import { Button, Form, message, Modal } from 'antd';\nimport axios from 'axios';\nimport React, { useEffect, useState } from 'react';\nimport { connect } from 'react-redux';\nimport client from '../../feathers';\nimport { withRouter } from 'next/router';\nimport { loading, loginMode } from '../../redux/actions/app-actions';\nimport { notEmptyLength } from '../../common-function';\n\n\n\nconst RemoveReviewButton = (props) => {\n\n\n    const [confirmModalState, setConfirmModalState] = useState(false);\n    const [review, setReview] = useState({});\n\n    useEffect(() => {\n        client.service('rating').get(props.id).then(res => {\n            if (notEmptyLength(res)) {\n                setReview(res);\n            } else {\n                setReview({});\n            }\n        }).catch(err => {\n            message.error(err.message)\n        });\n    }, [props.id])\n\n\n    function removeReview() {\n\n        if (props.user.authenticated && review._id) {\n\n\n            let promises = [];\n\n            promises.push(client.authenticate());\n\n            promises.push(client.service('rating').remove(review._id));\n\n            props.loading(true);\n            if (notEmptyLength(review.images)) {\n\n                promises.push(axios.post(`${client.io.io.uri}deleteImageS3`,\n                    {\n                        params: {\n                            imageUrl: review.images\n                        },\n                        headers: {\n                            'Content-Type': 'text/xml; charset=utf-8',\n                            'Content-Length': 'length'\n                        }\n                    }\n                ));\n            }\n\n            if (notEmptyLength(review.videos)) {\n\n                promises.push(axios.post(`${client.io.io.uri}deleteVideoS3`,\n                    {\n                        params: {\n                            videoUrl: review.videos\n                        },\n                        headers: {\n                            'Content-Type': 'text/xml; charset=utf-8',\n                            'Content-Length': 'length'\n                        }\n                    }\n                ));\n            }\n\n            Promise.all(promises).then(responses => {\n                props.loading(false);\n                message.success('Review removed.');\n                if (props.handleSuccess) {\n                    props.handleSuccess(responses[1]);\n                }\n            }).catch(err => {\n                props.loading(false);\n                if (props.handleError) {\n                    props.handleError(err);\n                }\n                message.error(err.message)\n            });\n\n        } else {\n            props.loginMode(true);\n            message.error('Please login to remove this review.');\n            if (props.handleError) {\n                props.handleError({ message: 'Please login to remove this review.' });\n            }\n        }\n    }\n\n    return (\n\n        <span className={props.className ? props.className : null} style={props.style ? props.style : null}>\n            <Modal\n                visible={confirmModalState}\n                title=\"Are you sure?\"\n                maskClosable={true}\n                centered={true}\n                onOk={(e) => { removeReview(); setConfirmModalState(false); }}\n                onCancel={(e) => { setConfirmModalState(false) }}\n            >\n                <div>\n                    Do you want to remove this review?\n                </div>\n            </Modal>\n\n\n            <a onClick={() => {\n                setConfirmModalState(true);\n            }}>\n\n                {\n                    props.button ?\n                        props.button()\n                        :\n                        <Button type=\"danger\" icon=\"delete\">\n                            Remove post\n                        </Button>\n                }\n            </a>\n\n        </span>\n    );\n}\n\n\nconst mapStateToProps = state => ({\n    app: state.app,\n    user: state.user,\n});\nconst mapDispatchToProps = {\n    loginMode: loginMode,\n    loading: loading,\n};\nexport default connect(mapStateToProps, mapDispatchToProps)(Form.create()(withRouter(RemoveReviewButton)));"]},"metadata":{},"sourceType":"module"}