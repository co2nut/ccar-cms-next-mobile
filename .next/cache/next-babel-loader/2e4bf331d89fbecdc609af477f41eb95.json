{"ast":null,"code":"var __jsx = React.createElement;\nimport { Button, Col, Empty, Form, Icon, message, Row } from 'antd';\nimport _ from 'lodash';\nimport React, { useEffect, useState } from 'react';\nimport { connect } from 'react-redux';\nimport client from '../../feathers';\nimport SocialBoardCard from '../carFreak/components/social-board-card';\nimport WritePostModal from '../carFreak/components/write-post-modal';\nimport { arrayLengthCount, notEmptyLength } from '../../common-function';\nimport WindowScrollLoadWrapper from '../general/WindowScrollLoadWrapper';\nimport { loading } from '../../redux/actions/app-actions';\nimport { withRouter } from 'next/router';\nimport InfiniteScrollWrapper from '../general/InfiniteScrollWrapper';\n\nvar moment = require('moment');\n\nconst POSTSIZE = 11;\n\nconst UserSocialBoard = props => {\n  const {\n    0: profile,\n    1: setProfile\n  } = useState({});\n  const {\n    0: posts,\n    1: setPosts\n  } = useState([]);\n  const {\n    0: postTotal,\n    1: setPostTotal\n  } = useState(0);\n  const {\n    0: postPage,\n    1: setPostPage\n  } = useState(1);\n  const {\n    0: postLoading,\n    1: setPostLoading\n  } = useState(false);\n  const {\n    0: editMode,\n    1: setEditMode\n  } = useState();\n  const {\n    0: writeModalVisible,\n    1: setWriteModalVisible\n  } = useState(false);\n  const {\n    0: selectedPost,\n    1: setSelectedPost\n  } = useState({});\n  useEffect(() => {\n    if (_.isPlainObject(props.data) && !_.isEmpty(props.data)) {\n      setProfile(props.data);\n    } else {\n      setProfile({});\n    }\n  }, [props.data]);\n  useEffect(() => {\n    if (_.get(profile, ['_id'])) {\n      if (postPage == 1) {\n        getPosts(0);\n      } else {\n        setPostPage(1);\n      }\n    } else {\n      setPosts([]);\n      setPostTotal(0);\n      setPostPage(1);\n    }\n  }, [profile]);\n  useEffect(() => {\n    getPosts((postPage - 1) * POSTSIZE);\n  }, [postPage]);\n  useEffect(() => {}, [posts, postLoading, postTotal]);\n\n  function getPosts(skip) {\n    if (_.get(profile, ['_id'])) {\n      if (_.isNumber(skip)) {\n        skip = parseInt(skip);\n      } else {\n        skip = 0;\n      }\n\n      setPostLoading(true);\n      client.service('chats').find({\n        query: {\n          createdBy: _.get(profile, ['_id']),\n          chatType: 'socialboard',\n          $and: [{\n            parentType: {\n              $ne: 'club'\n            }\n          }, {\n            parentType: {\n              $ne: 'clubEvent'\n            }\n          }],\n          $sort: {\n            createdAt: -1\n          },\n          $limit: POSTSIZE,\n          $populate: 'userId',\n          $skip: skip\n        }\n      }).then(res => {\n        setPostLoading(false);\n\n        if (notEmptyLength(res.data)) {\n          setPosts(postPage == 1 ? res.data : posts.concat(res.data));\n        }\n\n        setPostTotal(res.total);\n      }).catch(err => {\n        setPostLoading(false);\n        message.error(err.message);\n      });\n    }\n  }\n\n  function confirmDelete(v) {\n    if (v._id) {\n      client.service('chats').remove(v._id).then(res => {\n        message.success('Record Deleted');\n        handleRemoveSocialBoardPost(v);\n      }).catch(err => {\n        console.log('Unable to delete Chat.');\n      });\n    }\n  }\n\n  function handleSocialBoardPostChange(post) {\n    let newPosts = _.map(posts, function (chat) {\n      return chat._id == _.get(post, ['_id']) ? post : chat;\n    });\n\n    setPosts(newPosts);\n  }\n\n  function handleSocialBoardAddPost(post) {\n    if (_.isPlainObject(post) && !_.isEmpty(post)) {\n      let newPosts = _.concat([post], posts);\n\n      setPosts(newPosts);\n    }\n  }\n\n  function handleRemoveSocialBoardPost(post) {\n    let newPosts = _.filter(posts, function (chat) {\n      return chat._id != _.get(post, ['_id']);\n    });\n\n    setPosts(newPosts);\n  }\n\n  return __jsx(Row, {\n    className: `${props.className || ''}`\n  }, _.get(props.user, ['info', 'user', '_id']) && _.get(props.user, ['info', 'user', '_id']) == _.get(profile, ['_id']) ? __jsx(Col, {\n    xs: 24,\n    sm: 24,\n    md: 24,\n    lg: 24,\n    xl: 24,\n    className: \"margin-bottom-md\"\n  }, __jsx(\"div\", {\n    className: \"flex-justify-end flex-items-align-center\"\n  }, __jsx(\"span\", {\n    className: \"d-inline-block margin-right-md\"\n  }, __jsx(Button, {\n    size: \"medium\",\n    className: \"border-ccar-yellow\",\n    onClick: e => {\n      setEditMode(null);\n      setWriteModalVisible(true);\n      setSelectedPost(null);\n    }\n  }, __jsx(Icon, {\n    type: \"edit\"\n  }), \" Write a Post\")))) : null, __jsx(Col, {\n    xs: 24,\n    sm: 24,\n    md: 24,\n    lg: 24,\n    xl: 24\n  }, __jsx(InfiniteScrollWrapper, {\n    onScrolledBottom: () => {\n      if (arrayLengthCount(posts) < postTotal) {\n        setPostPage(postPage + 1);\n      }\n    },\n    hasMore: !postLoading && arrayLengthCount(posts) < postTotal\n  }, _.isArray(posts) && !_.isEmpty(posts) ? __jsx(Row, {\n    gutter: [10, 20],\n    className: \"padding-md\"\n  }, _.map(posts, function (post) {\n    return __jsx(Col, {\n      xs: 24,\n      sm: 24,\n      md: 24,\n      lg: 24,\n      xl: 24\n    }, __jsx(SocialBoardCard, {\n      data: post,\n      redirectPost: true,\n      onEditClick: post => {\n        setWriteModalVisible(true);\n        setSelectedPost(post);\n        setEditMode('edit');\n      },\n      onRemoveClick: post => {\n        confirmDelete(post);\n      }\n    }));\n  })) : __jsx(Empty, null))), __jsx(WritePostModal, {\n    currentRecord: selectedPost,\n    editMode: editMode,\n    hideImage: true,\n    chatType: 'socialboard',\n    visibleMode: writeModalVisible,\n    onUpdatePost: data => {\n      handleSocialBoardPostChange(data);\n    },\n    onCreatePost: data => {\n      handleSocialBoardAddPost(data);\n    },\n    changeVisibleMode: v => {\n      setWriteModalVisible(v);\n\n      if (!v) {\n        setSelectedPost({});\n      }\n    }\n  }));\n};\n\nconst mapStateToProps = state => ({\n  app: state.app,\n  user: state.user,\n  sellerProfile: state.sellerProfile\n});\n\nconst mapDispatchToProps = {\n  loading: loading\n};\nexport default connect(mapStateToProps, mapDispatchToProps)(Form.create()(withRouter(UserSocialBoard)));","map":{"version":3,"sources":["/Users/faraheen/ccar-cms-next-mobile/components/profile/UserSocialBoard.jsx"],"names":["Button","Col","Empty","Form","Icon","message","Row","_","React","useEffect","useState","connect","client","SocialBoardCard","WritePostModal","arrayLengthCount","notEmptyLength","WindowScrollLoadWrapper","loading","withRouter","InfiniteScrollWrapper","moment","require","POSTSIZE","UserSocialBoard","props","profile","setProfile","posts","setPosts","postTotal","setPostTotal","postPage","setPostPage","postLoading","setPostLoading","editMode","setEditMode","writeModalVisible","setWriteModalVisible","selectedPost","setSelectedPost","isPlainObject","data","isEmpty","get","getPosts","skip","isNumber","parseInt","service","find","query","createdBy","chatType","$and","parentType","$ne","$sort","createdAt","$limit","$populate","$skip","then","res","concat","total","catch","err","error","confirmDelete","v","_id","remove","success","handleRemoveSocialBoardPost","console","log","handleSocialBoardPostChange","post","newPosts","map","chat","handleSocialBoardAddPost","filter","className","user","e","isArray","mapStateToProps","state","app","sellerProfile","mapDispatchToProps","create"],"mappings":"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","sourcesContent":["import { Button, Col, Empty, Form, Icon, message, Row } from 'antd';\nimport _ from 'lodash';\nimport React, { useEffect, useState } from 'react';\nimport { connect } from 'react-redux';\nimport client from '../../feathers';\nimport SocialBoardCard from '../carFreak/components/social-board-card';\nimport WritePostModal from '../carFreak/components/write-post-modal';\nimport { arrayLengthCount, notEmptyLength } from '../../common-function';\nimport WindowScrollLoadWrapper from '../general/WindowScrollLoadWrapper';\nimport { loading } from '../../redux/actions/app-actions';\nimport { withRouter } from 'next/router';\nimport InfiniteScrollWrapper from '../general/InfiniteScrollWrapper';\n\n\n\nvar moment = require('moment');\n\nconst POSTSIZE = 11;\nconst UserSocialBoard = (props) => {\n\n    const [profile, setProfile] = useState({})\n    const [posts, setPosts] = useState([]);\n    const [postTotal, setPostTotal] = useState(0);\n    const [postPage, setPostPage] = useState(1);\n    const [postLoading, setPostLoading] = useState(false);\n\n\n    const [editMode, setEditMode] = useState()\n    const [writeModalVisible, setWriteModalVisible] = useState(false)\n    const [selectedPost, setSelectedPost] = useState({})\n\n    useEffect(() => {\n        if (_.isPlainObject(props.data) && !_.isEmpty(props.data)) {\n            setProfile(props.data);\n        } else {\n            setProfile({});\n        }\n    }, [props.data])\n\n    useEffect(() => {\n        if (_.get(profile, ['_id'])) {\n            if (postPage == 1) {\n                getPosts(0)\n            } else {\n                setPostPage(1);\n            }\n        } else {\n            setPosts([])\n            setPostTotal(0);\n            setPostPage(1);\n        }\n    }, [profile])\n\n\n    useEffect(() => {\n        getPosts((postPage - 1) * POSTSIZE);\n    }, [postPage])\n\n    useEffect(() => { \n    \n    } , [posts, postLoading, postTotal])\n\n    function getPosts(skip) {\n        if (_.get(profile, ['_id'])) {\n            if (_.isNumber(skip)) {\n                skip = parseInt(skip)\n            } else {\n                skip = 0;\n            }\n            setPostLoading(true);\n            client.service('chats').find({\n                query: {\n                    createdBy: _.get(profile, ['_id']),\n                    chatType: 'socialboard',\n                    $and: [\n                        {\n                            parentType: { $ne: 'club' }\n                        },\n                        {\n                            parentType: { $ne: 'clubEvent' }\n                        },\n                    ],\n                    $sort: {\n                        createdAt: -1,\n                    },\n                    $limit: POSTSIZE,\n                    $populate: 'userId',\n                    $skip: skip,\n                }\n            }).then(res => {\n                setPostLoading(false);\n                if (notEmptyLength(res.data)) {\n                    setPosts(postPage == 1 ? res.data : posts.concat(res.data));\n                }\n                setPostTotal(res.total)\n            }).catch(err => {\n                setPostLoading(false);\n                message.error(err.message)\n            });\n        }\n    }\n\n    function confirmDelete(v) {\n        if (v._id) {\n            client.service('chats')\n                .remove(v._id).then((res) => {\n                    message.success('Record Deleted')\n                    handleRemoveSocialBoardPost(v)\n                }).catch((err) => {\n                    console.log('Unable to delete Chat.');\n                })\n        }\n\n    }\n\n    function handleSocialBoardPostChange(post) {\n        let newPosts = _.map(posts, function (chat) {\n            return chat._id == _.get(post, ['_id']) ? post : chat;\n        });\n\n        setPosts(newPosts);\n    }\n\n    function handleSocialBoardAddPost(post) {\n        if (_.isPlainObject(post) && !_.isEmpty(post)) {\n            let newPosts = _.concat([post], posts)\n            setPosts(newPosts);\n        }\n    }\n\n    function handleRemoveSocialBoardPost(post) {\n        let newPosts = _.filter(posts, function (chat) {\n            return chat._id != _.get(post, ['_id']);\n        });\n\n        setPosts(newPosts);\n    }\n\n    return (\n        <Row className={`${props.className || ''}`}>\n            {\n                _.get(props.user, ['info', 'user', '_id']) && _.get(props.user, ['info', 'user', '_id']) == _.get(profile, ['_id']) ?\n                    <Col xs={24} sm={24} md={24} lg={24} xl={24} className=\"margin-bottom-md\">\n                        <div className=\"flex-justify-end flex-items-align-center\">\n                            <span className='d-inline-block margin-right-md' >\n                                <Button size=\"medium\" className=\"border-ccar-yellow\" onClick={(e) => {\n                                    setEditMode(null);\n                                    setWriteModalVisible(true);\n                                    setSelectedPost(null);\n                                }}  ><Icon type=\"edit\" /> Write a Post</Button>\n                            </span>\n                        </div>\n                    </Col>\n                    :\n                    null\n            }\n\n            <Col xs={24} sm={24} md={24} lg={24} xl={24}>\n                <InfiniteScrollWrapper\n                    onScrolledBottom={() => {\n                        if (arrayLengthCount(posts) < postTotal) {\n                            setPostPage(postPage + 1);\n                        }\n                    }}\n                    hasMore={!postLoading && arrayLengthCount(posts) < postTotal}\n                >\n                    {\n                        _.isArray(posts) && !_.isEmpty(posts) ?\n                            <Row gutter={[10, 20]} className=\"padding-md\">\n                                {\n                                    _.map(posts, function (post) {\n                                        return <Col xs={24} sm={24} md={24} lg={24} xl={24}>\n                                            <SocialBoardCard data={post} redirectPost\n                                                onEditClick={(post) => {\n                                                    setWriteModalVisible(true);\n                                                    setSelectedPost(post);\n                                                    setEditMode('edit');\n                                                }}\n\n                                                onRemoveClick={(post) => {\n                                                    confirmDelete(post)\n                                                }}\n                                            />\n                                        </Col>\n\n                                    })\n                                }\n                            </Row>\n                            :\n                            <Empty></Empty>\n                    }\n                </InfiniteScrollWrapper>\n            </Col>\n\n            <WritePostModal\n                currentRecord={selectedPost}\n                editMode={editMode}\n                hideImage\n                chatType={'socialboard'}\n                visibleMode={writeModalVisible}\n                onUpdatePost={(data) => {\n                    handleSocialBoardPostChange(data)\n                }}\n                onCreatePost={(data) => {\n                    handleSocialBoardAddPost(data)\n                }}\n                changeVisibleMode={(v) => {\n                    setWriteModalVisible(v);\n                    if (!v) {\n                        setSelectedPost({});\n                    }\n                }} />\n        </Row>\n    );\n}\n\n\nconst mapStateToProps = state => ({\n    app: state.app,\n    user: state.user,\n    sellerProfile: state.sellerProfile,\n});\n\nconst mapDispatchToProps = {\n    loading: loading,\n};\nexport default connect(mapStateToProps, mapDispatchToProps)(Form.create()(withRouter(UserSocialBoard)));"]},"metadata":{},"sourceType":"module"}