{"ast":null,"code":"// import { Col, Form, Radio } from 'antd';\n// import _ from 'lodash';\n// import React, { useEffect, useState } from 'react';\n// import { connect } from 'react-redux';\n// import { withRouter } from 'react-router-dom';\n// import { clearProductFilterOptions, fetchProductFilterOptions } from '../../../../actions/productsList-actions';\n// import { bodyTypeList } from '../../params/bodyTypeList';\n// import { colorList } from '../../params/colorList';\n// import { fuelTypeList } from '../../params/fuelTypeList';\n// import { notEmptyLength, numberToFixed } from '../profile/common-function';\n// const modals = ['make', 'model', 'state', 'area', 'bodyType', 'fuelType'];\n// const optionsFields = ['transmission', 'businessType', 'item', 'make', 'model', 'state', 'area', 'year', 'price', 'mileage', 'engineCapacity', 'bodyType', 'item', 'fuelType'];\n// let inputRefs = {};\n// for (let index = 0; index < optionsFields.length; index++) {\n//   inputRefs[optionsFields[index] + 'Ref'] = React.createRef();\n// }\n// const ARRAY_SEPERATOR = '|'\n// const engineCapacityOptions = [[1, '<'], [1, 1.6], [1.6, 2.2], [2.2, 2.6], [2.6, 3.0], [3.0, 4.0], [4.0, '>='],\n// ]\n// const mileageOptions = [[10, '<'], [20, ''], [30, ''], [40, ''], [50, ''], [60, ''], [70, ''], [80, ''], [90, ''], [100, '>=']\n// ]\n// const DetailFilterForm = (props) => {\n//   const [options, setOptions] = useState({});\n//   const [filterGroup, setFilterGroup] = useState({});\n//   const [urlSearch, setUrlSearch] = useState({});\n//   const activeCircle =(marginLeft)=> (<div style={{width:10, height:10, background:\"rgb(251, 176, 66)\", marginTop:2, ...marginLeft, borderRadius:5, border: 'solid 1px #DEDEDE', }}/>) \n//   useEffect(() => {\n//     if(props.location.search){\n//       if( decodeURIComponent(props.location.search).split('&')[1] ){\n//         setUrlSearch( JSON.parse(decodeURIComponent(props.location.search).split('&')[1].split('=')[1]) )\n//       }\n//     }\n//   },[props.location.search])\n//   useEffect(() => {\n//   },[urlSearch])\n//   useEffect(() => {\n//     if (_.isPlainObject(props.options) && !_.isEmpty(props.options)) {\n//       setOptions(props.options)\n//     } else {\n//       setOptions({});\n//     }\n//   }, [props.options]);\n//   const _renderColorList = () => {\n//     let data = colorList;\n//     let chosenData = []\n//     if (_.isArray(_.get(options, ['colorList'])) && !_.isEmpty(_.get(options, ['colorList']))) {\n//       chosenData = _.compact(_.map(colorList, function (item) {\n//         return _.find(_.get(options, ['colorList']), function (item1) {\n//           return _.toLower(item1.value) == _.toLower(item.value)\n//         }) ? item : null;\n//       }))\n//     } \n//     if(chosenData.length > 0){\n//       data = chosenData\n//     }\n//     if (_.isArray(data) && !_.isEmpty(data)) {\n//       return (_.map(data, function (item, index) {\n//         return (\n//           <>\n//           {index === 0?(\n//             <span onClick={(e) => { if (props.onChange) { props.onChange({ color: 'all' }) } }}>\n//               <div style={{ backgroundColor: 'red', \n//                background: '-webkit-linear-gradient(left, orange , yellow, green, cyan, blue, violet)', \n//                background: '-o-linear-gradient(right, orange, yellow, green, cyan, blue, violet)',\n//                background: '-moz-linear-gradient(right, orange, yellow, green, cyan, blue, violet)', \n//                background: 'linear-gradient(to right, orange , yellow, green, cyan, blue, violet)',\n//                 // backgroundImage: 'linear-gradient(to right, red, orange, yellow, green, blue, indigo, violet)', \n//               width: 20, height: 20, display: 'inline-block', margin: '0px 6px', verticalAlign: 'middle', border: 'solid 1px #DEDEDE', borderRadius: '50%' }} />\n//             </span>\n//           ):null}\n//           <span onClick={(e) => {\n//             if (props.onChange) {\n//               props.onChange({ color: _.toLower(item.value) })\n//             }\n//           }}>\n//             <div style={{ width: 20, height: 20, background: item.code, display: 'inline-block', margin: '0px 6px', verticalAlign: 'middle', border: 'solid 1px #DEDEDE', borderRadius: '50%' }} />\n//             {_.isEqual(urlSearch.color,item.value)?(activeCircle({marginLeft:8.5})):null}\n//           </span>\n//           </>\n//         )\n//       }))\n//     } else {\n//       return null;\n//     }\n//   }\n//   const _renderBodyTypeList = () => {\n//     let data = bodyTypeList;\n//     if (_.isArray(_.get(options, ['bodyTypeList'])) && !_.isEmpty(_.get(options, ['bodyTypeList']))) {\n//       data = _.compact(_.map(bodyTypeList, function (item) {\n//         return _.find(_.get(options, ['bodyTypeList']), function (item1) {\n//           return _.toLower(item1.value) == _.toLower(item.value)\n//         }) ? item : null;\n//       }))\n//     }\n//     if (_.isArray(data) && !_.isEmpty(data)) {\n//       return (_.map(data, function (item) {\n//         return (\n//           <Col span={4} onClick={(e) => {\n//             if (props.onChange) {\n//               props.onChange({ bodyType: _.toLower(item.value) })\n//             }\n//           }}>\n//             <img className=\"w-100\" style={{ width: '80%', height: '100%', border: 'none' }} src={item.icon} />\n//             {_.isEqual(urlSearch.bodyType,item.value.toLowerCase())?(activeCircle({marginTop:-10,marginLeft:14.5})):null}\n//           </Col>\n//         )\n//       }))\n//     } else {\n//       return null;\n//     }\n//   }\n//   const _renderFuelTypeList = () => {\n//     let data = fuelTypeList;\n//     if (_.isArray(_.get(options, ['fuelTypeList'])) && !_.isEmpty(_.get(options, ['fuelTypeList']))) {\n//       data = _.compact(_.map(fuelTypeList, function (item) {\n//         return _.find(_.get(options, ['fuelTypeList']), function (item1) {\n//           return _.toLower(item1.value) == _.toLower(item.value)\n//         }) ? item : null;\n//       }))\n//     }\n//     if (_.isArray(data) && !_.isEmpty(data)) {\n//       return (_.map(data, function (item) {\n//         return (\n//           <Col span={4} onClick={(e) => {\n//             if (props.onChange) {\n//               props.onChange({ fuelType: _.toLower(item.value) })\n//             }\n//           }}>\n//             <img className=\"w-100\" style={{ width: '80%', height: '100%', border: 'none' }} src={item.icon} />\n//             {_.isEqual(urlSearch.fuelType,item.value.toLowerCase())?(activeCircle({marginLeft:14.5})):null}\n//           </Col>\n//         )\n//       }))\n//     } else {\n//       return null;\n//     }\n//   }\n//   return (\n//     <React.Fragment>\n//       <div className=\"padding-y-md\">\n//         <p style={{ marginBottom: '0px' }}>Transmission</p>\n//         <Form.Item style={{ margin: '0px', padding: '2px 2px 0px 0px' }}>\n//           <Radio.Group className=\"w-100 condition-form\" style={{ textAlign: 'left' }} onChange={(e) => {\n//             if (props.onChange) {\n//               props.onChange({ transmission: _.toLower(e.target.value) })\n//             }\n//           }}>\n//             <span>\n//               <Radio.Button value=\"\">\n//                 <p> All </p>\n//               </Radio.Button>\n//             </span>\n//             <span className=\"padding-x-sm\">\n//               <Radio.Button value=\"automatic\">\n//                 <p> Automatic </p>\n//               </Radio.Button>\n//             </span>\n//             <span>\n//               <Radio.Button value=\"manual\">\n//                 <p> Manual</p>\n//               </Radio.Button>\n//             </span>\n//           </Radio.Group>\n//         </Form.Item>\n//       </div>\n//       <div className=\"padding-y-md\">\n//         <p style={{ marginBottom: '0px' }}>Color</p>\n//         <Form.Item style={{ margin: '0px', padding: '2px 2px 0px 0px' }}>\n//           <div className=\"scroller-type d-flex\" style={{ overflow: 'scroll' }}>\n//             { _renderColorList() }\n//           </div>\n//         </Form.Item>\n//       </div>\n//       <div className=\"padding-y-md\">\n//         <p style={{ marginBottom: '0px' }}>Mileage</p>\n//         <Form.Item style={{ margin: '0px', padding: '2px 2px 0px 0px' }}>\n//           <div className=\"scroller-type\" style={{ overflow: 'scroll', height:'48px' }}>\n//             <div style={{width:'200%'}}>\n//             {\n//               _.map(mileageOptions, function (mileage) {\n//                 return (\n//                   <Radio.Button value={notEmptyLength(mileage) ? mileage.join(ARRAY_SEPERATOR) : ''} onClick={(e) => {\n//                     if (props.onChange) {\n//                       props.onChange({ mileageRange: mileage })\n//                     }\n//                   }}>\n//                     {\n//                       mileage[1] || mileage[1] == '<' || mileage[1] == '<=' ?\n//                         `< ${numberToFixed(mileage[0], true, 1)}`\n//                         :\n//                         mileage[1] == '==' ?\n//                           `Equal ${numberToFixed(mileage[0], true, 1)}`\n//                           :\n//                           mileage[1] == '>' || mileage[1] == '>=' ?\n//                             `More Than ${numberToFixed(mileage[0], true, 1)}`\n//                             :\n//                             `${numberToFixed(mileage[0], true, 1)} ${numberToFixed(mileage[1], true, 1)} `\n//                     }\n//                     {_.isEqual(urlSearch.mileageRange,mileage)?(activeCircle({marginLeft:14.5})):null}\n//                   </Radio.Button>\n//                 )\n//               })\n//             }\n//             </div>\n//           </div>\n//         </Form.Item>\n//       </div>\n//       <div className=\"padding-y-md\">\n//         <p style={{ marginBottom: '0px' }}>Body Type</p>\n//         <Form.Item style={{ margin: '0px', padding: '2px 2px 0px 0px' }}>\n//           <div className=\"scroller-type d-flex\" style={{ overflow: 'scroll' }}>\n//             {\n//               _renderBodyTypeList()\n//             }\n//           </div>\n//         </Form.Item>\n//       </div>\n//       <div className=\"padding-y-md\">\n//         <p style={{ marginBottom: '0px' }}>Fuel Type</p>\n//         <Form.Item style={{ margin: '0px', padding: '2px 2px 0px 0px' }}>\n//           {\n//             _renderFuelTypeList()\n//           }\n//         </Form.Item>\n//       </div>\n//       <div className=\"padding-y-md\">\n//         <p style={{ marginBottom: '0px' }}>Engine Size (CC)</p>\n//         <Form.Item style={{ margin: '0px', padding: '2px 2px 0px 0px' }}>\n//           <div className=\"scroller-type\" style={{ overflow: 'scroll' }}>\n//             <div style={{width:'200%', height:'50px'}}>\n//             {\n//               _.map(engineCapacityOptions, function (engineCapacity) {\n//                 return (\n//                   <Radio.Button onClick={(e) => {\n//                     if (props.onChange) {\n//                       props.onChange({ engineCapacityRange: engineCapacity })\n//                     }\n//                   }} value={notEmptyLength(engineCapacity) ? engineCapacity.join(ARRAY_SEPERATOR) : ''}>\n//                     {\n//                       !engineCapacity[1] || engineCapacity[1] == '<' || engineCapacity[1] == '<=' ?\n//                         `< ${numberToFixed(engineCapacity[0], true, 1)}`\n//                         :\n//                         engineCapacity[1] == '==' ?\n//                           `= ${numberToFixed(engineCapacity[0], true, 1)}`\n//                           :\n//                           engineCapacity[1] == '>' || engineCapacity[1] == '>=' ?\n//                             `> ${numberToFixed(engineCapacity[0], true, 1)}`\n//                             :\n//                             `${numberToFixed(engineCapacity[0], true, 1)} - ${numberToFixed(engineCapacity[1], true, 1)} `\n//                     }\n//                     {_.isEqual(urlSearch.engineCapacityRange,engineCapacity)?(activeCircle({marginLeft:14.5})):null}\n//                   </Radio.Button>\n//                 )\n//               })\n//             }\n//             </div>\n//           </div>\n//         </Form.Item>\n//       </div>\n//     </React.Fragment>\n//   );\n// }\n// const mapStateToProps = state => ({\n//   app: state.app,\n//   productsList: state.productsList,\n// });\n// const mapDispatchToProps = {\n//   fetchProductFilterOptions,\n//   clearProductFilterOptions,\n// };\n// export default connect(mapStateToProps, mapDispatchToProps)(Form.create()(withRouter(DetailFilterForm)));","map":{"version":3,"sources":["/Users/faraheen/ccar-cms-next-mobile/components/product-list/DetailFilterForm.jsx"],"names":[],"mappingssourcesContent":["// import { Col, Form, Radio } from 'antd';\n// import _ from 'lodash';\n// import React, { useEffect, useState } from 'react';\n// import { connect } from 'react-redux';\n// import { withRouter } from 'react-router-dom';\n// import { clearProductFilterOptions, fetchProductFilterOptions } from '../../../../actions/productsList-actions';\n// import { bodyTypeList } from '../../params/bodyTypeList';\n// import { colorList } from '../../params/colorList';\n// import { fuelTypeList } from '../../params/fuelTypeList';\n// import { notEmptyLength, numberToFixed } from '../profile/common-function';\n\n// const modals = ['make', 'model', 'state', 'area', 'bodyType', 'fuelType'];\n// const optionsFields = ['transmission', 'businessType', 'item', 'make', 'model', 'state', 'area', 'year', 'price', 'mileage', 'engineCapacity', 'bodyType', 'item', 'fuelType'];\n// let inputRefs = {};\n// for (let index = 0; index < optionsFields.length; index++) {\n//   inputRefs[optionsFields[index] + 'Ref'] = React.createRef();\n// }\n\n// const ARRAY_SEPERATOR = '|'\n\n// const engineCapacityOptions = [[1, '<'], [1, 1.6], [1.6, 2.2], [2.2, 2.6], [2.6, 3.0], [3.0, 4.0], [4.0, '>='],\n// ]\n\n// const mileageOptions = [[10, '<'], [20, ''], [30, ''], [40, ''], [50, ''], [60, ''], [70, ''], [80, ''], [90, ''], [100, '>=']\n// ]\n\n\n// const DetailFilterForm = (props) => {\n  \n//   const [options, setOptions] = useState({});\n//   const [filterGroup, setFilterGroup] = useState({});\n//   const [urlSearch, setUrlSearch] = useState({});\n  \n//   const activeCircle =(marginLeft)=> (<div style={{width:10, height:10, background:\"rgb(251, 176, 66)\", marginTop:2, ...marginLeft, borderRadius:5, border: 'solid 1px #DEDEDE', }}/>) \n\n//   useEffect(() => {\n//     if(props.location.search){\n//       if( decodeURIComponent(props.location.search).split('&')[1] ){\n//         setUrlSearch( JSON.parse(decodeURIComponent(props.location.search).split('&')[1].split('=')[1]) )\n//       }\n//     }\n//   },[props.location.search])\n  \n//   useEffect(() => {\n//   },[urlSearch])\n\n//   useEffect(() => {\n//     if (_.isPlainObject(props.options) && !_.isEmpty(props.options)) {\n//       setOptions(props.options)\n//     } else {\n//       setOptions({});\n//     }\n\n//   }, [props.options]);\n\n\n//   const _renderColorList = () => {\n//     let data = colorList;\n//     let chosenData = []\n\n//     if (_.isArray(_.get(options, ['colorList'])) && !_.isEmpty(_.get(options, ['colorList']))) {\n//       chosenData = _.compact(_.map(colorList, function (item) {\n//         return _.find(_.get(options, ['colorList']), function (item1) {\n//           return _.toLower(item1.value) == _.toLower(item.value)\n//         }) ? item : null;\n//       }))\n//     } \n    \n//     if(chosenData.length > 0){\n//       data = chosenData\n//     }\n\n//     if (_.isArray(data) && !_.isEmpty(data)) {\n//       return (_.map(data, function (item, index) {\n        \n//         return (\n//           <>\n//           {index === 0?(\n//             <span onClick={(e) => { if (props.onChange) { props.onChange({ color: 'all' }) } }}>\n//               <div style={{ backgroundColor: 'red', \n//                background: '-webkit-linear-gradient(left, orange , yellow, green, cyan, blue, violet)', \n//                background: '-o-linear-gradient(right, orange, yellow, green, cyan, blue, violet)',\n//                background: '-moz-linear-gradient(right, orange, yellow, green, cyan, blue, violet)', \n//                background: 'linear-gradient(to right, orange , yellow, green, cyan, blue, violet)',\n//                 // backgroundImage: 'linear-gradient(to right, red, orange, yellow, green, blue, indigo, violet)', \n//               width: 20, height: 20, display: 'inline-block', margin: '0px 6px', verticalAlign: 'middle', border: 'solid 1px #DEDEDE', borderRadius: '50%' }} />\n//             </span>\n//           ):null}\n//           <span onClick={(e) => {\n//             if (props.onChange) {\n//               props.onChange({ color: _.toLower(item.value) })\n//             }\n//           }}>\n//             <div style={{ width: 20, height: 20, background: item.code, display: 'inline-block', margin: '0px 6px', verticalAlign: 'middle', border: 'solid 1px #DEDEDE', borderRadius: '50%' }} />\n//             {_.isEqual(urlSearch.color,item.value)?(activeCircle({marginLeft:8.5})):null}\n//           </span>\n//           </>\n//         )\n//       }))\n//     } else {\n//       return null;\n//     }\n//   }\n\n//   const _renderBodyTypeList = () => {\n//     let data = bodyTypeList;\n\n//     if (_.isArray(_.get(options, ['bodyTypeList'])) && !_.isEmpty(_.get(options, ['bodyTypeList']))) {\n//       data = _.compact(_.map(bodyTypeList, function (item) {\n//         return _.find(_.get(options, ['bodyTypeList']), function (item1) {\n//           return _.toLower(item1.value) == _.toLower(item.value)\n//         }) ? item : null;\n//       }))\n//     }\n\n//     if (_.isArray(data) && !_.isEmpty(data)) {\n//       return (_.map(data, function (item) {\n//         return (\n//           <Col span={4} onClick={(e) => {\n//             if (props.onChange) {\n//               props.onChange({ bodyType: _.toLower(item.value) })\n//             }\n//           }}>\n//             <img className=\"w-100\" style={{ width: '80%', height: '100%', border: 'none' }} src={item.icon} />\n//             {_.isEqual(urlSearch.bodyType,item.value.toLowerCase())?(activeCircle({marginTop:-10,marginLeft:14.5})):null}\n//           </Col>\n//         )\n//       }))\n//     } else {\n//       return null;\n//     }\n//   }\n\n//   const _renderFuelTypeList = () => {\n//     let data = fuelTypeList;\n\n//     if (_.isArray(_.get(options, ['fuelTypeList'])) && !_.isEmpty(_.get(options, ['fuelTypeList']))) {\n//       data = _.compact(_.map(fuelTypeList, function (item) {\n//         return _.find(_.get(options, ['fuelTypeList']), function (item1) {\n//           return _.toLower(item1.value) == _.toLower(item.value)\n//         }) ? item : null;\n//       }))\n//     }\n\n//     if (_.isArray(data) && !_.isEmpty(data)) {\n//       return (_.map(data, function (item) {\n//         return (\n//           <Col span={4} onClick={(e) => {\n//             if (props.onChange) {\n//               props.onChange({ fuelType: _.toLower(item.value) })\n//             }\n//           }}>\n//             <img className=\"w-100\" style={{ width: '80%', height: '100%', border: 'none' }} src={item.icon} />\n//             {_.isEqual(urlSearch.fuelType,item.value.toLowerCase())?(activeCircle({marginLeft:14.5})):null}\n//           </Col>\n//         )\n//       }))\n//     } else {\n//       return null;\n//     }\n//   }\n\n\n//   return (\n//     <React.Fragment>\n//       <div className=\"padding-y-md\">\n//         <p style={{ marginBottom: '0px' }}>Transmission</p>\n//         <Form.Item style={{ margin: '0px', padding: '2px 2px 0px 0px' }}>\n//           <Radio.Group className=\"w-100 condition-form\" style={{ textAlign: 'left' }} onChange={(e) => {\n//             if (props.onChange) {\n//               props.onChange({ transmission: _.toLower(e.target.value) })\n//             }\n//           }}>\n//             <span>\n//               <Radio.Button value=\"\">\n//                 <p> All </p>\n//               </Radio.Button>\n//             </span>\n//             <span className=\"padding-x-sm\">\n//               <Radio.Button value=\"automatic\">\n//                 <p> Automatic </p>\n//               </Radio.Button>\n//             </span>\n//             <span>\n//               <Radio.Button value=\"manual\">\n//                 <p> Manual</p>\n//               </Radio.Button>\n//             </span>\n//           </Radio.Group>\n//         </Form.Item>\n//       </div>\n\n//       <div className=\"padding-y-md\">\n//         <p style={{ marginBottom: '0px' }}>Color</p>\n//         <Form.Item style={{ margin: '0px', padding: '2px 2px 0px 0px' }}>\n//           <div className=\"scroller-type d-flex\" style={{ overflow: 'scroll' }}>\n//             { _renderColorList() }\n//           </div>\n//         </Form.Item>\n//       </div>\n\n//       <div className=\"padding-y-md\">\n//         <p style={{ marginBottom: '0px' }}>Mileage</p>\n//         <Form.Item style={{ margin: '0px', padding: '2px 2px 0px 0px' }}>\n//           <div className=\"scroller-type\" style={{ overflow: 'scroll', height:'48px' }}>\n//             <div style={{width:'200%'}}>\n//             {\n//               _.map(mileageOptions, function (mileage) {\n//                 return (\n//                   <Radio.Button value={notEmptyLength(mileage) ? mileage.join(ARRAY_SEPERATOR) : ''} onClick={(e) => {\n//                     if (props.onChange) {\n//                       props.onChange({ mileageRange: mileage })\n//                     }\n//                   }}>\n//                     {\n//                       mileage[1] || mileage[1] == '<' || mileage[1] == '<=' ?\n//                         `< ${numberToFixed(mileage[0], true, 1)}`\n//                         :\n//                         mileage[1] == '==' ?\n//                           `Equal ${numberToFixed(mileage[0], true, 1)}`\n//                           :\n//                           mileage[1] == '>' || mileage[1] == '>=' ?\n//                             `More Than ${numberToFixed(mileage[0], true, 1)}`\n//                             :\n//                             `${numberToFixed(mileage[0], true, 1)} ${numberToFixed(mileage[1], true, 1)} `\n//                     }\n//                     {_.isEqual(urlSearch.mileageRange,mileage)?(activeCircle({marginLeft:14.5})):null}\n//                   </Radio.Button>\n//                 )\n//               })\n//             }\n//             </div>\n//           </div>\n//         </Form.Item>\n//       </div>\n\n//       <div className=\"padding-y-md\">\n//         <p style={{ marginBottom: '0px' }}>Body Type</p>\n//         <Form.Item style={{ margin: '0px', padding: '2px 2px 0px 0px' }}>\n//           <div className=\"scroller-type d-flex\" style={{ overflow: 'scroll' }}>\n//             {\n//               _renderBodyTypeList()\n//             }\n//           </div>\n//         </Form.Item>\n//       </div>\n\n//       <div className=\"padding-y-md\">\n//         <p style={{ marginBottom: '0px' }}>Fuel Type</p>\n//         <Form.Item style={{ margin: '0px', padding: '2px 2px 0px 0px' }}>\n//           {\n//             _renderFuelTypeList()\n//           }\n//         </Form.Item>\n//       </div>\n\n//       <div className=\"padding-y-md\">\n//         <p style={{ marginBottom: '0px' }}>Engine Size (CC)</p>\n//         <Form.Item style={{ margin: '0px', padding: '2px 2px 0px 0px' }}>\n//           <div className=\"scroller-type\" style={{ overflow: 'scroll' }}>\n//             <div style={{width:'200%', height:'50px'}}>\n//             {\n//               _.map(engineCapacityOptions, function (engineCapacity) {\n//                 return (\n//                   <Radio.Button onClick={(e) => {\n//                     if (props.onChange) {\n//                       props.onChange({ engineCapacityRange: engineCapacity })\n//                     }\n//                   }} value={notEmptyLength(engineCapacity) ? engineCapacity.join(ARRAY_SEPERATOR) : ''}>\n//                     {\n//                       !engineCapacity[1] || engineCapacity[1] == '<' || engineCapacity[1] == '<=' ?\n//                         `< ${numberToFixed(engineCapacity[0], true, 1)}`\n//                         :\n//                         engineCapacity[1] == '==' ?\n//                           `= ${numberToFixed(engineCapacity[0], true, 1)}`\n//                           :\n//                           engineCapacity[1] == '>' || engineCapacity[1] == '>=' ?\n//                             `> ${numberToFixed(engineCapacity[0], true, 1)}`\n//                             :\n//                             `${numberToFixed(engineCapacity[0], true, 1)} - ${numberToFixed(engineCapacity[1], true, 1)} `\n//                     }\n//                     {_.isEqual(urlSearch.engineCapacityRange,engineCapacity)?(activeCircle({marginLeft:14.5})):null}\n//                   </Radio.Button>\n//                 )\n//               })\n//             }\n//             </div>\n//           </div>\n//         </Form.Item>\n//       </div>\n\n//     </React.Fragment>\n//   );\n// }\n\n// const mapStateToProps = state => ({\n//   app: state.app,\n//   productsList: state.productsList,\n// });\n\n// const mapDispatchToProps = {\n//   fetchProductFilterOptions,\n//   clearProductFilterOptions,\n// };\n\n// export default connect(mapStateToProps, mapDispatchToProps)(Form.create()(withRouter(DetailFilterForm)));"]},"metadata":{},"sourceType":"script"}