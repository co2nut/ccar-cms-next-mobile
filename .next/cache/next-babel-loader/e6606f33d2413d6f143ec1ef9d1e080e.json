{"ast":null,"code":"import _slicedToArray from \"@babel/runtime/helpers/esm/slicedToArray\";\n\nvar _s = $RefreshSig$();\n\nvar __jsx = React.createElement;\nimport { Button, Form, message, Modal } from 'antd';\nimport _ from 'lodash';\nimport { withRouter } from 'next/dist/client/router';\nimport React, { useEffect, useState } from 'react';\nimport { connect } from 'react-redux';\nimport { loading, loginMode } from '../../../redux/actions/app-actions';\nimport { notEmptyLength } from '../../../common-function';\nimport client from '../../../feathers';\n\nvar SavePostButton = function SavePostButton(props) {\n  _s();\n\n  var _useState = useState([]),\n      savedPost = _useState[0],\n      setSavedPost = _useState[1];\n\n  var _useState2 = useState(false),\n      confirmModalState = _useState2[0],\n      setConfirmModalState = _useState2[1];\n\n  var _useState3 = useState(false),\n      isSaved = _useState3[0],\n      setIsSaved = _useState3[1];\n\n  useEffect(function () {\n    init();\n  }, [props.userId, props.chatId]);\n\n  function init() {\n    if (props.userId && props.chatId) {\n      var query = {};\n      query.chatId = props.chatId;\n      query.userId = props.userId;\n      client.service('savedpost').find({\n        query: query\n      }).then(function (res) {\n        if (notEmptyLength(res.data)) {\n          setSavedPost(res.data[0]);\n          setIsSaved(true);\n        } else {\n          setSavedPost(null);\n          setIsSaved(false);\n        }\n      })[\"catch\"](function (err) {// message.error(err.message)\n      });\n    }\n  }\n\n  function handleSuccess(success) {\n    setConfirmModalState(false);\n\n    if (props.handleSuccess) {\n      props.handleSuccess(success);\n    }\n\n    if (props.notify && _.get(success, ['type']) == 'remove') {\n      message.success('Unsaved Post.');\n    }\n\n    if (props.notify && _.get(success, ['type']) == 'save') {\n      message.success('Saved Post.');\n    }\n  }\n\n  function handleError(error) {\n    setConfirmModalState(false);\n\n    if (props.handleError) {\n      props.handleError(error);\n    }\n\n    if (props.notify && _.get(error, ['message'])) {\n      message.success(error.message);\n    }\n  }\n\n  function handleSubmit() {\n    if (props.userId && props.chatId) {\n      var promises = [];\n      promises.push(client.authenticate());\n\n      if (!isSaved) {\n        var data = {};\n        data.userId = props.userId;\n        data.chatId = props.chatId;\n        promises.push(client.service('savedpost').create(data));\n      } else {\n        promises.push(client.service('savedpost').remove(savedPost._id));\n      } //Write in savedPost model\n\n\n      Promise.all(promises).then(function (_ref) {\n        var _ref2 = _slicedToArray(_ref, 2),\n            auth = _ref2[0],\n            savedPostRes = _ref2[1];\n\n        props.loading(false);\n        handleSuccess({\n          type: isSaved ? 'remove' : 'save',\n          data: savedPostRes\n        });\n        init();\n      })[\"catch\"](function (error) {\n        handleError({\n          message: \"Submit SavePost Failed\"\n        });\n      });\n    } else {\n      handleError({\n        message: \"Unable to save post!\"\n      });\n    }\n  }\n\n  ;\n\n  function handleChange() {\n    if (!props.userId) {\n      props.loginMode(true);\n      handleError({\n        message: 'Please login to save the savedPost.'\n      });\n      return null;\n    }\n\n    if (!props.chatId) {\n      handleError({\n        message: 'Post not found!'\n      });\n      return null;\n    }\n\n    if (isSaved) {\n      setConfirmModalState(true);\n    } else {\n      handleSubmit();\n    }\n  }\n\n  return __jsx(\"span\", {\n    className: props.className ? props.className : null,\n    style: props.style ? props.style : null\n  }, __jsx(Modal, {\n    visible: confirmModalState,\n    title: \"Are you sure?\",\n    maskClosable: true,\n    centered: true,\n    onOk: function onOk(e) {\n      handleSubmit();\n      setConfirmModalState(false);\n    },\n    onCancel: function onCancel(e) {\n      setConfirmModalState(false);\n    }\n  }, __jsx(\"div\", null, \"Do you want to unsave this post?\")), isSaved ? __jsx(\"a\", {\n    onClick: function onClick() {\n      return props.readOnly ? null : handleChange();\n    }\n  }, props.savedButton ? props.savedButton() : __jsx(Button, {\n    style: {\n      color: '#F57F17'\n    }\n  }, \"Saved\")) : __jsx(\"a\", {\n    onClick: function onClick() {\n      return props.readOnly ? null : handleChange();\n    }\n  }, props.saveButton ? props.saveButton() : __jsx(Button, null, \"Save\")));\n};\n\n_s(SavePostButton, \"eT/M3Zf2o+MAi9Dd1fcKfG8ULg0=\");\n\n_c = SavePostButton;\n\nvar mapStateToProps = function mapStateToProps(state) {\n  return {\n    app: state.app,\n    user: state.user\n  };\n};\n\nvar mapDispatchToProps = {\n  loginMode: loginMode,\n  loading: loading\n};\nexport default connect(mapStateToProps, mapDispatchToProps)(Form.create()(withRouter(SavePostButton)));\n\nvar _c;\n\n$RefreshReg$(_c, \"SavePostButton\");","map":{"version":3,"sources":["/Users/faraheen/ccar-cms-next-mobile/components/carFreak/components/save-post-button.jsx"],"names":["Button","Form","message","Modal","_","withRouter","React","useEffect","useState","connect","loading","loginMode","notEmptyLength","client","SavePostButton","props","savedPost","setSavedPost","confirmModalState","setConfirmModalState","isSaved","setIsSaved","init","userId","chatId","query","service","find","then","res","data","err","handleSuccess","success","notify","get","handleError","error","handleSubmit","promises","push","authenticate","create","remove","_id","Promise","all","auth","savedPostRes","type","handleChange","className","style","e","readOnly","savedButton","color","saveButton","mapStateToProps","state","app","user","mapDispatchToProps"],"mappings":"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","sourcesContent":["import { Button, Form, message, Modal } from 'antd';\nimport _ from 'lodash';\nimport { withRouter } from 'next/dist/client/router';\nimport React, { useEffect, useState } from 'react';\nimport { connect } from 'react-redux';\nimport { loading, loginMode } from '../../../redux/actions/app-actions';\nimport { notEmptyLength } from '../../../common-function';\nimport client from '../../../feathers';\n\n\n\nconst SavePostButton = (props) => {\n\n\n    const [savedPost, setSavedPost] = useState([]);\n    const [confirmModalState, setConfirmModalState] = useState(false);\n    const [isSaved, setIsSaved] = useState(false);\n\n    useEffect(() => {\n        init();\n    }, [props.userId, props.chatId])\n\n    function init() {\n        if (props.userId && props.chatId) {\n            let query = {};\n            query.chatId = props.chatId;\n            query.userId = props.userId;\n\n            client.service('savedpost').find({\n                query: query\n            }).then(res => {\n                if (notEmptyLength(res.data)) {\n                    setSavedPost(res.data[0])\n                    setIsSaved(true);\n                } else {\n                    setSavedPost(null)\n                    setIsSaved(false);\n                }\n            }).catch(err => {\n                // message.error(err.message)\n            });\n        }\n    }\n\n    function handleSuccess(success) {\n        setConfirmModalState(false);\n        if (props.handleSuccess) {\n            props.handleSuccess(success);\n        }\n\n        if (props.notify && _.get(success, ['type']) == 'remove') {\n            message.success('Unsaved Post.');\n        }\n\n        if (props.notify && _.get(success, ['type']) == 'save') {\n            message.success('Saved Post.');\n        }\n    }\n\n\n    function handleError(error) {\n        setConfirmModalState(false);\n        if (props.handleError) {\n            props.handleError(error);\n        }\n        if (props.notify && _.get(error , ['message'])) {\n            message.success(error.message);\n        }\n    }\n\n    function handleSubmit() {\n        if (props.userId && props.chatId) {\n            let promises = [];\n            promises.push(client.authenticate());\n            if (!isSaved) {\n                let data = {}\n                data.userId = props.userId;\n                data.chatId = props.chatId;\n                promises.push(client.service('savedpost').create(data))\n            } else {\n                promises.push(client.service('savedpost').remove(savedPost._id))\n            }\n\n            //Write in savedPost model\n            Promise.all(promises).then(([auth, savedPostRes]) => {\n                props.loading(false);\n                handleSuccess({\n                    type: isSaved ? 'remove' : 'save',\n                    data: savedPostRes\n                });\n\n                init();\n\n            }).catch(error => {\n                handleError({ message: \"Submit SavePost Failed\" })\n            })\n        } else {\n            handleError({ message: \"Unable to save post!\" })\n\n        }\n\n\n    };\n\n    function handleChange() {\n\n        if (!props.userId) {\n            props.loginMode(true);\n            handleError({ message: 'Please login to save the savedPost.' });\n            return null;\n        }\n\n        if (!props.chatId) {\n            handleError({ message: 'Post not found!' });\n            return null;\n        }\n\n        if (isSaved) {\n            setConfirmModalState(true);\n        } else {\n            handleSubmit();\n        }\n\n    }\n\n\n\n    return (\n\n        <span className={props.className ? props.className : null} style={props.style ? props.style : null}>\n            <Modal\n                visible={confirmModalState}\n                title=\"Are you sure?\"\n                maskClosable={true}\n                centered={true}\n                onOk={(e) => { handleSubmit(); setConfirmModalState(false); }}\n                onCancel={(e) => { setConfirmModalState(false) }}\n            >\n                <div>\n                    Do you want to unsave this post?\n                </div>\n            </Modal>\n\n            {\n                isSaved ?\n                    <a onClick={() => props.readOnly ? null : handleChange()}>\n                        {\n                            props.savedButton ?\n                                props.savedButton()\n                                :\n                                <Button style={{ color: '#F57F17' }}>Saved</Button>\n                        }\n                    </a>\n                    :\n                    <a onClick={() => props.readOnly ? null : handleChange()}>\n                        {\n                            props.saveButton ?\n                                props.saveButton()\n                                :\n                                <Button>Save</Button>\n                        }\n                    </a>\n            }\n\n        </span>\n    );\n}\n\n\nconst mapStateToProps = state => ({\n    app: state.app,\n    user: state.user,\n});\nconst mapDispatchToProps = {\n    loginMode: loginMode,\n    loading: loading,\n};\nexport default connect(mapStateToProps, mapDispatchToProps)(Form.create()(withRouter(SavePostButton)));"]},"metadata":{},"sourceType":"module"}