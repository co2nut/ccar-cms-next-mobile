{"ast":null,"code":"var _s = $RefreshSig$();\n\nvar __jsx = React.createElement;\nimport { Form, Icon } from 'antd';\nimport React, { useEffect, useState } from 'react';\nimport { connect } from 'react-redux';\nimport { v4 } from 'uuid';\nimport { isValidNumber } from '../../common-function';\nimport { withRouter } from 'next/router';\nimport InfiniteScroll from 'react-infinite-scroller';\nvar uid = v4();\nvar containerRef = {};\ncontainerRef[uid] = React.createRef();\nvar triggerFunction;\n\nvar InfiniteScrollWrapper = function InfiniteScrollWrapper(props) {\n  _s();\n\n  var _useState = useState(true),\n      htmlWindow = _useState[0],\n      setHtmlWindow = _useState[1];\n\n  useEffect(function () {\n    if (window) {\n      setHtmlWindow(window);\n    }\n  }, []);\n  return __jsx(React.Fragment, null, __jsx(InfiniteScroll, {\n    loadMore: function loadMore() {\n      if (props.onScrolledBottom) {\n        clearTimeout(triggerFunction);\n        triggerFunction = setTimeout(function () {\n          props.onScrolledBottom();\n        }, 500);\n      }\n    },\n    hasMore: props.hasMore != null ? props.hasMore : true,\n    useWindow: props.useWindow == false ? false : true,\n    loader: __jsx(\"div\", {\n      className: \"width-100 flex-justify-center\",\n      style: {\n        height: 50\n      }\n    }, __jsx(Icon, {\n      type: \"loading\",\n      style: {\n        fontSize: 50\n      }\n    })),\n    threshold: (htmlWindow.innerHeight || 500) * 0.5\n  }, props.children));\n};\n\n_s(InfiniteScrollWrapper, \"u6fZLMDSf2ty4qZlg8z/vP/IJK0=\");\n\n_c = InfiniteScrollWrapper;\n\nvar mapStateToProps = function mapStateToProps(state) {\n  return {\n    app: state.app,\n    user: state.user\n  };\n};\n\nvar mapDispatchToProps = {};\nexport default connect(mapStateToProps, mapDispatchToProps)(Form.create()(withRouter(InfiniteScrollWrapper)));\n\nvar _c;\n\n$RefreshReg$(_c, \"InfiniteScrollWrapper\");","map":{"version":3,"sources":["/Users/faraheen/ccar-cms-next-mobile/components/general/InfiniteScrollWrapper.jsx"],"names":["Form","Icon","React","useEffect","useState","connect","v4","isValidNumber","withRouter","InfiniteScroll","uid","containerRef","createRef","triggerFunction","InfiniteScrollWrapper","props","htmlWindow","setHtmlWindow","window","onScrolledBottom","clearTimeout","setTimeout","hasMore","useWindow","height","fontSize","innerHeight","children","mapStateToProps","state","app","user","mapDispatchToProps","create"],"mappings":";;;AAAA,SAASA,IAAT,EAAeC,IAAf,QAA2B,MAA3B;AACA,OAAOC,KAAP,IAAgBC,SAAhB,EAA2BC,QAA3B,QAA2C,OAA3C;AACA,SAASC,OAAT,QAAwB,aAAxB;AACA,SAASC,EAAT,QAAmB,MAAnB;AACA,SAASC,aAAT,QAA8B,uBAA9B;AACA,SAASC,UAAT,QAA2B,aAA3B;AACA,OAAOC,cAAP,MAA2B,yBAA3B;AAGA,IAAIC,GAAG,GAAGJ,EAAE,EAAZ;AACA,IAAIK,YAAY,GAAG,EAAnB;AACAA,YAAY,CAACD,GAAD,CAAZ,GAAoBR,KAAK,CAACU,SAAN,EAApB;AAEA,IAAIC,eAAJ;;AACA,IAAMC,qBAAqB,GAAG,SAAxBA,qBAAwB,CAACC,KAAD,EAAW;AAAA;;AAErC,kBAAoCX,QAAQ,CAAC,IAAD,CAA5C;AAAA,MAAOY,UAAP;AAAA,MAAmBC,aAAnB;;AAEAd,EAAAA,SAAS,CAAC,YAAM;AACZ,QAAIe,MAAJ,EAAY;AACRD,MAAAA,aAAa,CAACC,MAAD,CAAb;AACH;AACJ,GAJQ,EAIN,EAJM,CAAT;AAMA,SACI,MAAC,KAAD,CAAO,QAAP,QACI,MAAC,cAAD;AACI,IAAA,QAAQ,EAAE,oBAAM;AACZ,UAAIH,KAAK,CAACI,gBAAV,EAA4B;AACxBC,QAAAA,YAAY,CAACP,eAAD,CAAZ;AACAA,QAAAA,eAAe,GAAGQ,UAAU,CAAC,YAAM;AAC/BN,UAAAA,KAAK,CAACI,gBAAN;AACH,SAF2B,EAEzB,GAFyB,CAA5B;AAGH;AACJ,KARL;AASI,IAAA,OAAO,EAAEJ,KAAK,CAACO,OAAN,IAAiB,IAAjB,GAAwBP,KAAK,CAACO,OAA9B,GAAwC,IATrD;AAUI,IAAA,SAAS,EAAEP,KAAK,CAACQ,SAAN,IAAmB,KAAnB,GAA2B,KAA3B,GAAmC,IAVlD;AAWI,IAAA,MAAM,EACF;AAAK,MAAA,SAAS,EAAC,+BAAf;AAA+C,MAAA,KAAK,EAAE;AAAEC,QAAAA,MAAM,EAAE;AAAV;AAAtD,OACI,MAAC,IAAD;AAAM,MAAA,IAAI,EAAC,SAAX;AAAqB,MAAA,KAAK,EAAE;AAAEC,QAAAA,QAAQ,EAAE;AAAZ;AAA5B,MADJ,CAZR;AAgBI,IAAA,SAAS,EAAE,CAACT,UAAU,CAACU,WAAX,IAA0B,GAA3B,IAAkC;AAhBjD,KAkBKX,KAAK,CAACY,QAlBX,CADJ,CADJ;AAwBH,CAlCD;;GAAMb,qB;;KAAAA,qB;;AAqCN,IAAMc,eAAe,GAAG,SAAlBA,eAAkB,CAAAC,KAAK;AAAA,SAAK;AAC9BC,IAAAA,GAAG,EAAED,KAAK,CAACC,GADmB;AAE9BC,IAAAA,IAAI,EAAEF,KAAK,CAACE;AAFkB,GAAL;AAAA,CAA7B;;AAKA,IAAMC,kBAAkB,GAAG,EAA3B;AAEA,eAAe3B,OAAO,CAACuB,eAAD,EAAkBI,kBAAlB,CAAP,CAA6ChC,IAAI,CAACiC,MAAL,GAAczB,UAAU,CAACM,qBAAD,CAAxB,CAA7C,CAAf","sourcesContent":["import { Form, Icon } from 'antd';\nimport React, { useEffect, useState } from 'react';\nimport { connect } from 'react-redux';\nimport { v4 } from 'uuid';\nimport { isValidNumber } from '../../common-function';\nimport { withRouter } from 'next/router';\nimport InfiniteScroll from 'react-infinite-scroller';\n\n\nlet uid = v4();\nlet containerRef = {};\ncontainerRef[uid] = React.createRef();\n\nlet triggerFunction;\nconst InfiniteScrollWrapper = (props) => {\n\n    const [htmlWindow, setHtmlWindow] = useState(true);\n\n    useEffect(() => {\n        if (window) {\n            setHtmlWindow(window);\n        }\n    }, [])\n\n    return (\n        <React.Fragment>\n            <InfiniteScroll\n                loadMore={() => {\n                    if (props.onScrolledBottom) {\n                        clearTimeout(triggerFunction)\n                        triggerFunction = setTimeout(() => {\n                            props.onScrolledBottom();\n                        }, 500);\n                    }\n                }}\n                hasMore={props.hasMore != null ? props.hasMore : true}\n                useWindow={props.useWindow == false ? false : true}\n                loader={\n                    <div className=\"width-100 flex-justify-center\" style={{ height: 50 }}>\n                        <Icon type=\"loading\" style={{ fontSize: 50 }} />\n                    </div>\n                }\n                threshold={(htmlWindow.innerHeight || 500) * 0.5}\n            >\n                {props.children}\n            </InfiniteScroll>\n        </React.Fragment>\n    );\n}\n\n\nconst mapStateToProps = state => ({\n    app: state.app,\n    user: state.user,\n});\n\nconst mapDispatchToProps = {\n};\nexport default connect(mapStateToProps, mapDispatchToProps)(Form.create()(withRouter(InfiniteScrollWrapper)));"]},"metadata":{},"sourceType":"module"}