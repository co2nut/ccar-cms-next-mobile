{"ast":null,"code":"var __jsx = React.createElement;\n\nfunction ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); if (enumerableOnly) { symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; }); } keys.push.apply(keys, symbols); } return keys; }\n\nfunction _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; if (i % 2) { ownKeys(Object(source), true).forEach(function (key) { _defineProperty(target, key, source[key]); }); } else if (Object.getOwnPropertyDescriptors) { Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)); } else { ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } } return target; }\n\nfunction _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }\n\nimport { CloseOutlined } from '@ant-design/icons';\nimport { Card, Col, Empty, Form, Icon, Input, Modal, Row } from 'antd';\nimport _ from 'lodash';\nimport React, { useEffect, useState } from 'react';\nimport Scrollbars from 'react-custom-scrollbars';\nimport Highlighter from 'react-highlight-words';\nimport { connect } from 'react-redux';\nimport { withRouter } from 'next/dist/client/router';\nimport { formatNumber, isValidNumber, notEmptyLength } from '../../../common-function';\nimport Loading from '../../general/Loading';\nconst modelModalSearchRef = React.createRef();\n\nconst ModelModal = props => {\n  const {\n    0: options,\n    1: setOptions\n  } = useState([]);\n  const {\n    0: filteredOptions,\n    1: setFilteredOptions\n  } = useState([]);\n  const {\n    0: searchKeyword,\n    1: setSearchKeyword\n  } = useState('');\n  useEffect(() => {\n    if (props.options != null && _.isArray(props.options) && notEmptyLength(props.options)) {\n      let uniqBodyTypes = _.cloneDeep(_.uniqBy(props.options, 'bodyType').map((v, i) => {\n        v.data = [];\n        return v;\n      }));\n\n      uniqBodyTypes = uniqBodyTypes.map(v => {\n        props.options.map(v1 => {\n          if (v.bodyType == v1.bodyType) {\n            v.data.push(v1);\n          }\n        });\n        v.data = _.reverse(_.sortBy(v.data, ['count', 'model']));\n        return v;\n      });\n      setOptions(uniqBodyTypes);\n    } else {\n      setOptions([]);\n    }\n  }, [props.options]);\n  useEffect(() => {\n    if (props.visible == true && modelModalSearchRef.current) {\n      modelModalSearchRef.current.focus();\n    }\n\n    if (!props.visible) {\n      setSearchKeyword('');\n    }\n  }, [props.visible, modelModalSearchRef.current]);\n  useEffect(() => {\n    if (searchKeyword) {\n      let keyword = new RegExp(searchKeyword, 'i');\n\n      let temp = _.cloneDeep(options).filter(function (item) {\n        item.data = item.data.filter(function (item1) {\n          return keyword.test(item1.model) && item1.count > 0;\n        });\n        return notEmptyLength(item.data);\n      });\n\n      setFilteredOptions(temp);\n    } else {\n      setFilteredOptions(options);\n    }\n  }, [options, searchKeyword]);\n\n  const selectedValue = (item, alphaIndex, index) => {\n    if (props.onChange) {\n      props.onChange(item, alphaIndex, index);\n    }\n  };\n\n  return __jsx(React.Fragment, null, __jsx(Modal, {\n    closable: props.closable != null ? props.closable ? true : false : false,\n    maskClosable: props.maskClosable != null ? props.maskClosable ? true : false : false,\n    visible: props.visible != null ? props.visible ? true : false : false,\n    style: _objectSpread({}, props.style),\n    onCancel: props.onCancel,\n    className: `${props.className ? props.className : ''}`,\n    width: props.width ? props.width : '100%',\n    id: props.id ? props.id : 'model-modal',\n    zIndex: isValidNumber(parseInt(props.zIndex)) ? parseInt(props.zIndex) : 1000,\n    footer: null\n  }, __jsx(Card, {\n    bordered: false,\n    title: props.title ? props.title : \"Select Car Model\",\n    size: \"small\",\n    style: {\n      zIndex: 1001\n    }\n  }, __jsx(Loading, {\n    spinning: props.loading\n  }, __jsx(Row, null, __jsx(Col, {\n    xs: 24,\n    sm: 24,\n    md: 24,\n    lg: 24,\n    xl: 24\n  }, __jsx(\"div\", {\n    className: \"thin-border round-border-big padding-sm\"\n  }, __jsx(Input, {\n    ref: modelModalSearchRef,\n    autoFocus: true,\n    value: searchKeyword,\n    onChange: e => {\n      setSearchKeyword(e.target.value);\n    },\n    className: \"no-border-input\",\n    size: \"small\",\n    compact: true,\n    suffix: searchKeyword ? __jsx(CloseOutlined, {\n      className: \"cursor-pointer\",\n      onClick: e => {\n        setSearchKeyword('');\n      }\n    }) : __jsx(Icon, {\n      type: \"search\"\n    }),\n    placeholder: \"Search Here...\"\n  })))), __jsx(Row, {\n    gutter: [15, 15]\n  }, __jsx(Col, {\n    className: \"gutter-row\",\n    xs: 0,\n    sm: 0,\n    md: 24,\n    lg: 24,\n    xl: 24\n  }, __jsx(Scrollbars, {\n    autoHide: true,\n    autoHeight: true,\n    autoHeightMax: _.get(props, ['bodyStyle', 'maxHeight']) || 500\n  }, __jsx(\"div\", null, filteredOptions.length > 0 ? filteredOptions.map((item, index) => {\n    return __jsx(\"div\", {\n      style: {\n        margin: '10px 0px'\n      },\n      key: index\n    }, __jsx(\"p\", {\n      className: \"font-weight-bold black\",\n      style: {\n        fontSize: '16px',\n        textAlign: 'left',\n        textTransform: 'capitalize'\n      }\n    }, item.bodyType), item.data.map((v, i) => {\n      return __jsx(\"div\", {\n        className: \"flex-justify-space-between flex-items-align-center cursor-pointer\",\n        key: i,\n        onClick: () => selectedValue(v.model, index, i)\n      }, __jsx(\"span\", {\n        className: \"flex-justify-start flex-items-align-center width-70 padding-right-md\"\n      }, __jsx(\"img\", {\n        className: \"obj-fit-c margin-right-md\",\n        style: {\n          width: 50,\n          height: 50\n        },\n        src: v.uri\n      }), __jsx(\"span\", {\n        className: \"d-inline-block text-overflow-break uppercase\"\n      }, __jsx(Highlighter, {\n        style: {\n          textTransform: 'uppercase',\n          textOverflow: 'break-word'\n        },\n        highlightStyle: {\n          backgroundColor: '#ffc069',\n          padding: 0\n        },\n        searchWords: [searchKeyword],\n        autoEscape: true,\n        textToHighlight: v.model\n      }))), __jsx(\"span\", {\n        className: \"d-inline-block width-30 text-align-right\"\n      }, `(${isValidNumber(v.count) ? formatNumber(v.count, null, false, 0, true) : 0})`)) // <Row\n      //     // gutter={[10, 10]} \n      //     className={_.toLower(props.selectedValue) == _.toLower(v.model) ? \"selectedRow\" : \"selectRow\"}\n      //     onClick={() => selectedValue(v.model, index, i)}\n      //     style={{ height: '5em', lineHeight: '5em' }}>\n      //     <Col span={8} style={{ height: '100%', padding: 5, lineHeight: 0 }}>\n      //         <img className=\"w-100 h-100 obj-fit-c\" src={v.uri} />\n      //     </Col>\n      //     <Col span={10} style={{ height: '100%' }}>\n      //     </Col>\n      //     <Col span={4} style={{ height: '100%' }}>\n      //         <div className=\"fill-parent flex-justify-end flex-items-align-center\">\n      //         </div>\n      //     </Col>\n      // </Row>\n      ;\n    }));\n  }) : __jsx(\"div\", {\n    style: {\n      height: '100%'\n    }\n  }, __jsx(Empty, {\n    style: {\n      position: 'relative'\n    },\n    image: \"/empty.png\",\n    imageStyle: {\n      height: 60\n    },\n    description: __jsx(\"span\", null, props.loading ? 'Getting Result' : 'No Result')\n  }))))))))));\n};\n\nconst mapStateToProps = state => ({\n  productsList: state.productsList,\n  app: state.app\n});\n\nconst mapDispatchToProps = {};\nexport default connect(mapStateToProps, mapDispatchToProps)(Form.create()(withRouter(ModelModal)));","map":{"version":3,"sources":["/Users/faraheen/ccar-cms-next-mobile/components/product-list/filter-modal/ModelModal.jsx"],"names":["CloseOutlined","Card","Col","Empty","Form","Icon","Input","Modal","Row","_","React","useEffect","useState","Scrollbars","Highlighter","connect","withRouter","formatNumber","isValidNumber","notEmptyLength","Loading","modelModalSearchRef","createRef","ModelModal","props","options","setOptions","filteredOptions","setFilteredOptions","searchKeyword","setSearchKeyword","isArray","uniqBodyTypes","cloneDeep","uniqBy","map","v","i","data","v1","bodyType","push","reverse","sortBy","visible","current","focus","keyword","RegExp","temp","filter","item","item1","test","model","count","selectedValue","alphaIndex","index","onChange","closable","maskClosable","style","onCancel","className","width","id","parseInt","zIndex","title","loading","e","target","value","get","length","margin","fontSize","textAlign","textTransform","height","uri","textOverflow","backgroundColor","padding","position","mapStateToProps","state","productsList","app","mapDispatchToProps","create"],"mappings":"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","sourcesContent":["import { CloseOutlined } from '@ant-design/icons';\nimport { Card, Col, Empty, Form, Icon, Input, Modal, Row } from 'antd';\nimport _ from 'lodash';\nimport React, { useEffect, useState } from 'react';\nimport Scrollbars from 'react-custom-scrollbars';\nimport Highlighter from 'react-highlight-words';\nimport { connect } from 'react-redux';\nimport { withRouter } from 'next/dist/client/router';\nimport { formatNumber, isValidNumber, notEmptyLength } from '../../../common-function';\nimport Loading from '../../general/Loading';\n\n\nconst modelModalSearchRef = React.createRef();\n\nconst ModelModal = (props) => {\n    const [options, setOptions] = useState([])\n    const [filteredOptions, setFilteredOptions] = useState([])\n    const [searchKeyword, setSearchKeyword] = useState('')\n\n    useEffect(() => {\n\n        if (props.options != null && _.isArray(props.options) && notEmptyLength(props.options)) {\n            let uniqBodyTypes = _.cloneDeep(_.uniqBy(props.options, 'bodyType').map((v, i) => {\n                v.data = []\n                return v\n            }))\n\n            uniqBodyTypes = uniqBodyTypes.map((v) => {\n                props.options.map((v1) => {\n                    if (v.bodyType == v1.bodyType) {\n                        v.data.push(v1)\n                    }\n                })\n                v.data = _.reverse(_.sortBy(v.data, ['count', 'model']))\n                return v;\n            })\n            setOptions(uniqBodyTypes)\n        } else {\n            setOptions([]);\n        }\n    }, [props.options])\n\n    useEffect(() => {\n\n        if (props.visible == true && modelModalSearchRef.current) {\n            modelModalSearchRef.current.focus();\n        }\n\n        if (!props.visible) {\n            setSearchKeyword('');\n        }\n\n    }, [props.visible, modelModalSearchRef.current])\n\n    useEffect(() => {\n\n        if (searchKeyword) {\n            let keyword = new RegExp(searchKeyword, 'i');\n            let temp = _.cloneDeep(options).filter(function (item) {\n                item.data = item.data.filter(function (item1) {\n                    return keyword.test(item1.model) && item1.count > 0;\n                });\n                return notEmptyLength(item.data);\n            })\n            setFilteredOptions(temp)\n        } else {\n            setFilteredOptions(options)\n        }\n    }, [options, searchKeyword])\n\n    const selectedValue = (item, alphaIndex, index) => {\n        if (props.onChange) {\n            props.onChange(item, alphaIndex, index);\n        }\n    }\n\n    return (\n        <React.Fragment>\n            <Modal\n                closable={props.closable != null ? props.closable ? true : false : false}\n                maskClosable={props.maskClosable != null ? props.maskClosable ? true : false : false}\n                visible={props.visible != null ? props.visible ? true : false : false}\n                style={{ ...props.style }} onCancel={props.onCancel}\n                className={`${props.className ? props.className : ''}`}\n                width={props.width ? props.width : '100%'}\n                id={props.id ? props.id : 'model-modal'}\n                zIndex={isValidNumber(parseInt(props.zIndex)) ? parseInt(props.zIndex) : 1000}\n                footer={null}>\n                <Card\n                    bordered={false}\n                    title={props.title ? props.title : \"Select Car Model\"}\n                    size=\"small\"\n                    style={{ zIndex: 1001 }}\n                >\n                    <Loading spinning={props.loading}>\n\n                        <Row>\n                            <Col xs={24} sm={24} md={24} lg={24} xl={24}>\n                                <div className=\"thin-border round-border-big padding-sm\">\n                                    <Input ref={modelModalSearchRef} autoFocus value={searchKeyword} onChange={(e) => { setSearchKeyword(e.target.value) }} className='no-border-input' size=\"small\" compact\n                                        suffix={\n                                            searchKeyword ?\n                                                <CloseOutlined\n                                                    className='cursor-pointer'\n                                                    onClick={(e) => { setSearchKeyword('') }} />\n                                                :\n                                                <Icon type=\"search\" />\n                                        } placeholder=\"Search Here...\" />\n                                </div>\n                            </Col>\n                        </Row>\n                        <Row gutter={[15, 15]}>\n                            <Col className=\"gutter-row\" xs={0} sm={0} md={24} lg={24} xl={24}>\n                                <Scrollbars autoHide autoHeight autoHeightMax={_.get(props, ['bodyStyle', 'maxHeight']) || 500}>\n                                    <div>\n                                        {\n                                            filteredOptions.length > 0 ?\n                                                filteredOptions.map((item, index) => {\n                                                    return (\n                                                        <div style={{ margin: '10px 0px' }} key={index} >\n                                                            <p className=\"font-weight-bold black\" style={{ fontSize: '16px', textAlign: 'left', textTransform: 'capitalize' }}>{item.bodyType}</p>\n                                                            {item.data.map((v, i) => {\n                                                                return (\n                                                                    <div className=\"flex-justify-space-between flex-items-align-center cursor-pointer\"\n                                                                        key={i}\n                                                                        onClick={() => selectedValue(v.model, index, i)}>\n                                                                        <span className='flex-justify-start flex-items-align-center width-70 padding-right-md' >\n                                                                            <img className=\"obj-fit-c margin-right-md\" style={{ width: 50, height: 50 }} src={v.uri} />\n                                                                            <span className='d-inline-block text-overflow-break uppercase' >\n                                                                                <Highlighter\n                                                                                    style={{ textTransform: 'uppercase', textOverflow: 'break-word' }}\n                                                                                    highlightStyle={{ backgroundColor: '#ffc069', padding: 0 }}\n                                                                                    searchWords={[searchKeyword]}\n                                                                                    autoEscape\n                                                                                    textToHighlight={v.model}\n                                                                                />\n                                                                            </span>\n                                                                        </span>\n                                                                        <span className='d-inline-block width-30 text-align-right' >\n                                                                            {`(${isValidNumber(v.count) ? formatNumber(v.count, null, false, 0, true) : 0})`}\n                                                                        </span>\n                                                                    </div>\n                                                                    // <Row\n                                                                    //     // gutter={[10, 10]} \n                                                                    //     className={_.toLower(props.selectedValue) == _.toLower(v.model) ? \"selectedRow\" : \"selectRow\"}\n                                                                    //     onClick={() => selectedValue(v.model, index, i)}\n                                                                    //     style={{ height: '5em', lineHeight: '5em' }}>\n                                                                    //     <Col span={8} style={{ height: '100%', padding: 5, lineHeight: 0 }}>\n                                                                    //         <img className=\"w-100 h-100 obj-fit-c\" src={v.uri} />\n                                                                    //     </Col>\n                                                                    //     <Col span={10} style={{ height: '100%' }}>\n                                                                    //     </Col>\n                                                                    //     <Col span={4} style={{ height: '100%' }}>\n                                                                    //         <div className=\"fill-parent flex-justify-end flex-items-align-center\">\n                                                                    //         </div>\n                                                                    //     </Col>\n                                                                    // </Row>\n                                                                )\n                                                            })}\n                                                        </div>\n                                                    );\n                                                })\n                                                :\n                                                <div style={{ height: '100%' }}>\n                                                    <Empty\n                                                        style={{ position: 'relative' }}\n                                                        image=\"/empty.png\"\n                                                        imageStyle={{ height: 60 }}\n                                                        description={<span>{props.loading ? 'Getting Result' : 'No Result'}</span>}\n                                                    >\n                                                    </Empty>\n                                                </div>\n                                        }\n                                    </div>\n                                </Scrollbars>\n                            </Col>\n\n                        </Row>\n                    </Loading>\n                </Card>\n            </Modal>\n        </React.Fragment>\n    );\n}\n\nconst mapStateToProps = state => ({\n    productsList: state.productsList,\n    app: state.app,\n});\n\nconst mapDispatchToProps = {\n};\nexport default connect(mapStateToProps, mapDispatchToProps)(Form.create()(withRouter(ModelModal)));"]},"metadata":{},"sourceType":"module"}