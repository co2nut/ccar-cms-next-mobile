{"ast":null,"code":"import firebase from 'firebase/app';\nimport 'firebase/messaging';\nimport localforage from 'localforage';\nconst PUBLIC_VAPID_KEY = \"BCpKq8t61asvp3b1_uIcq1nL6cZZe-zhoDy83M84EmmTnxgTtn2Rj4CVXR3PjDQPbQ7oVdsWfge2BABk1HNIefs\"; // For Firebase JS SDK v7.20.0 and later, measurementId is optional\n\nconst firebaseConfig = {\n  apiKey: \"AIzaSyBNkd-inUJRLD_ke7pwJg66LND8M2e9A_s\",\n  authDomain: \"ccar-my.firebaseapp.com\",\n  databaseURL: \"https://ccar-my.firebaseio.com\",\n  projectId: \"ccar-my\",\n  storageBucket: \"ccar-my.appspot.com\",\n  messagingSenderId: \"827147986430\",\n  appId: \"1:827147986430:web:9b41b5e04dafd307f98caf\",\n  measurementId: \"G-L8NHNSDC47\"\n};\n\nif (!firebase.apps.length) {\n  firebase.initializeApp(firebaseConfig);\n}\n\nexport const tokenInlocalforage = async () => {\n  return localforage.getItem('fcm_token');\n};\nexport const initFirebaseToken = async () => {\n  try {\n    const messaging = firebase.messaging();\n    const tokenInLocalForage = await tokenInlocalforage(); //if FCM token is already there just return the token\n    // if (tokenInLocalForage !== null) {\n    //     return tokenInLocalForage;\n    // }\n    //requesting notification permission from browser\n\n    const status = await Notification.requestPermission();\n\n    if (status && status === 'granted') {\n      //getting token from FCM\n      const fcm_token = await messaging.getToken({\n        vapidKey: PUBLIC_VAPID_KEY\n      });\n\n      if (fcm_token) {\n        //setting FCM token in indexed db using localforage\n        localforage.setItem('fcm_token', fcm_token); //return the FCM token after saving it\n\n        return fcm_token;\n      }\n    }\n  } catch (error) {\n    console.error(error);\n    return null;\n  }\n};\nexport const onMessageListener = () => {\n  const messaging = firebase.messaging();\n  return new Promise(resolve => {\n    messaging.onMessage(payload => {\n      // console.log(payload);\n      resolve(payload);\n    });\n  });\n};","map":{"version":3,"sources":["/Users/faraheen/ccar-cms-next-mobile/webPush.js"],"names":["firebase","localforage","PUBLIC_VAPID_KEY","firebaseConfig","apiKey","authDomain","databaseURL","projectId","storageBucket","messagingSenderId","appId","measurementId","apps","length","initializeApp","tokenInlocalforage","getItem","initFirebaseToken","messaging","tokenInLocalForage","status","Notification","requestPermission","fcm_token","getToken","vapidKey","setItem","error","console","onMessageListener","Promise","resolve","onMessage","payload"],"mappings":"AACA,OAAOA,QAAP,MAAqB,cAArB;AACA,OAAO,oBAAP;AACA,OAAOC,WAAP,MAAwB,aAAxB;AAEA,MAAMC,gBAAgB,GAAG,yFAAzB,C,CACA;;AACA,MAAMC,cAAc,GAAG;AACnBC,EAAAA,MAAM,EAAE,yCADW;AAEnBC,EAAAA,UAAU,EAAE,yBAFO;AAGnBC,EAAAA,WAAW,EAAE,gCAHM;AAInBC,EAAAA,SAAS,EAAE,SAJQ;AAKnBC,EAAAA,aAAa,EAAE,qBALI;AAMnBC,EAAAA,iBAAiB,EAAE,cANA;AAOnBC,EAAAA,KAAK,EAAE,2CAPY;AAQnBC,EAAAA,aAAa,EAAE;AARI,CAAvB;;AAYA,IAAI,CAACX,QAAQ,CAACY,IAAT,CAAcC,MAAnB,EAA2B;AACvBb,EAAAA,QAAQ,CAACc,aAAT,CAAuBX,cAAvB;AACH;;AAED,OAAO,MAAMY,kBAAkB,GAAG,YAAY;AAC1C,SAAOd,WAAW,CAACe,OAAZ,CAAoB,WAApB,CAAP;AACH,CAFM;AAKP,OAAO,MAAMC,iBAAiB,GAAG,YAAY;AACzC,MAAI;AACA,UAAMC,SAAS,GAAGlB,QAAQ,CAACkB,SAAT,EAAlB;AACA,UAAMC,kBAAkB,GAAG,MAAMJ,kBAAkB,EAAnD,CAFA,CAGA;AACA;AACA;AACA;AACA;;AACA,UAAMK,MAAM,GAAG,MAAMC,YAAY,CAACC,iBAAb,EAArB;;AACA,QAAIF,MAAM,IAAIA,MAAM,KAAK,SAAzB,EAAoC;AAChC;AACA,YAAMG,SAAS,GAAG,MAAML,SAAS,CAACM,QAAV,CAAmB;AAACC,QAAAA,QAAQ,EAAGvB;AAAZ,OAAnB,CAAxB;;AACA,UAAIqB,SAAJ,EAAe;AACX;AACAtB,QAAAA,WAAW,CAACyB,OAAZ,CAAoB,WAApB,EAAiCH,SAAjC,EAFW,CAGX;;AACA,eAAOA,SAAP;AACH;AACJ;AACJ,GAnBD,CAmBE,OAAOI,KAAP,EAAc;AACZC,IAAAA,OAAO,CAACD,KAAR,CAAcA,KAAd;AACA,WAAO,IAAP;AACH;AACJ,CAxBM;AA0BP,OAAO,MAAME,iBAAiB,GAAG,MAAM;AAEnC,QAAMX,SAAS,GAAGlB,QAAQ,CAACkB,SAAT,EAAlB;AACA,SAAO,IAAIY,OAAJ,CAAaC,OAAD,IAAa;AAC5Bb,IAAAA,SAAS,CAACc,SAAV,CAAqBC,OAAD,IAAa;AAC7B;AACAF,MAAAA,OAAO,CAACE,OAAD,CAAP;AACH,KAHD;AAIH,GALM,CAAP;AAMH,CATM","sourcesContent":["\nimport firebase from 'firebase/app';\nimport 'firebase/messaging';\nimport localforage from 'localforage';\n\nconst PUBLIC_VAPID_KEY = \"BCpKq8t61asvp3b1_uIcq1nL6cZZe-zhoDy83M84EmmTnxgTtn2Rj4CVXR3PjDQPbQ7oVdsWfge2BABk1HNIefs\";\n// For Firebase JS SDK v7.20.0 and later, measurementId is optional\nconst firebaseConfig = {\n    apiKey: \"AIzaSyBNkd-inUJRLD_ke7pwJg66LND8M2e9A_s\",\n    authDomain: \"ccar-my.firebaseapp.com\",\n    databaseURL: \"https://ccar-my.firebaseio.com\",\n    projectId: \"ccar-my\",\n    storageBucket: \"ccar-my.appspot.com\",\n    messagingSenderId: \"827147986430\",\n    appId: \"1:827147986430:web:9b41b5e04dafd307f98caf\",\n    measurementId: \"G-L8NHNSDC47\"\n};\n\n\nif (!firebase.apps.length) {\n    firebase.initializeApp(firebaseConfig);\n}\n\nexport const tokenInlocalforage = async () => {\n    return localforage.getItem('fcm_token');\n}\n\n\nexport const initFirebaseToken = async () => {\n    try {\n        const messaging = firebase.messaging();\n        const tokenInLocalForage = await tokenInlocalforage();\n        //if FCM token is already there just return the token\n        // if (tokenInLocalForage !== null) {\n        //     return tokenInLocalForage;\n        // }\n        //requesting notification permission from browser\n        const status = await Notification.requestPermission();\n        if (status && status === 'granted') {\n            //getting token from FCM\n            const fcm_token = await messaging.getToken({vapidKey : PUBLIC_VAPID_KEY});\n            if (fcm_token) {\n                //setting FCM token in indexed db using localforage\n                localforage.setItem('fcm_token', fcm_token);\n                //return the FCM token after saving it\n                return fcm_token;\n            }\n        }\n    } catch (error) {\n        console.error(error);\n        return null;\n    }\n}\n\nexport const onMessageListener = () => {\n\n    const messaging = firebase.messaging();\n    return new Promise((resolve) => {\n        messaging.onMessage((payload) => {\n            // console.log(payload);\n            resolve(payload);\n        });\n    });\n}\n"]},"metadata":{},"sourceType":"module"}