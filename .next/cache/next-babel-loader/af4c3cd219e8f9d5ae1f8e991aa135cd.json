{"ast":null,"code":"import _regeneratorRuntime from \"@babel/runtime/regenerator\";\nimport _defineProperty from \"@babel/runtime/helpers/esm/defineProperty\";\nimport _asyncToGenerator from \"@babel/runtime/helpers/esm/asyncToGenerator\";\n\nvar _s = $RefreshSig$();\n\nvar __jsx = React.createElement;\n\nfunction ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); if (enumerableOnly) { symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; }); } keys.push.apply(keys, symbols); } return keys; }\n\nfunction _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; if (i % 2) { ownKeys(Object(source), true).forEach(function (key) { _defineProperty(target, key, source[key]); }); } else if (Object.getOwnPropertyDescriptors) { Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)); } else { ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } } return target; }\n\nimport { Col, Form, Icon, Input, message, Modal, Row, Spin, Tooltip, Upload } from 'antd';\nimport axios from 'axios';\nimport Compress from \"browser-image-compression\";\nimport _ from 'lodash';\nimport { withRouter } from 'next/dist/client/router';\nimport React, { useEffect, useState } from 'react';\nimport { connect } from 'react-redux';\nimport { ReactSortable } from \"react-sortablejs\";\nimport { v4 } from 'uuid';\nimport client from '../../../feathers';\nimport { loading, loginMode } from '../../../redux/actions/app-actions';\nimport SocialInput from './social-input';\nimport { setUser } from '../../../redux/actions/user-actions';\nimport { notEmptyLength } from '../../../common-function';\nvar TextArea = Input.TextArea;\nvar titleInputRef = React.createRef();\nvar contentInputRef = React.createRef();\nvar IMAGE_LIMIT = 10;\n\nvar WritePostModal = function WritePostModal(props) {\n  _s();\n\n  var _useState = useState(false),\n      newPostModal = _useState[0],\n      setNewPostModal = _useState[1];\n\n  var _useState2 = useState([]),\n      imageList = _useState2[0],\n      setImageList = _useState2[1];\n\n  var _useState3 = useState(false),\n      previewVisible = _useState3[0],\n      setPreviewVisible = _useState3[1];\n\n  var _useState4 = useState(''),\n      previewImage = _useState4[0],\n      setPreviewImage = _useState4[1];\n\n  var _useState5 = useState(false),\n      confirmLoading = _useState5[0],\n      setConfirmLoading = _useState5[1];\n\n  var _useState6 = useState({}),\n      editRecord = _useState6[0],\n      setEditRecord = _useState6[1];\n\n  var _useState7 = useState(''),\n      text = _useState7[0],\n      setText = _useState7[1];\n\n  var _useState8 = useState(''),\n      resetIndicator = _useState8[0],\n      setResetIndicator = _useState8[1];\n\n  var _useState9 = useState({\n    title: '',\n    content: '',\n    location: ''\n  }),\n      postData = _useState9[0],\n      setPostData = _useState9[1];\n\n  var uploadButton = __jsx(\"div\", {\n    style: {\n      padding: '5%'\n    }\n  }, __jsx(Icon, {\n    type: \"plus\"\n  }), __jsx(\"div\", {\n    className: \"ant-upload-text\"\n  }, \"Upload\"));\n\n  useEffect(function () {\n    var visibleMode = props.visibleMode ? props.visibleMode === true ? true : false : false;\n\n    if (_.isEmpty(props.currentRecord) === false) {\n      if (props.currentRecord !== editRecord) {\n        var _imageList = _.cloneDeep(props.currentRecord.mediaList);\n\n        if (_imageList) {\n          var uid = 0;\n\n          _imageList.map(function (v) {\n            v.uid = uid + 1;\n            uid++;\n            return v;\n          });\n        }\n\n        setImageList(_imageList);\n        setEditRecord(props.currentRecord);\n        setPostData(props.currentRecord);\n      }\n    }\n\n    if ((!_.get(props.user, ['authenticated']) || !_.get(props.user, ['info', 'user', '_id'])) && visibleMode === true) {\n      props.loginMode(true);\n      message.error('Please login first');\n      visibleMode = false;\n      closeModal();\n    }\n\n    setNewPostModal(visibleMode);\n  });\n  var layout = {\n    labelCol: {\n      span: 8\n    },\n    wrapperCol: {\n      span: 16\n    }\n  };\n\n  function closeModal() {\n    props.changeVisibleMode(false);\n    setResetIndicator(v4());\n    setEditRecord({});\n    setImageList([]);\n    setNewPostModal(false);\n  }\n\n  function onSubmit() {\n    setConfirmLoading(true);\n\n    if (!_.get(postData, ['title'])) {\n      setTimeout(function () {\n        setConfirmLoading(false);\n      }, 1000);\n      message.error(\"Please input title.\");\n      return;\n    }\n\n    if (!_.get(postData, ['content'])) {\n      setTimeout(function () {\n        setConfirmLoading(false);\n      }, 1000);\n      message.error(\"Please input content.\");\n      return;\n    }\n\n    var fileList = _.cloneDeep(imageList);\n\n    if (props.chatType === 'carfreaks') {\n      if (fileList.length <= 0) {\n        setConfirmLoading(false);\n        return message.error(\"Please upload Image.\");\n      }\n    }\n\n    var promiseArr = [];\n    var imageFile = '';\n\n    var _loop = function _loop(i) {\n      if (!fileList[i].url) {\n        var imgObj = fileList[i].originFileObj;\n        var options = {\n          maxSizeMB: 0.2,\n          useWebWorker: true,\n          maxWidthOrHeight: 1920\n        };\n\n        var _imageFile = Compress(imgObj, options).then(function (compressedBlob) {\n          compressedBlob.lastModifiedDate = new Date();\n          var convertedBlobFile = new File([compressedBlob], imgObj.name, {\n            type: imgObj.type,\n            lastModified: Date.now()\n          });\n          return convertedBlobFile;\n        });\n\n        promiseArr.push(_imageFile.then(function (res) {\n          fileList[i].originFileObj = res;\n          return fileList[i];\n        }));\n      } else {\n        promiseArr.push(fileList[i]);\n      }\n    };\n\n    for (var i = 0; i < fileList.length; i++) {\n      _loop(i);\n    } // after image processing\n\n\n    Promise.all(promiseArr).then(function (resArr) {\n      var formData = new FormData();\n      var uploadYes = 'no';\n\n      for (var _i = 0; _i < resArr.length; _i++) {\n        if (!resArr[_i].url) {\n          uploadYes = 'yes';\n          formData.append('images', resArr[_i].originFileObj);\n        }\n      }\n\n      var uploadPromiseArr = [];\n\n      if (uploadYes === 'yes') {\n        uploadPromiseArr.push(axios.post(\"\".concat(client.io.io.uri, \"upload-images-array\"), formData, {\n          headers: {\n            'Authorization': client.settings.storage.storage.storage['feathers-jwt'],\n            'Content-Type': 'multipart/form-data'\n          }\n        }).then(function (res) {\n          var imageListResult = [];\n\n          try {\n            imageListResult = res.data.result;\n          } catch (err) {\n            imageListResult = [];\n          }\n\n          _.map(imageListResult, function (v) {\n            fileList.push(v);\n          });\n\n          fileList = _.map(fileList, function (v) {\n            if (v.url) {\n              return v;\n            }\n          });\n          return fileList = _.without(fileList, undefined);\n        }));\n      } else {\n        uploadPromiseArr.push(resArr);\n      }\n\n      Promise.all(uploadPromiseArr).then(function (res) {\n        fileList = res[0];\n        var finalfileList = [];\n        finalfileList = fileList;\n\n        if (!finalfileList) {\n          finalfileList = [];\n        }\n\n        client.authenticate().then(function (res) {\n          //patch\n          if (props.editMode) {\n            if (_.isEmpty(props.editMode) === false) {\n              if (props.editMode === 'edit') {\n                client.service('chats').patch(editRecord._id, {\n                  title: postData.title,\n                  content: postData.content,\n                  location: postData.location || '',\n                  mediaList: finalfileList\n                }).then(function (res1) {\n                  closeModal();\n\n                  if (props.onUpdatePost) {\n                    res1.userId = res.user;\n                    props.onUpdatePost(res1);\n                  }\n\n                  setNewPostModal(false);\n                  setConfirmLoading(false);\n                })[\"catch\"](function (err) {\n                  console.log(err);\n                  message.error(\"Unable to write a Post. T.T\");\n                  setConfirmLoading(false);\n                });\n                return;\n              }\n            }\n          } else {\n            //create\n            client.service('chats').create({\n              userId: res.user._id,\n              title: postData.title,\n              content: postData.content,\n              location: postData.location || '',\n              postDate: new Date(),\n              mediaList: fileList,\n              chatType: props.chatType\n            }).then(function (res1) {\n              closeModal(); // if (props.refreshData) {\n              //     props.refreshData();\n              // }\n\n              if (props.onCreatePost) {\n                res1.userId = res.user;\n                props.onCreatePost(res1);\n              }\n\n              setNewPostModal(false);\n              setConfirmLoading(false);\n            })[\"catch\"](function (err) {\n              console.log(err);\n              message.error(\"Unable to write a Post. T.T\");\n              setConfirmLoading(false);\n            });\n          }\n        });\n      });\n    });\n  }\n\n  ;\n\n  function handleImageRemove2(record) {\n    var oldFileList = _.cloneDeep(imageList);\n\n    var newFileList = _.filter(oldFileList, function (val) {\n      return val.uid !== record.uid;\n    });\n\n    setImageList(newFileList);\n  }\n\n  function getBase64(file) {\n    return new Promise(function (resolve, reject) {\n      var reader = new FileReader();\n      reader.readAsDataURL(file);\n\n      reader.onload = function () {\n        return resolve(reader.result);\n      };\n\n      reader.onerror = function (error) {\n        return reject(error);\n      };\n    });\n  }\n\n  function handlePreview(_x) {\n    return _handlePreview.apply(this, arguments);\n  }\n\n  function _handlePreview() {\n    _handlePreview = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee(file) {\n      return _regeneratorRuntime.wrap(function _callee$(_context) {\n        while (1) {\n          switch (_context.prev = _context.next) {\n            case 0:\n              if (!(!file.url && !file.preview)) {\n                _context.next = 4;\n                break;\n              }\n\n              _context.next = 3;\n              return getBase64(file.originFileObj);\n\n            case 3:\n              file.preview = _context.sent;\n\n            case 4:\n              setPreviewImage(file.url || file.preview);\n              setPreviewVisible(true);\n\n            case 6:\n            case \"end\":\n              return _context.stop();\n          }\n        }\n      }, _callee);\n    }));\n    return _handlePreview.apply(this, arguments);\n  }\n\n  ;\n\n  function handleChangeAdsImage(e) {\n    e.fileList = e.fileList.slice(-IMAGE_LIMIT);\n    e.fileList.map(function (v) {\n      if (v.url) {\n        return;\n      }\n\n      v.ObjectUrl = URL.createObjectURL(v.originFileObj);\n    });\n    setImageList(e.fileList);\n  }\n\n  function handleCancel() {}\n\n  var emojiPosition = {\n    bottom: -360,\n    right: 0\n  };\n  return __jsx(React.Fragment, null, __jsx(Modal, {\n    title: props.editMode == 'edit' ? 'Edit Post' : 'New Post',\n    visible: newPostModal,\n    onCancel: function onCancel(e) {\n      closeModal();\n    },\n    onOk: function onOk(e) {\n      onSubmit();\n    },\n    okText: \"Submit\",\n    maskClosable: false,\n    confirmLoading: confirmLoading\n  }, __jsx(Spin, {\n    spinning: confirmLoading\n  }, __jsx(Form, {\n    layout: \"vertical\"\n  }, __jsx(Form.Item, null, __jsx(SocialInput, {\n    inputRef: titleInputRef,\n    height: 30,\n    placement: \"bottom\",\n    resetIndicator: resetIndicator,\n    editMode: props.editMode == 'edit' ? true : false,\n    text: props.editMode == 'edit' ? editRecord.title : '',\n    placeholder: \"Topic Title(max 200)\",\n    className: \"flex-items-align-start\",\n    onChange: function onChange(text, finalText) {\n      setPostData(_objectSpread(_objectSpread({}, postData), {}, {\n        title: finalText\n      }));\n    },\n    emojiPosition: {\n      right: 33,\n      top: -244\n    },\n    maxLength: 200\n  })), imageList && props.chatType === 'carfreaks' ? __jsx(Form.Item, {\n    wrapperCol: {\n      span: 24\n    }\n  }, __jsx(\"div\", {\n    className: \"clearfix createCarAds\"\n  }, __jsx(Row, {\n    gutter: 6\n  }, __jsx(ReactSortable, {\n    invertSwap: true,\n    animation: 300,\n    list: notEmptyLength(imageList) ? imageList : [],\n    setList: function setList(newState) {\n      return setImageList(newState);\n    }\n  }, imageList.map(function (item, idx) {\n    var _jsx;\n\n    return __jsx(Col, (_jsx = {\n      key: 'image' + idx,\n      xl: 8,\n      xs: 12,\n      md: 12\n    }, _defineProperty(_jsx, \"xs\", 24), _defineProperty(_jsx, \"style\", {\n      maxWidth: '300px',\n      maxHeight: '250px'\n    }), _jsx), item.url ? __jsx(\"div\", {\n      className: \"containerCarAdsImg\"\n    }, __jsx(\"div\", {\n      className: \"containerCarAdsImgBackGround\"\n    }, __jsx(\"img\", {\n      alt: \"header\",\n      src: item.url\n    })), __jsx(Tooltip, {\n      title: \"Click to Remove\"\n    }, __jsx(Icon, {\n      onClick: function onClick() {\n        handleImageRemove2(item);\n      },\n      className: \"removeImage\",\n      type: \"close-circle\",\n      theme: \"filled\"\n    })), idx === 0 ? __jsx(\"span\", {\n      className: \"seqCount\"\n    }, idx + 1 + '/Main') : __jsx(\"span\", {\n      className: \"seqCount\"\n    }, idx + 1)) : __jsx(\"div\", {\n      className: \"containerCarAdsImg\"\n    }, __jsx(\"div\", {\n      className: \"containerCarAdsImgBackGround\"\n    }, __jsx(\"img\", {\n      alt: \"header\",\n      src: item.ObjectUrl\n    })), __jsx(Tooltip, {\n      title: \"Click to Remove\"\n    }, __jsx(Icon, {\n      onClick: function onClick() {\n        handleImageRemove2(item);\n      },\n      className: \"removeImage\",\n      type: \"close-circle\",\n      theme: \"filled\"\n    })), __jsx(\"span\", {\n      className: \"seqCount\"\n    }, idx + 1)));\n  }))), __jsx(Upload, {\n    accept: \".png,.jpeg,.jpg\",\n    multiple: true,\n    key: \"uploadCarImage\",\n    beforeUpload: function beforeUpload() {\n      return false;\n    },\n    listType: \"picture-card\",\n    fileList: imageList,\n    showUploadList: false,\n    onPreview: function onPreview(e) {\n      handlePreview(e);\n    },\n    onChange: function onChange(e) {\n      handleChangeAdsImage(e);\n    }\n  }, imageList.length >= 27 ? null : uploadButton), __jsx(Modal, {\n    visible: previewVisible,\n    footer: null,\n    onCancel: handleCancel\n  }, __jsx(\"img\", {\n    alt: \"example\",\n    style: {\n      width: '100%'\n    },\n    src: previewImage\n  })))) : '', __jsx(Form.Item, null, __jsx(SocialInput, {\n    inputRef: contentInputRef,\n    height: 100,\n    resetIndicator: resetIndicator,\n    editMode: props.editMode == 'edit' ? true : false,\n    text: props.editMode == 'edit' ? editRecord.content : '',\n    placeholder: \"Please enter your content (maximum 1000 characters)\",\n    className: \"flex-items-align-start\",\n    onChange: function onChange(text, finalText) {\n      setPostData(_objectSpread(_objectSpread({}, postData), {}, {\n        content: finalText\n      }));\n    },\n    emojiPosition: {\n      right: 33,\n      top: -244\n    },\n    maxLength: 1000\n  }))))));\n};\n\n_s(WritePostModal, \"puk/ck7ItfHFSeBeMLPxxPZC0TY=\");\n\n_c = WritePostModal;\n\nvar mapStateToProps = function mapStateToProps(state) {\n  return {\n    app: state.app,\n    user: state.user\n  };\n};\n\nvar mapDispatchToProps = {\n  loginMode: loginMode,\n  loading: loading,\n  setUser: setUser\n};\nexport default connect(mapStateToProps, mapDispatchToProps)(Form.create()(withRouter(WritePostModal)));\n\nvar _c;\n\n$RefreshReg$(_c, \"WritePostModal\");","map":{"version":3,"sources":["/Users/faraheen/ccar-cms-next-mobile/components/carFreak/components/write-post-modal.jsx"],"names":["Col","Form","Icon","Input","message","Modal","Row","Spin","Tooltip","Upload","axios","Compress","_","withRouter","React","useEffect","useState","connect","ReactSortable","v4","client","loading","loginMode","SocialInput","setUser","notEmptyLength","TextArea","titleInputRef","createRef","contentInputRef","IMAGE_LIMIT","WritePostModal","props","newPostModal","setNewPostModal","imageList","setImageList","previewVisible","setPreviewVisible","previewImage","setPreviewImage","confirmLoading","setConfirmLoading","editRecord","setEditRecord","text","setText","resetIndicator","setResetIndicator","title","content","location","postData","setPostData","uploadButton","padding","visibleMode","isEmpty","currentRecord","cloneDeep","mediaList","uid","map","v","get","user","error","closeModal","layout","labelCol","span","wrapperCol","changeVisibleMode","onSubmit","setTimeout","fileList","chatType","length","promiseArr","imageFile","i","url","imgObj","originFileObj","options","maxSizeMB","useWebWorker","maxWidthOrHeight","then","compressedBlob","lastModifiedDate","Date","convertedBlobFile","File","name","type","lastModified","now","push","res","Promise","all","resArr","formData","FormData","uploadYes","append","uploadPromiseArr","post","io","uri","headers","settings","storage","imageListResult","data","result","err","without","undefined","finalfileList","authenticate","editMode","service","patch","_id","res1","onUpdatePost","userId","console","log","create","postDate","onCreatePost","handleImageRemove2","record","oldFileList","newFileList","filter","val","getBase64","file","resolve","reject","reader","FileReader","readAsDataURL","onload","onerror","handlePreview","preview","handleChangeAdsImage","e","slice","ObjectUrl","URL","createObjectURL","handleCancel","emojiPosition","bottom","right","finalText","top","newState","item","idx","maxWidth","maxHeight","width","mapStateToProps","state","app","mapDispatchToProps"],"mappings":"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","sourcesContent":["import { Col, Form, Icon, Input, message, Modal, Row, Spin, Tooltip, Upload } from 'antd';\nimport axios from 'axios';\nimport Compress from \"browser-image-compression\";\nimport _ from 'lodash';\nimport { withRouter } from 'next/dist/client/router';\nimport React, { useEffect, useState } from 'react';\nimport { connect } from 'react-redux';\nimport { ReactSortable } from \"react-sortablejs\";\nimport { v4 } from 'uuid';\nimport client from '../../../feathers';\nimport { loading, loginMode } from '../../../redux/actions/app-actions';\nimport SocialInput from './social-input';\nimport { setUser } from '../../../redux/actions/user-actions';\nimport { notEmptyLength } from '../../../common-function';\nconst { TextArea } = Input;\n\n\nconst titleInputRef = React.createRef();\nconst contentInputRef = React.createRef();\nconst IMAGE_LIMIT = 10;\nconst WritePostModal = (props) => {\n\n\n    const [newPostModal, setNewPostModal] = useState(false);\n    const [imageList, setImageList] = useState([]);\n    const [previewVisible, setPreviewVisible] = useState(false);\n    const [previewImage, setPreviewImage] = useState('');\n    const [confirmLoading, setConfirmLoading] = useState(false);\n    const [editRecord, setEditRecord] = useState({});\n    const [text, setText] = useState('');\n    const [resetIndicator, setResetIndicator] = useState('');\n    const [postData, setPostData] = useState({\n        title: '',\n        content: '',\n        location: '',\n    });\n\n\n    const uploadButton = (\n        <div style={{ padding: '5%' }}>\n            <Icon type=\"plus\" />\n            <div className=\"ant-upload-text\">Upload</div>\n        </div>\n    );\n\n    useEffect(() => {\n        let visibleMode = props.visibleMode ? props.visibleMode === true ? true : false : false\n        if (_.isEmpty(props.currentRecord) === false) {\n            if (props.currentRecord !== editRecord) {\n                let imageList = _.cloneDeep(props.currentRecord.mediaList)\n\n                if (imageList) {\n                    var uid = 0\n                    imageList.map(function (v) {\n                        v.uid = uid + 1\n                        uid++\n                        return v\n                    })\n                }\n\n                setImageList(imageList)\n                setEditRecord(props.currentRecord)\n                setPostData(props.currentRecord)\n            }\n        }\n\n        if ((!_.get(props.user, ['authenticated']) || !_.get(props.user, ['info', 'user', '_id'])) && visibleMode === true) {\n            props.loginMode(true);\n            message.error('Please login first');\n            visibleMode = false;\n            closeModal();\n        }\n\n        setNewPostModal(visibleMode)\n\n    });\n\n\n    const layout = {\n        labelCol: { span: 8 },\n        wrapperCol: { span: 16 },\n    };\n\n    function closeModal() {\n        props.changeVisibleMode(false);\n        setResetIndicator(v4());\n        setEditRecord({})\n        setImageList([])\n        setNewPostModal(false)\n    }\n\n    function onSubmit() {\n\n        setConfirmLoading(true)\n        if (!_.get(postData, ['title'])) {\n            setTimeout(() => {\n                setConfirmLoading(false)\n            }, 1000);\n            message.error(\"Please input title.\");\n            return;\n        }\n\n        if (!_.get(postData, ['content'])) {\n            setTimeout(() => {\n                setConfirmLoading(false)\n            }, 1000);\n            message.error(\"Please input content.\");\n            return;\n        }\n\n\n        let fileList = _.cloneDeep(imageList)\n\n        if (props.chatType === 'carfreaks') {\n            if (fileList.length <= 0) {\n                setConfirmLoading(false)\n                return message.error(\"Please upload Image.\")\n            }\n        }\n\n        let promiseArr = []\n        let imageFile = ''\n\n        for (let i = 0; i < fileList.length; i++) {\n\n            if (!fileList[i].url) {\n                let imgObj = fileList[i].originFileObj\n                const options = {\n                    maxSizeMB: 0.2,\n                    useWebWorker: true,\n                    maxWidthOrHeight: 1920,\n                }\n\n                let imageFile = Compress(imgObj, options)\n                    .then(compressedBlob => {\n\n                        compressedBlob.lastModifiedDate = new Date()\n                        const convertedBlobFile = new File([compressedBlob], imgObj.name, { type: imgObj.type, lastModified: Date.now() })\n                        return convertedBlobFile\n                    })\n\n                promiseArr.push(imageFile.then((res) => {\n                    fileList[i].originFileObj = res\n                    return fileList[i]\n                }))\n\n            }\n            else {\n                promiseArr.push(fileList[i])\n            }\n        }\n        // after image processing\n        Promise.all(promiseArr)\n            .then((resArr) => {\n                let formData = new FormData();\n                let uploadYes = 'no'\n                for (let i = 0; i < resArr.length; i++) {\n                    if (!resArr[i].url) {\n                        uploadYes = 'yes'\n                        formData.append('images', resArr[i].originFileObj);\n                    }\n                }\n                let uploadPromiseArr = []\n                if (uploadYes === 'yes') {\n                    uploadPromiseArr.push(\n                        axios.post(`${client.io.io.uri}upload-images-array`,\n                            formData\n                            , {\n                                headers: {\n                                    'Authorization': client.settings.storage.storage.storage['feathers-jwt'],\n                                    'Content-Type': 'multipart/form-data',\n                                }\n                            }\n                        ).then((res) => {\n                            let imageListResult = []\n                            try { imageListResult = res.data.result } catch (err) { imageListResult = [] }\n                            _.map(imageListResult, function (v) { fileList.push(v) });\n                            fileList = _.map(fileList, function (v) { if (v.url) { return v } });\n                            return fileList = _.without(fileList, undefined)\n                        })\n                    )\n                }\n                else {\n                    uploadPromiseArr.push(resArr)\n                }\n\n                Promise.all(uploadPromiseArr).then((res) => {\n                    fileList = res[0]\n\n                    let finalfileList = []\n                    finalfileList = fileList\n                    if (!finalfileList) { finalfileList = [] }\n\n                    client.authenticate()\n                        .then((res) => {\n                            //patch\n                            if (props.editMode) {\n                                if (_.isEmpty(props.editMode) === false) {\n                                    if (props.editMode === 'edit') {\n\n                                        client.service('chats')\n                                            .patch(editRecord._id, {\n                                                title: postData.title,\n                                                content: postData.content,\n                                                location: postData.location || '',\n                                                mediaList: finalfileList,\n                                            })\n                                            .then((res1) => {\n                                                closeModal();\n\n                                                if (props.onUpdatePost) {\n\n                                                    res1.userId = res.user;\n                                                    props.onUpdatePost(res1);\n                                                }\n                                                setNewPostModal(false)\n                                                setConfirmLoading(false)\n                                            })\n                                            .catch((err) => {\n                                                console.log(err);\n                                                message.error(\"Unable to write a Post. T.T\")\n                                                setConfirmLoading(false)\n\n                                            })\n                                        return\n                                    }\n                                }\n                            } else {\n                                //create\n                                client.service('chats')\n                                    .create({\n                                        userId: res.user._id,\n                                        title: postData.title,\n                                        content: postData.content,\n                                        location: postData.location || '',\n                                        postDate: new Date(),\n                                        mediaList: fileList,\n                                        chatType: props.chatType,\n                                    })\n                                    .then((res1) => {\n                                        closeModal();\n                                        // if (props.refreshData) {\n                                        //     props.refreshData();\n                                        // }\n                                        if (props.onCreatePost) {\n                                            res1.userId = res.user;\n                                            props.onCreatePost(res1);\n                                        }\n                                        setNewPostModal(false)\n                                        setConfirmLoading(false)\n                                    })\n                                    .catch((err) => {\n                                        console.log(err);\n                                        message.error(\"Unable to write a Post. T.T\")\n                                        setConfirmLoading(false)\n\n                                    })\n                            }\n                        })\n                })\n            })\n    };\n\n\n\n    function handleImageRemove2(record) {\n        let oldFileList = _.cloneDeep(imageList)\n        var newFileList = _.filter(oldFileList, function (val) {\n            return val.uid !== record.uid\n        });\n        setImageList(newFileList)\n    }\n\n\n    function getBase64(file) {\n        return new Promise((resolve, reject) => {\n            const reader = new FileReader();\n            reader.readAsDataURL(file);\n            reader.onload = () => resolve(reader.result);\n            reader.onerror = error => reject(error);\n        });\n    }\n\n    async function handlePreview(file) {\n\n        if (!file.url && !file.preview) {\n            file.preview = await getBase64(file.originFileObj);\n        }\n        setPreviewImage(file.url || file.preview)\n        setPreviewVisible(true)\n    };\n\n    function handleChangeAdsImage(e) {\n        e.fileList = e.fileList.slice(-IMAGE_LIMIT);\n\n        e.fileList.map(function (v) {\n            if (v.url) { return }\n            v.ObjectUrl = URL.createObjectURL(v.originFileObj)\n        });\n\n        setImageList(e.fileList)\n    }\n\n    function handleCancel() {\n\n    }\n\n    let emojiPosition = { bottom: -360, right: 0 }\n\n    return (\n        <React.Fragment>\n            <Modal\n                title={props.editMode == 'edit' ? 'Edit Post' : 'New Post'}\n                visible={newPostModal}\n                onCancel={(e) => { closeModal() }}\n                onOk={(e) => { onSubmit() }}\n                okText=\"Submit\"\n                maskClosable={false}\n                confirmLoading={confirmLoading}\n            >\n                <Spin spinning={confirmLoading}>\n\n\n                    <Form layout=\"vertical\">\n                        <Form.Item>\n                            <SocialInput\n                                inputRef={titleInputRef}\n                                height={30}\n                                placement=\"bottom\"\n                                resetIndicator={resetIndicator}\n                                editMode={props.editMode == 'edit' ? true : false}\n                                text={props.editMode == 'edit' ? editRecord.title : ''}\n                                placeholder=\"Topic Title(max 200)\"\n                                className=\"flex-items-align-start\"\n                                onChange={(text, finalText) => {\n                                    setPostData({ ...postData, title: finalText });\n                                }}\n                                emojiPosition={{ right: 33, top: -244 }}\n                                maxLength={200}\n                            >\n\n                            </SocialInput>\n                        </Form.Item>\n\n\n                        {imageList && props.chatType === 'carfreaks' ?\n                            <Form.Item\n                                wrapperCol={{ span: 24 }}>\n                                <div className=\"clearfix createCarAds\">\n                                    <Row gutter={6}  >\n                                        <ReactSortable\n                                            invertSwap={true}\n                                            animation={300}\n                                            list={notEmptyLength(imageList) ? imageList : []}\n                                            setList={newState => setImageList(newState)}\n                                        >\n\n                                            {imageList.map((item, idx) => (\n                                                <Col key={'image' + idx} xl={8} xs={12} md={12} xs={24} style={{ maxWidth: '300px', maxHeight: '250px' }}>\n                                                    {item.url\n                                                        ?\n                                                        <div className=\"containerCarAdsImg\">\n                                                            <div className='containerCarAdsImgBackGround'>\n                                                                <img alt=\"header\" src={item.url} />\n                                                            </div>\n                                                            <Tooltip title=\"Click to Remove\">\n                                                                <Icon onClick={() => { handleImageRemove2(item) }} className=\"removeImage\" type=\"close-circle\" theme=\"filled\" />\n                                                            </Tooltip>\n                                                            {\n                                                                idx === 0 ?\n                                                                    <span className='seqCount'>{idx + 1 + '/Main'}</span>\n                                                                    : <span className='seqCount'>{idx + 1}</span>\n                                                            }\n\n                                                        </div>\n                                                        :\n                                                        <div className=\"containerCarAdsImg\">\n                                                            <div className='containerCarAdsImgBackGround'>\n                                                                <img alt=\"header\" src={item.ObjectUrl} />\n                                                            </div>\n                                                            <Tooltip title=\"Click to Remove\">\n                                                                <Icon onClick={() => { handleImageRemove2(item) }} className=\"removeImage\" type=\"close-circle\" theme=\"filled\" />\n                                                            </Tooltip>\n                                                            <span className='seqCount'>{idx + 1}</span>\n\n                                                        </div>\n                                                    }\n\n                                                </Col>\n                                            ))}\n\n                                        </ReactSortable>\n                                    </Row>\n                                    <Upload\n                                        accept='.png,.jpeg,.jpg'\n                                        multiple={true}\n                                        key=\"uploadCarImage\"\n                                        beforeUpload={() => false}\n                                        listType=\"picture-card\"\n                                        fileList={imageList}\n                                        showUploadList={false}\n                                        onPreview={(e) => { handlePreview(e) }}\n                                        onChange={(e) => {\n                                            handleChangeAdsImage(e)\n                                        }}\n                                    >\n                                        {imageList.length >= 27 ? null : uploadButton}\n                                    </Upload>\n\n                                    <Modal visible={previewVisible} footer={null} onCancel={handleCancel}>\n                                        <img alt=\"example\" style={{ width: '100%' }} src={previewImage} />\n                                    </Modal>\n                                </div>\n                            </Form.Item>\n                            : ''}\n\n                        <Form.Item >\n                            <SocialInput\n                                inputRef={contentInputRef}\n                                height={100}\n                                resetIndicator={resetIndicator}\n                                editMode={props.editMode == 'edit' ? true : false}\n                                text={props.editMode == 'edit' ? editRecord.content : ''}\n                                placeholder=\"Please enter your content (maximum 1000 characters)\"\n                                className=\"flex-items-align-start\"\n                                onChange={(text, finalText) => {\n                                    setPostData({ ...postData, content: finalText });\n                                }}\n                                emojiPosition={{ right: 33, top: -244 }}\n                                maxLength={1000}\n                            >\n\n                            </SocialInput>\n                        </Form.Item>\n\n                    </Form>\n                </Spin>\n            </Modal>\n        </React.Fragment>\n    );\n}\n\n\nconst mapStateToProps = state => ({\n    app: state.app,\n    user: state.user,\n});\n\nconst mapDispatchToProps = {\n    loginMode: loginMode,\n    loading: loading,\n    setUser: setUser,\n};\nexport default connect(mapStateToProps, mapDispatchToProps)(Form.create()(withRouter(WritePostModal)));"]},"metadata":{},"sourceType":"module"}