{"ast":null,"code":"function ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); if (enumerableOnly) { symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; }); } keys.push.apply(keys, symbols); } return keys; }\n\nfunction _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; if (i % 2) { ownKeys(Object(source), true).forEach(function (key) { _defineProperty(target, key, source[key]); }); } else if (Object.getOwnPropertyDescriptors) { Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)); } else { ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } } return target; }\n\nfunction _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }\n\nimport _, { upperFirst } from 'lodash';\nimport moment from 'moment';\nimport { FETCH_CLIENT_SOCKET_IO, CLEAR_CLIENT_SOCKET_IO } from '../actions/live-action';\nimport localStorage from 'local-storage';\nimport { checkIsNeedPersist, checkNeedPersist, getPersistObj, persistRedux } from '../config';\nconst INITIAL_STATE = {\n  socket: undefined\n};\nexport default function (state = INITIAL_STATE, action) {\n  // checkNeedPersist(_.get(action, 'type'), 'live', _.get(action, 'payload'), _.get(action, 'isRestoreData'));\n  let persistStates = _.get(localStorage.get('redux') || {}, 'live') || INITIAL_STATE;\n\n  let newState = _objectSpread(_objectSpread({}, state), persistStates);\n\n  if (!_.isEqual(state, newState)) {\n    state = newState;\n  }\n\n  switch (action.type) {\n    case FETCH_CLIENT_SOCKET_IO:\n      state = _objectSpread(_objectSpread({}, state), {}, {\n        socket: action.payload\n      });\n      break;\n\n    case CLEAR_CLIENT_SOCKET_IO:\n      state = _objectSpread(_objectSpread({}, state), {}, {\n        socket: undefined\n      });\n      break;\n\n    default:\n      state = state;\n      break;\n  }\n\n  persistRedux('live', state);\n  return state;\n}","map":{"version":3,"sources":["/Users/faraheen/ccar-cms-next-mobile/redux/reducers/live-reducer.js"],"names":["_","upperFirst","moment","FETCH_CLIENT_SOCKET_IO","CLEAR_CLIENT_SOCKET_IO","localStorage","checkIsNeedPersist","checkNeedPersist","getPersistObj","persistRedux","INITIAL_STATE","socket","undefined","state","action","persistStates","get","newState","isEqual","type","payload"],"mappings":";;;;;;AAAA,OAAOA,CAAP,IAAYC,UAAZ,QAA8B,QAA9B;AACA,OAAOC,MAAP,MAAmB,QAAnB;AACA,SAASC,sBAAT,EAAiCC,sBAAjC,QAA+D,wBAA/D;AACA,OAAOC,YAAP,MAAyB,eAAzB;AACA,SAASC,kBAAT,EAA6BC,gBAA7B,EAA+CC,aAA/C,EAA8DC,YAA9D,QAAkF,WAAlF;AAEA,MAAMC,aAAa,GAAG;AAClBC,EAAAA,MAAM,EAAEC;AADU,CAAtB;AAIA,eAAe,UAAUC,KAAK,GAAGH,aAAlB,EAAiCI,MAAjC,EAAyC;AAEpD;AAEA,MAAIC,aAAa,GAAGf,CAAC,CAACgB,GAAF,CAAMX,YAAY,CAACW,GAAb,CAAiB,OAAjB,KAA6B,EAAnC,EAAuC,MAAvC,KAAkDN,aAAtE;;AACA,MAAIO,QAAQ,mCACLJ,KADK,GAELE,aAFK,CAAZ;;AAIA,MAAG,CAACf,CAAC,CAACkB,OAAF,CAAUL,KAAV,EAAiBI,QAAjB,CAAJ,EAA+B;AAC7BJ,IAAAA,KAAK,GAAGI,QAAR;AACD;;AACD,UAAQH,MAAM,CAACK,IAAf;AACI,SAAKhB,sBAAL;AACIU,MAAAA,KAAK,mCACEA,KADF;AAEDF,QAAAA,MAAM,EAAEG,MAAM,CAACM;AAFd,QAAL;AAIA;;AACJ,SAAKhB,sBAAL;AACIS,MAAAA,KAAK,mCACEA,KADF;AAEDF,QAAAA,MAAM,EAAEC;AAFP,QAAL;AAIA;;AACJ;AACIC,MAAAA,KAAK,GAAGA,KAAR;AACA;AAfR;;AAiBAJ,EAAAA,YAAY,CAAC,MAAD,EAASI,KAAT,CAAZ;AAEA,SAAOA,KAAP;AACH","sourcesContent":["import _, { upperFirst } from 'lodash'\nimport moment from 'moment'\nimport { FETCH_CLIENT_SOCKET_IO, CLEAR_CLIENT_SOCKET_IO } from '../actions/live-action';\nimport localStorage from 'local-storage';\nimport { checkIsNeedPersist, checkNeedPersist, getPersistObj, persistRedux } from '../config';\n\nconst INITIAL_STATE = {\n    socket: undefined,\n}\n\nexport default function (state = INITIAL_STATE, action) {\n\n    // checkNeedPersist(_.get(action, 'type'), 'live', _.get(action, 'payload'), _.get(action, 'isRestoreData'));\n\n    let persistStates = _.get(localStorage.get('redux') || {}, 'live') || INITIAL_STATE;\n    let newState = {\n        ...state,\n        ...persistStates\n    }\n    if(!_.isEqual(state, newState)){\n      state = newState;\n    }\n    switch (action.type) {\n        case FETCH_CLIENT_SOCKET_IO:\n            state = {\n                ...state,\n                socket: action.payload\n            }\n            break;\n        case CLEAR_CLIENT_SOCKET_IO:\n            state = {\n                ...state,\n                socket: undefined\n            }\n            break;\n        default:\n            state = state\n            break;\n    }\n    persistRedux('live', state)\n\n    return state;\n}"]},"metadata":{},"sourceType":"module"}