{"ast":null,"code":"var _s = $RefreshSig$(),\n    _s2 = $RefreshSig$(),\n    _s3 = $RefreshSig$(),\n    _s4 = $RefreshSig$(),\n    _s5 = $RefreshSig$();\n\nvar __jsx = React.createElement;\nimport { SearchOutlined } from '@ant-design/icons';\nimport { AutoComplete, Form, Input, message } from 'antd';\nimport axios from \"axios\";\nimport _ from 'lodash';\nimport React, { useEffect, useState } from 'react';\nimport Highlighter from 'react-highlight-words';\nimport { connect } from 'react-redux';\nimport { useMediaQuery } from 'react-responsive';\nimport { v4 } from 'uuid';\nimport client from '../../feathers';\nimport { parseTagStringToPlainString } from '../carFreak/config';\nimport { notEmptyLength, convertParameterToProductListUrl, formatNumber, arrayLengthCount } from '../../common-function';\nimport { loading } from '../../redux/actions/app-actions';\nimport { withRouter } from 'next/router';\n\nvar Desktop = function Desktop(_ref) {\n  _s();\n\n  var children = _ref.children;\n  var isDesktop = useMediaQuery({\n    minWidth: 992\n  });\n  return isDesktop ? children : null;\n};\n\n_s(Desktop, \"OwvWUQgjrMnuU8GZKzxgeJ0yhK4=\", false, function () {\n  return [useMediaQuery];\n});\n\n_c = Desktop;\n\nvar Tablet = function Tablet(_ref2) {\n  _s2();\n\n  var children = _ref2.children;\n  var isTablet = useMediaQuery({\n    minWidth: 768,\n    maxWidth: 991\n  });\n  return isTablet ? children : null;\n};\n\n_s2(Tablet, \"njizuzyQ3ji1lkog3PzXeuhAluo=\", false, function () {\n  return [useMediaQuery];\n});\n\n_c2 = Tablet;\n\nvar Mobile = function Mobile(_ref3) {\n  _s3();\n\n  var children = _ref3.children;\n  var isMobile = useMediaQuery({\n    maxWidth: 767\n  });\n  return isMobile ? children : null;\n};\n\n_s3(Mobile, \"7khsyUHgctuHIPa2/KlDS6LcnT0=\", false, function () {\n  return [useMediaQuery];\n});\n\n_c3 = Mobile;\n\nvar Default = function Default(_ref4) {\n  _s4();\n\n  var children = _ref4.children;\n  var isNotMobile = useMediaQuery({\n    minWidth: 768\n  });\n  return isNotMobile ? children : null;\n};\n\n_s4(Default, \"39ICqmTSeKHbKDzaMnrZFzNNET0=\", false, function () {\n  return [useMediaQuery];\n});\n\n_c4 = Default;\nvar Option = AutoComplete.Option,\n    OptGroup = AutoComplete.OptGroup;\nvar WORD_LENGTH_TO_START_SEARCH = 2;\nvar searchBarRef = React.createRef();\nvar SEARCH_SECTIONS = [// {\n//     value: 'carFreak',\n//     text: 'CarFreaks'\n// },\n{\n  value: 'socialBoard',\n  text: 'Social Board'\n}, {\n  value: 'dealerWithAds',\n  text: 'Dealer'\n}, {\n  value: 'people',\n  text: 'User'\n}, {\n  value: 'dealer',\n  text: 'Dealer'\n}, {\n  value: 'productAds',\n  text: 'CarMarket'\n}, {\n  value: 'carspec',\n  text: 'All-NewCar'\n}];\n\nvar GlobalSearchBar = function GlobalSearchBar(props) {\n  _s5();\n\n  var _useState = useState(null),\n      searchValue = _useState[0],\n      setSearchValue = _useState[1];\n\n  var _useState2 = useState([]),\n      searchWords = _useState2[0],\n      setSearchWords = _useState2[1];\n\n  var _useState3 = useState([]),\n      dataSource = _useState3[0],\n      setDataSource = _useState3[1];\n\n  var _useState4 = useState(),\n      typingTimeout = _useState4[0],\n      setTypingTimeout = _useState4[1];\n\n  var _useState5 = useState(),\n      searchType = _useState5[0],\n      setSearchType = _useState5[1];\n\n  var _useState6 = useState(),\n      searchTypes = _useState6[0],\n      setSearchTypes = _useState6[1];\n\n  var _useState7 = useState(true),\n      isEmptyDataSource = _useState7[0],\n      setIsEmptyDataSource = _useState7[1];\n\n  var _useState8 = useState(false),\n      isFocused = _useState8[0],\n      setIsFocused = _useState8[1];\n\n  useEffect(function () {\n    if (props.searchTypes == 'all' || !props.searchTypes) {\n      setSearchTypes(SEARCH_SECTIONS);\n    } else {\n      var availableSections = _.compact(_.map(props.searchTypes, function (item) {\n        var selectedSection = _.find(SEARCH_SECTIONS, function (section) {\n          return _.isPlainObject(item) && !_.isEmpty(item) ? _.toLower(item.value) == _.toLower(section.value) : _.toLower(item) == _.toLower(section.value);\n        });\n\n        if (!selectedSection) {\n          return null;\n        }\n\n        return _.isPlainObject(item) && !_.isEmpty(item) && _.get(item, ['text']) ? item : selectedSection;\n      }));\n\n      setSearchTypes(availableSections || []);\n    }\n  }, [props.searchTypes]);\n\n  function handleSearch(value) {\n    // value = value.replace(/[\\W_]/g, \"\");\n    // value = value.replace(/[^a-zA-Z ]/g, \"\");\n    setDataSource([]);\n    setIsEmptyDataSource(true);\n\n    if (!value || value.length < WORD_LENGTH_TO_START_SEARCH) {\n      setSearchWords([]);\n    } else {\n      clearTimeout(typingTimeout);\n      setTypingTimeout(setTimeout(function () {\n        axios.post(\"\".concat(client.io.io.uri, \"globalSearch\"), {\n          params: {\n            keywords: value.trim(),\n            filterType: _.map(searchTypes, 'value')\n          }\n        }).then(function (res) {\n          var dataSource = [];\n\n          _.forEach(searchTypes, function (v) {\n            if (_.isArray(_.get(res, ['data', 'result', v.value, 'data'])) && !_.isEmpty(_.get(res, ['data', 'result', v.value, 'data']))) {\n              setIsEmptyDataSource(false);\n            }\n\n            dataSource.push({\n              title: v.text,\n              children: _.get(res, ['data', 'result', v.value, 'data']) || [],\n              total: _.get(res, ['data', 'result', v.value, 'total']) || 0,\n              value: v.value\n            });\n          });\n\n          setDataSource(dataSource);\n          setSearchWords(notEmptyLength(value.split(' ')) ? value.split(' ') : []);\n          setTypingTimeout();\n        })[\"catch\"](function (err) {\n          message.error(err.message);\n        });\n      }, 700));\n    }\n  }\n\n  ;\n\n  var renderTitle = function renderTitle(title, total) {\n    return __jsx(\"span\", null, title, __jsx(\"a\", {\n      href: \"#\",\n      style: {\n        \"float\": 'right'\n      }\n    }, \"Total: \", total));\n  };\n\n  var restructData = function restructData(data) {\n    var base = [__jsx(Option, {\n      disabled: true,\n      key: \"all\",\n      className: \"show-all\"\n    }, __jsx(Desktop, null, __jsx(\"p\", null, \"Search Car/Dealer Name\")), __jsx(Tablet, null, __jsx(\"p\", null, \"Search Car/Dealer Name\")), __jsx(Mobile, null, __jsx(\"p\", null, \"Car/Dealer Name\")))];\n\n    if (notEmptyLength(data)) {\n      var list = data.map(function (group) {\n        switch (_.get(group, ['value'])) {\n          // case 'carFreak':\n          //     return (\n          //         <OptGroup key={group.title} label={renderTitle(group.title, group.total)}>\n          //             {\n          //                 _.isArray(_.get(group, ['children'])) && !_.isEmpty(_.get(group, ['children'])) ?\n          //                     group.children.map((opt, index) => (\n          //                         <Option key={`${group.title}-${index}`} value={parseTagStringToPlainString(`${opt.title || ''} | ${opt.content || ''}`)} onClick={() => {\n          //                             if (_.isPlainObject(opt)) {\n          //                                 if (opt._id) {\n          //                                     props.router.push('/car-freaks/' + opt._id);\n          //                                 }\n          //                             }\n          //                         }}>\n          //                             <Highlighter\n          //                                 style={{ padding: '0px 10px' }}\n          //                                 highlightStyle={{ color: '#ffc069', padding: 0 }}\n          //                                 textToHighlight={parseTagStringToPlainString(`${opt.title || ''} | ${opt.content || ''}`)}\n          //                                 autoEscape={true}\n          //                                 className=\"overline\"\n          //                                 searchWords={searchWords} />\n          //                         </Option>\n          //                     ))\n          //                     :\n          //                     <Option key={`${group.title}NotFound`} value={`${group.title}NotFound`} disabled>\n          //                         <span className='d-inline-block overline' style={{ padding: '0px 10px' }} >\n          //                             {group.title} Not Found\n          //                         </span>\n          //                     </Option>\n          //             }\n          //         </OptGroup>\n          //     )\n          //     break;\n          case 'socialBoard':\n            return __jsx(OptGroup, {\n              key: group.title,\n              label: renderTitle(group.title, group.total)\n            }, _.isArray(_.get(group, ['children'])) && !_.isEmpty(_.get(group, ['children'])) ? group.children.map(function (opt, index) {\n              return __jsx(Option, {\n                key: \"\".concat(group.title, \"-\").concat(index),\n                value: parseTagStringToPlainString(\"\".concat(opt.title || '', \" | \").concat(opt.content || '')),\n                onClick: function onClick() {\n                  if (_.isPlainObject(opt)) {\n                    if (opt._id) {\n                      props.router.push('/social-board/' + opt._id);\n                    }\n                  }\n                }\n              }, __jsx(Highlighter, {\n                style: {\n                  padding: '0px 10px'\n                },\n                highlightStyle: {\n                  color: '#ffc069',\n                  padding: 0\n                },\n                textToHighlight: parseTagStringToPlainString(\"\".concat(opt.title || '', \" | \").concat(opt.content || '')),\n                autoEscape: true,\n                className: \"overline\",\n                searchWords: searchWords\n              }));\n            }) : __jsx(Option, {\n              key: \"\".concat(group.title, \"NotFound\"),\n              value: \"\".concat(group.title, \"NotFound\"),\n              disabled: true\n            }, __jsx(\"span\", {\n              className: \"d-inline-block overline\",\n              style: {\n                padding: '0px 10px'\n              }\n            }, group.title, \" Not Found\")));\n            break;\n\n          case 'people':\n            return __jsx(OptGroup, {\n              key: group.title,\n              label: renderTitle(group.title, group.total)\n            }, _.isArray(_.get(group, ['children'])) && !_.isEmpty(_.get(group, ['children'])) ? group.children.map(function (opt, index) {\n              return __jsx(Option, {\n                key: \"\".concat(group.title, \"-\").concat(index),\n                value: \"\".concat(opt.freakId || ''),\n                onClick: function onClick() {\n                  if (_.isPlainObject(opt) && !_.isEmpty(opt)) {\n                    if (opt.userurlId) {\n                      props.router.push(\"/profile/\".concat(opt.userurlId));\n                    }\n                  }\n                }\n              }, __jsx(Highlighter, {\n                style: {\n                  padding: '0px 10px'\n                },\n                highlightStyle: {\n                  color: '#ffc069',\n                  padding: 0\n                },\n                textToHighlight: \"\".concat(opt.freakId || ''),\n                autoEscape: true,\n                className: \"overline\",\n                searchWords: searchWords\n              }));\n            }) : __jsx(Option, {\n              key: \"\".concat(group.title, \"NotFound\"),\n              value: \"\".concat(group.title, \"NotFound\"),\n              disabled: true\n            }, __jsx(\"span\", {\n              className: \"d-inline-block overline\",\n              style: {\n                padding: '0px 10px'\n              }\n            }, group.title, \" Not Found\")));\n            break;\n\n          case 'dealer':\n            return __jsx(OptGroup, {\n              key: group.title,\n              label: renderTitle(group.title, group.total)\n            }, _.isArray(_.get(group, ['children'])) && !_.isEmpty(_.get(group, ['children'])) ? group.children.map(function (opt, index) {\n              return __jsx(Option, {\n                key: \"\".concat(group.title, \"-\").concat(index),\n                value: \"\".concat(opt.freakId || ''),\n                onClick: function onClick() {\n                  if (_.isPlainObject(opt) && !_.isEmpty(opt)) {\n                    if (opt._id) {\n                      props.router.push(\"/dealer/\".concat(opt.companyurlId, \"/\").concat(opt.userurlId));\n                    }\n                  }\n                }\n              }, __jsx(Highlighter, {\n                style: {\n                  padding: '0px 10px'\n                },\n                highlightStyle: {\n                  color: '#ffc069',\n                  padding: 0\n                },\n                textToHighlight: \"\".concat(opt.freakId || ''),\n                autoEscape: true,\n                className: \"overline\",\n                searchWords: searchWords\n              }));\n            }) : __jsx(Option, {\n              key: \"\".concat(group.title, \"NotFound\"),\n              value: \"\".concat(group.title, \"NotFound\"),\n              disabled: true\n            }, __jsx(\"span\", {\n              className: \"d-inline-block overline\",\n              style: {\n                padding: '0px 10px'\n              }\n            }, group.title, \" Not Found\")));\n\n          case 'productAds':\n            return __jsx(OptGroup, {\n              key: group.title,\n              label: renderTitle(group.title, group.total)\n            }, _.isArray(_.get(group, ['children'])) && !_.isEmpty(_.get(group, ['children'])) ? group.children.map(function (opt, index) {\n              return __jsx(Option, {\n                key: \"\".concat(group.title, \"-\").concat(index),\n                value: \"\".concat(opt.make ? opt.make : '', \" \").concat(opt.model ? opt.model : ''),\n                onClick: function onClick(e) {\n                  var path = convertParameterToProductListUrl({\n                    make: _.toLower(opt.make),\n                    model: _.toLower(opt.model)\n                  });\n                  props.router.push(path);\n                }\n              }, __jsx(Highlighter, {\n                style: {\n                  padding: '0px 10px'\n                },\n                highlightStyle: {\n                  color: '#ffc069',\n                  padding: 0\n                },\n                textToHighlight: \"\".concat(opt.make ? opt.make : '', \" \").concat(opt.model ? opt.model : '', \" (\").concat(opt.total ? opt.total : '', \")\") // textToHighlight={`${opt.title || ''} (${opt.total ? opt.total : ''})`}\n                ,\n                autoEscape: true,\n                className: \"overline\",\n                searchWords: searchWords\n              }));\n            }) : __jsx(Option, {\n              key: \"\".concat(group.title, \"NotFound\"),\n              value: \"\".concat(group.title, \"NotFound\"),\n              disabled: true\n            }, __jsx(\"span\", {\n              className: \"d-inline-block overline\",\n              style: {\n                padding: '0px 10px'\n              }\n            }, group.title, \" Not Found\")));\n            break;\n\n          case 'carspec':\n            return __jsx(OptGroup, {\n              key: group.title,\n              label: renderTitle(group.title, group.total)\n            }, _.isArray(_.get(group, ['children'])) && !_.isEmpty(_.get(group, ['children'])) ? group.children.map(function (opt, index) {\n              return __jsx(Option, {\n                key: \"\".concat(group.title, \"-\").concat(index),\n                value: \"\".concat(opt.make ? opt.make : '', \" \").concat(opt.model ? opt.model : ''),\n                onClick: function onClick() {\n                  props.router.push(\"/newcar/details/\".concat(opt.make, \"/\").concat(opt.model));\n                  window.location.reload();\n                }\n              }, __jsx(Highlighter, {\n                style: {\n                  padding: '0px 10px'\n                },\n                highlightStyle: {\n                  color: '#ffc069',\n                  padding: 0\n                },\n                textToHighlight: \"\".concat(opt.make ? opt.make : '', \" \").concat(opt.model ? opt.model : ''),\n                autoEscape: true,\n                className: \"overline\",\n                searchWords: searchWords\n              }));\n            }) : __jsx(Option, {\n              key: \"\".concat(group.title, \"NotFound\"),\n              value: \"\".concat(group.title, \"NotFound\"),\n              disabled: true\n            }, __jsx(\"span\", {\n              className: \"d-inline-block overline\",\n              style: {\n                padding: '0px 10px'\n              }\n            }, group.title, \" Not Found\")));\n\n          case 'dealerWithAds':\n            return __jsx(OptGroup, {\n              key: group.title,\n              label: renderTitle(group.title, group.total)\n            }, _.isArray(_.get(group, ['children'])) && !_.isEmpty(_.get(group, ['children'])) ? group.children.map(function (opt, index) {\n              return __jsx(Option, {\n                key: \"\".concat(group.title, \"-\").concat(index),\n                value: \"\".concat(opt.fullName || '', \" | \").concat(opt.companyName ? opt.companyName : ''),\n                onClick: function onClick() {\n                  if (opt.companyurlId && opt.userurlId) {\n                    props.router.push(\"/dealer/\".concat(_.get(opt, 'companyurlId'), \"/\").concat(_.get(opt, 'userurlId')));\n                  }\n                }\n              }, __jsx(Highlighter, {\n                style: {\n                  padding: '0px 10px'\n                },\n                highlightStyle: {\n                  color: '#ffc069',\n                  padding: 0\n                },\n                textToHighlight: \"\".concat(opt.fullName || '', \" | \").concat(opt.companyName ? opt.companyName : '', \" (\").concat(formatNumber(opt.total, 'auto', true, 0, true), \")\"),\n                autoEscape: true,\n                className: \"overline\",\n                searchWords: searchWords\n              }));\n            }) : __jsx(Option, {\n              key: 'notFoundCompany',\n              value: 'notFoundCompany',\n              disabled: true\n            }, __jsx(\"span\", {\n              className: \"d-inline-block overline\",\n              style: {\n                padding: '0px 10px'\n              },\n              disabled: true\n            }, group.title, \" Not Found\")));\n\n          case 'company':\n            return __jsx(OptGroup, {\n              key: group.title,\n              label: renderTitle(group.title, group.total)\n            }, _.isArray(_.get(group, ['children'])) && !_.isEmpty(_.get(group, ['children'])) ? group.children.map(function (opt, index) {\n              return __jsx(Option, {\n                key: \"\".concat(group.title, \"-\").concat(index),\n                onClick: function onClick() {\n                  props.router.push('/profile/' + opt.userurlId);\n                }\n              }, __jsx(Highlighter, {\n                style: {\n                  padding: '0px 10px'\n                },\n                highlightStyle: {\n                  color: '#ffc069',\n                  padding: 0\n                },\n                textToHighlight: opt.name ? opt.name : '',\n                autoEscape: true,\n                className: \"overline\",\n                searchWords: searchWords\n              }));\n            }) : __jsx(Option, {\n              key: \"\".concat(group.title, \"NotFound\"),\n              value: \"\".concat(group.title, \"NotFound\"),\n              disabled: true\n            }, __jsx(\"span\", {\n              className: \"d-inline-block overline\",\n              style: {\n                padding: '0px 10px'\n              }\n            }, group.title, \" Not Found\")));\n\n          default:\n            return __jsx(OptGroup, {\n              key: v4(),\n              label: renderTitle('Others', group.total)\n            }, _.isArray(_.get(group, ['children'])) && !_.isEmpty(_.get(group, ['children'])) ? group.children.map(function (opt, index) {\n              return __jsx(Option, {\n                key: \"\".concat(group.title, \"-\").concat(index)\n              }, __jsx(Highlighter, {\n                style: {\n                  padding: '0px 10px'\n                },\n                highlightStyle: {\n                  color: '#ffc069',\n                  padding: 0\n                },\n                textToHighlight: opt.value ? opt.value : '',\n                autoEscape: true,\n                className: \"overline\",\n                searchWords: searchWords\n              }));\n            }) : __jsx(Option, {\n              key: \"othersNotFound\",\n              value: \"othersNotFound\"\n            }, __jsx(\"span\", {\n              className: \"d-inline-block overline\",\n              style: {\n                padding: '0px 10px'\n              },\n              disabled: true\n            }, \"Not Found\")));\n        }\n      });\n      base = _.union(list, base);\n    }\n\n    return base;\n  };\n\n  return __jsx(React.Fragment, null, __jsx(AutoComplete, {\n    className: \"certain-category-search layout-global-search\",\n    dropdownClassName: \"certain-category-search-dropdown group-item-scroll\" // dropdownMatchSelectWidth={false}\n    ,\n    dropdownStyle: {\n      width: 300\n    } // size=\"large\"\n    ,\n    style: {\n      width: '100%'\n    },\n    ref: searchBarRef,\n    dataSource: restructData(dataSource),\n    onSearch: handleSearch,\n    placeholder: \"Search here\",\n    optionLabelProp: \"value\",\n    open: !isEmptyDataSource && isFocused,\n    onChange: function onChange(value) {\n      setSearchValue(value);\n    },\n    onSelect: function onSelect() {\n      setIsFocused(false);\n      setIsEmptyDataSource(true);\n\n      if (searchBarRef.current) {\n        searchBarRef.current.blur();\n      }\n    },\n    defaultActiveFirstOption: false,\n    onFocus: function onFocus() {\n      setIsFocused(true);\n    },\n    onBlur: function onBlur() {\n      setIsFocused(false);\n    }\n  }, __jsx(Input, {\n    className: \"search-input\",\n    border: \"false\",\n    size: \"large\",\n    value: searchValue // onSearch={() => props.router.push('/cars-on-sale')}\n    ,\n    onPressEnter: function onPressEnter(e) {\n      if (e.target.value) {\n        // let path = `/cars-on-sale-search?page=${1}${`&${queryStringifyNestedObject({ title: searchValue })}`}`;\n        if (props.enterSearchCarFreaks) {\n          var text = e.target.value || '';\n          var canSearchHashTag = false;\n\n          if (text.indexOf('#') == 0 && arrayLengthCount(text.split(' ')) == 1) {\n            canSearchHashTag = true;\n          }\n\n          text = text.replace('#', '');\n\n          if (canSearchHashTag) {\n            props.router.push(\"/hashtag/\".concat(text));\n          } else {\n            props.router.push(\"/search-car-freaks?matchStr=\".concat(text));\n          }\n        } else {\n          var path = convertParameterToProductListUrl({\n            title: searchValue\n          });\n          props.router.push(path);\n        }\n      }\n    },\n    suffix: __jsx(SearchOutlined, {\n      onClick: function onClick(e) {\n        // let path = `/cars-on-sale-search?page=${1}${`&${queryStringifyNestedObject({ title: searchValue })}`}`;\n        var path = convertParameterToProductListUrl({\n          title: searchValue\n        });\n        props.router.push(path);\n      }\n    })\n  })));\n};\n\n_s5(GlobalSearchBar, \"Vfw65eoA60tomF2En6BdqWrVcGA=\");\n\n_c5 = GlobalSearchBar;\n\nvar mapStateToProps = function mapStateToProps(state) {\n  return {\n    app: state.app,\n    user: state.user\n  };\n};\n\nvar mapDispatchToProps = {\n  loading: loading\n};\nexport default connect(mapStateToProps, mapDispatchToProps)(withRouter(GlobalSearchBar));\n\nvar _c, _c2, _c3, _c4, _c5;\n\n$RefreshReg$(_c, \"Desktop\");\n$RefreshReg$(_c2, \"Tablet\");\n$RefreshReg$(_c3, \"Mobile\");\n$RefreshReg$(_c4, \"Default\");\n$RefreshReg$(_c5, \"GlobalSearchBar\");","map":{"version":3,"sources":["/Users/faraheen/ccar-cms-next-mobile/components/general/global-search-bar.jsx"],"names":["SearchOutlined","AutoComplete","Form","Input","message","axios","_","React","useEffect","useState","Highlighter","connect","useMediaQuery","v4","client","parseTagStringToPlainString","notEmptyLength","convertParameterToProductListUrl","formatNumber","arrayLengthCount","loading","withRouter","Desktop","children","isDesktop","minWidth","Tablet","isTablet","maxWidth","Mobile","isMobile","Default","isNotMobile","Option","OptGroup","WORD_LENGTH_TO_START_SEARCH","searchBarRef","createRef","SEARCH_SECTIONS","value","text","GlobalSearchBar","props","searchValue","setSearchValue","searchWords","setSearchWords","dataSource","setDataSource","typingTimeout","setTypingTimeout","searchType","setSearchType","searchTypes","setSearchTypes","isEmptyDataSource","setIsEmptyDataSource","isFocused","setIsFocused","availableSections","compact","map","item","selectedSection","find","section","isPlainObject","isEmpty","toLower","get","handleSearch","length","clearTimeout","setTimeout","post","io","uri","params","keywords","trim","filterType","then","res","forEach","v","isArray","push","title","total","split","err","error","renderTitle","restructData","data","base","list","group","opt","index","content","_id","router","padding","color","freakId","userurlId","companyurlId","make","model","e","path","window","location","reload","fullName","companyName","name","union","width","current","blur","target","enterSearchCarFreaks","canSearchHashTag","indexOf","replace","mapStateToProps","state","app","user","mapDispatchToProps"],"mappings":"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","sourcesContent":["import { SearchOutlined } from '@ant-design/icons';\nimport { AutoComplete, Form, Input, message } from 'antd';\nimport axios from \"axios\";\nimport _ from 'lodash';\nimport React, { useEffect, useState } from 'react';\nimport Highlighter from 'react-highlight-words';\nimport { connect } from 'react-redux';\nimport { useMediaQuery } from 'react-responsive';\nimport { v4 } from 'uuid';\nimport client from '../../feathers';\nimport { parseTagStringToPlainString } from '../carFreak/config';\nimport { notEmptyLength, convertParameterToProductListUrl, formatNumber, arrayLengthCount } from '../../common-function';\nimport { loading } from '../../redux/actions/app-actions';\nimport { withRouter } from 'next/router';\n\n\n\nconst Desktop = ({ children }) => {\n    const isDesktop = useMediaQuery({ minWidth: 992 })\n    return isDesktop ? children : null\n}\nconst Tablet = ({ children }) => {\n    const isTablet = useMediaQuery({ minWidth: 768, maxWidth: 991 })\n    return isTablet ? children : null\n}\nconst Mobile = ({ children }) => {\n    const isMobile = useMediaQuery({ maxWidth: 767 })\n    return isMobile ? children : null\n}\nconst Default = ({ children }) => {\n    const isNotMobile = useMediaQuery({ minWidth: 768 })\n    return isNotMobile ? children : null\n}\n\nconst { Option, OptGroup } = AutoComplete;\nconst WORD_LENGTH_TO_START_SEARCH = 2;\n\nconst searchBarRef = React.createRef();\n\nconst SEARCH_SECTIONS = [\n    // {\n    //     value: 'carFreak',\n    //     text: 'CarFreaks'\n    // },\n    {\n        value: 'socialBoard',\n        text: 'Social Board'\n    },\n    {\n        value: 'dealerWithAds',\n        text: 'Dealer',\n    },\n    {\n        value: 'people',\n        text: 'User',\n    },\n    {\n        value: 'dealer',\n        text: 'Dealer',\n    },\n    {\n        value: 'productAds',\n        text: 'CarMarket',\n    },\n    {\n        value: 'carspec',\n        text: 'All-NewCar',\n    },\n]\n\nconst GlobalSearchBar = (props) => {\n\n    const [searchValue, setSearchValue] = useState(null);\n    const [searchWords, setSearchWords] = useState([]);\n    const [dataSource, setDataSource] = useState([]);\n    const [typingTimeout, setTypingTimeout] = useState();\n    const [searchType, setSearchType] = useState();\n    const [searchTypes, setSearchTypes] = useState();\n    const [isEmptyDataSource, setIsEmptyDataSource] = useState(true);\n    const [isFocused, setIsFocused] = useState(false);\n\n    useEffect(() => {\n        if (props.searchTypes == 'all' || !props.searchTypes) {\n            setSearchTypes(SEARCH_SECTIONS);\n        } else {\n            let availableSections = _.compact(_.map(props.searchTypes, function (item) {\n                let selectedSection = _.find(SEARCH_SECTIONS, function (section) {\n                    return _.isPlainObject(item) && !_.isEmpty(item) ? _.toLower(item.value) == _.toLower(section.value) : _.toLower(item) == _.toLower(section.value);\n                })\n                if (!selectedSection) {\n                    return null;\n                }\n\n                return _.isPlainObject(item) && !_.isEmpty(item) && _.get(item, ['text']) ? item : selectedSection;\n            }));\n            setSearchTypes(availableSections || [])\n        }\n    }, [props.searchTypes])\n\n\n    function handleSearch(value) {\n\n        // value = value.replace(/[\\W_]/g, \"\");\n        // value = value.replace(/[^a-zA-Z ]/g, \"\");\n        setDataSource([]);\n        setIsEmptyDataSource(true);\n        if (!value || value.length < WORD_LENGTH_TO_START_SEARCH) {\n            setSearchWords([]);\n        } else {\n            clearTimeout(typingTimeout);\n            setTypingTimeout(setTimeout(() => {\n                axios.post(`${client.io.io.uri}globalSearch`, {\n                    params: {\n                        keywords: value.trim(),\n                        filterType: _.map(searchTypes, 'value'),\n                    }\n                }).then(res => {\n                 \n                    let dataSource = [];\n\n                    _.forEach(searchTypes, function (v) {\n                        if (_.isArray(_.get(res, ['data', 'result', v.value, 'data'])) && !_.isEmpty(_.get(res, ['data', 'result', v.value, 'data']))) {\n                            setIsEmptyDataSource(false);\n                        }\n                        dataSource.push(\n                            {\n                                title: v.text,\n                                children: _.get(res, ['data', 'result', v.value, 'data']) || [],\n                                total: _.get(res, ['data', 'result', v.value, 'total']) || 0,\n                                value: v.value\n                            }\n                        )\n                    })\n                    setDataSource(dataSource);\n                    setSearchWords(notEmptyLength(value.split(' ')) ? value.split(' ') : []);\n                    setTypingTimeout();\n                }).catch(err => {\n                    message.error(err.message)\n                });\n            }, 700)\n            )\n        }\n    };\n\n    const renderTitle = (title, total) => {\n        return (\n            <span>\n                {title}\n                <a href=\"#\" style={{ float: 'right' }}>\n                    Total: {total}\n                </a>\n            </span>\n        );\n    }\n    const restructData = (data) => {\n        let base = [\n            <Option disabled key=\"all\" className=\"show-all\">\n                <Desktop>\n                    <p>\n                        Search Car/Dealer Name\n                    </p>\n                </Desktop>\n                <Tablet>\n                    <p>\n                        Search Car/Dealer Name\n                    </p>\n                </Tablet>\n                <Mobile>\n                    <p>\n                        Car/Dealer Name\n                    </p>\n                </Mobile>\n            </Option>\n        ];\n\n        if (notEmptyLength(data)) {\n            let list = data.map(group => {\n                switch (_.get(group, ['value'])) {\n                    // case 'carFreak':\n                    //     return (\n                    //         <OptGroup key={group.title} label={renderTitle(group.title, group.total)}>\n                    //             {\n                    //                 _.isArray(_.get(group, ['children'])) && !_.isEmpty(_.get(group, ['children'])) ?\n                    //                     group.children.map((opt, index) => (\n                    //                         <Option key={`${group.title}-${index}`} value={parseTagStringToPlainString(`${opt.title || ''} | ${opt.content || ''}`)} onClick={() => {\n                    //                             if (_.isPlainObject(opt)) {\n                    //                                 if (opt._id) {\n                    //                                     props.router.push('/car-freaks/' + opt._id);\n                    //                                 }\n                    //                             }\n                    //                         }}>\n                    //                             <Highlighter\n                    //                                 style={{ padding: '0px 10px' }}\n                    //                                 highlightStyle={{ color: '#ffc069', padding: 0 }}\n                    //                                 textToHighlight={parseTagStringToPlainString(`${opt.title || ''} | ${opt.content || ''}`)}\n                    //                                 autoEscape={true}\n                    //                                 className=\"overline\"\n                    //                                 searchWords={searchWords} />\n                    //                         </Option>\n                    //                     ))\n                    //                     :\n                    //                     <Option key={`${group.title}NotFound`} value={`${group.title}NotFound`} disabled>\n                    //                         <span className='d-inline-block overline' style={{ padding: '0px 10px' }} >\n                    //                             {group.title} Not Found\n                    //                         </span>\n                    //                     </Option>\n                    //             }\n                    //         </OptGroup>\n                    //     )\n                    //     break;\n                    case 'socialBoard':\n                        return (\n                            <OptGroup key={group.title} label={renderTitle(group.title, group.total)}>\n                                {\n                                    _.isArray(_.get(group, ['children'])) && !_.isEmpty(_.get(group, ['children'])) ?\n                                        group.children.map((opt, index) => (\n                                            <Option key={`${group.title}-${index}`} value={parseTagStringToPlainString(`${opt.title || ''} | ${opt.content || ''}`)} onClick={() => {\n                                                if (_.isPlainObject(opt)) {\n                                                    if (opt._id) {\n                                                        props.router.push('/social-board/' + opt._id);\n                                                    }\n                                                }\n                                            }}>\n                                                <Highlighter\n                                                    style={{ padding: '0px 10px' }}\n                                                    highlightStyle={{ color: '#ffc069', padding: 0 }}\n                                                    textToHighlight={parseTagStringToPlainString(`${opt.title || ''} | ${opt.content || ''}`)}\n                                                    autoEscape={true}\n                                                    className=\"overline\"\n                                                    searchWords={searchWords} />\n                                            </Option>\n                                        ))\n                                        :\n                                        <Option key={`${group.title}NotFound`} value={`${group.title}NotFound`} disabled>\n                                            <span className='d-inline-block overline' style={{ padding: '0px 10px' }} >\n                                                {group.title} Not Found\n                                                </span>\n                                        </Option>\n                                }\n                            </OptGroup>\n                        )\n                        break;\n                    case 'people':\n\n                        return (\n                            <OptGroup key={group.title} label={renderTitle(group.title, group.total)}>\n                                {\n                                    _.isArray(_.get(group, ['children'])) && !_.isEmpty(_.get(group, ['children'])) ?\n                                        group.children.map((opt, index) => (\n                                            <Option key={`${group.title}-${index}`} value={`${opt.freakId || ''}`} onClick={() => {\n                                                if (_.isPlainObject(opt) && !_.isEmpty(opt)) {\n                                                    if (opt.userurlId) {\n                                                        props.router.push(`/profile/${opt.userurlId}`);\n                                                    }\n                                                }\n                                            }}>\n                                                <Highlighter\n                                                    style={{ padding: '0px 10px' }}\n                                                    highlightStyle={{ color: '#ffc069', padding: 0 }}\n                                                    textToHighlight={`${opt.freakId || ''}`}\n                                                    autoEscape={true}\n                                                    className=\"overline\"\n                                                    searchWords={searchWords} />\n                                            </Option>\n                                        ))\n                                        :\n                                        <Option key={`${group.title}NotFound`} value={`${group.title}NotFound`} disabled>\n                                            <span className='d-inline-block overline' style={{ padding: '0px 10px' }} >\n                                                {group.title} Not Found\n                                        </span>\n                                        </Option>\n                                }\n                            </OptGroup>\n                        )\n                        break;\n                    case 'dealer':\n\n                        return (\n                            <OptGroup key={group.title} label={renderTitle(group.title, group.total)}>\n                                {\n                                    _.isArray(_.get(group, ['children'])) && !_.isEmpty(_.get(group, ['children'])) ?\n                                        group.children.map((opt, index) => (\n                                            <Option key={`${group.title}-${index}`} value={`${opt.freakId || ''}`} onClick={() => {\n                                                if (_.isPlainObject(opt) && !_.isEmpty(opt)) {\n                                                    if (opt._id) {\n                                                        props.router.push(`/dealer/${opt.companyurlId}/${opt.userurlId}`);\n                                                    }\n                                                }\n                                            }}>\n                                                <Highlighter\n                                                    style={{ padding: '0px 10px' }}\n                                                    highlightStyle={{ color: '#ffc069', padding: 0 }}\n                                                    textToHighlight={`${opt.freakId || ''}`}\n                                                    autoEscape={true}\n                                                    className=\"overline\"\n                                                    searchWords={searchWords} />\n                                            </Option>\n                                        ))\n                                        :\n                                        <Option key={`${group.title}NotFound`} value={`${group.title}NotFound`} disabled>\n                                            <span className='d-inline-block overline' style={{ padding: '0px 10px' }} >\n                                                {group.title} Not Found\n                                        </span>\n                                        </Option>\n                                }\n                            </OptGroup>\n                        )\n                    case 'productAds':\n                        return (\n                            <OptGroup key={group.title} label={renderTitle(group.title, group.total)}>\n                                {\n                                    _.isArray(_.get(group, ['children'])) && !_.isEmpty(_.get(group, ['children'])) ?\n                                        group.children.map((opt, index) => (\n                                            <Option key={`${group.title}-${index}`} value={`${opt.make ? opt.make : ''} ${opt.model ? opt.model : ''}`} onClick={(e) => {\n                                                let path = convertParameterToProductListUrl({ make: _.toLower(opt.make), model: _.toLower(opt.model) })\n                                                props.router.push(path);\n\n                                            }}>\n                                                <Highlighter\n                                                    style={{ padding: '0px 10px' }}\n                                                    highlightStyle={{ color: '#ffc069', padding: 0 }}\n                                                    textToHighlight={`${opt.make ? opt.make : ''} ${opt.model ? opt.model : ''} (${opt.total ? opt.total : ''})`}\n                                                    // textToHighlight={`${opt.title || ''} (${opt.total ? opt.total : ''})`}\n                                                    autoEscape={true}\n                                                    className=\"overline\"\n                                                    searchWords={searchWords} />\n                                            </Option>\n                                        ))\n                                        :\n                                        <Option key={`${group.title}NotFound`} value={`${group.title}NotFound`} disabled>\n                                            <span className='d-inline-block overline' style={{ padding: '0px 10px' }} >\n                                                {group.title} Not Found\n                                                </span>\n                                        </Option>\n                                }\n                            </OptGroup>\n                        )\n                        break;\n                    case 'carspec':\n                        return (\n                            <OptGroup key={group.title} label={renderTitle(group.title, group.total)}>\n                                {\n                                    _.isArray(_.get(group, ['children'])) && !_.isEmpty(_.get(group, ['children'])) ?\n                                        group.children.map((opt, index) => (\n                                            <Option key={`${group.title}-${index}`} value={`${opt.make ? opt.make : ''} ${opt.model ? opt.model : ''}`} onClick={() => {\n                                                props.router.push(`/newcar/details/${opt.make}/${opt.model}`);\n                                                window.location.reload()\n                                            }}>\n                                                <Highlighter\n                                                    style={{ padding: '0px 10px' }}\n                                                    highlightStyle={{ color: '#ffc069', padding: 0 }}\n                                                    textToHighlight={`${opt.make ? opt.make : ''} ${opt.model ? opt.model : ''}`}\n                                                    autoEscape={true}\n                                                    className=\"overline\"\n                                                    searchWords={searchWords} />\n                                            </Option>\n                                        ))\n                                        :\n                                        <Option key={`${group.title}NotFound`} value={`${group.title}NotFound`} disabled>\n                                            <span className='d-inline-block overline' style={{ padding: '0px 10px' }} >\n                                                {group.title} Not Found\n                                                </span>\n                                        </Option>\n                                }\n                            </OptGroup>\n                        )\n                    case 'dealerWithAds':\n                        return (\n                            <OptGroup key={group.title} label={renderTitle(group.title, group.total)}>\n                                {\n                                    _.isArray(_.get(group, ['children'])) && !_.isEmpty(_.get(group, ['children'])) ?\n                                        group.children.map((opt, index) => (\n                                            <Option key={`${group.title}-${index}`} value={`${opt.fullName || ''} | ${opt.companyName ? opt.companyName : ''}`} onClick={() => {\n                                                if (opt.companyurlId && opt.userurlId) {\n                                                    props.router.push(`/dealer/${_.get(opt, 'companyurlId')}/${_.get(opt, 'userurlId')}`);\n                                                }\n                                            }}>\n                                                <Highlighter\n                                                    style={{ padding: '0px 10px' }}\n                                                    highlightStyle={{ color: '#ffc069', padding: 0 }}\n                                                    textToHighlight={`${opt.fullName || ''} | ${opt.companyName ? opt.companyName : ''} (${formatNumber(opt.total, 'auto', true, 0, true)})`}\n                                                    autoEscape={true}\n                                                    className=\"overline\"\n                                                    searchWords={searchWords} />\n                                            </Option>\n                                        ))\n                                        :\n                                        <Option key={'notFoundCompany'} value={'notFoundCompany'} disabled>\n                                            <span className='d-inline-block overline' style={{ padding: '0px 10px' }} disabled>\n                                                {group.title} Not Found\n                                            </span>\n                                        </Option>\n                                }\n                            </OptGroup>\n                        )\n                    case 'company':\n                        return <OptGroup key={group.title} label={renderTitle(group.title, group.total)}>\n                            {\n                                _.isArray(_.get(group, ['children'])) && !_.isEmpty(_.get(group, ['children'])) ?\n                                    group.children.map((opt, index) => (\n                                        <Option key={`${group.title}-${index}`} onClick={() => { props.router.push('/profile/' + opt.userurlId); }}>\n                                            <Highlighter\n                                                style={{ padding: '0px 10px' }}\n                                                highlightStyle={{ color: '#ffc069', padding: 0 }}\n                                                textToHighlight={opt.name ? opt.name : ''}\n                                                autoEscape={true}\n                                                className=\"overline\"\n                                                searchWords={searchWords} />\n                                        </Option>\n                                    ))\n                                    :\n                                    <Option key={`${group.title}NotFound`} value={`${group.title}NotFound`} disabled>\n                                        <span className='d-inline-block overline' style={{ padding: '0px 10px' }} >\n                                            {group.title} Not Found\n                                            </span>\n                                    </Option>\n                            }\n                        </OptGroup>\n\n                    default:\n                        return (\n                            <OptGroup key={v4()} label={renderTitle('Others', group.total)}>\n                                {\n                                    _.isArray(_.get(group, ['children'])) && !_.isEmpty(_.get(group, ['children'])) ?\n                                        group.children.map((opt, index) => (\n                                            <Option key={`${group.title}-${index}`}>\n                                                <Highlighter\n                                                    style={{ padding: '0px 10px' }}\n                                                    highlightStyle={{ color: '#ffc069', padding: 0 }}\n                                                    textToHighlight={opt.value ? opt.value : ''}\n                                                    autoEscape={true}\n                                                    className=\"overline\"\n                                                    searchWords={searchWords} />\n                                            </Option>\n                                        ))\n                                        :\n                                        <Option key={`othersNotFound`} value={`othersNotFound`}>\n                                            <span className='d-inline-block overline' style={{ padding: '0px 10px' }} disabled>\n                                                Not Found\n                                            </span>\n                                        </Option>\n                                }\n                            </OptGroup>\n                        )\n                }\n            })\n\n            base = _.union(list, base);\n        }\n\n        return base;\n    }\n\n    return (\n        <React.Fragment>\n            <AutoComplete\n                className=\"certain-category-search layout-global-search\"\n                dropdownClassName=\"certain-category-search-dropdown group-item-scroll\"\n                // dropdownMatchSelectWidth={false}\n                dropdownStyle={{ width: 300 }}\n                // size=\"large\"\n                style={{ width: '100%' }}\n                ref={searchBarRef}\n                dataSource={restructData(dataSource)}\n                onSearch={handleSearch}\n                placeholder=\"Search here\"\n                optionLabelProp=\"value\"\n                open={!isEmptyDataSource && isFocused}\n                onChange={(value) => {\n                    setSearchValue(value);\n                }}\n                onSelect={() => {\n                    setIsFocused(false)\n                    setIsEmptyDataSource(true)\n                    if (searchBarRef.current) {\n                        searchBarRef.current.blur();\n                    }\n                }}\n                defaultActiveFirstOption={false}\n                onFocus={() => {\n                    setIsFocused(true)\n                }}\n                onBlur={() => {\n                    setIsFocused(false)\n                }}\n\n            >\n                <Input\n                    className=\"search-input\"\n                    border=\"false\"\n                    size=\"large\"\n                    value={searchValue}\n                    // onSearch={() => props.router.push('/cars-on-sale')}\n                    onPressEnter={(e) => {\n                        if (e.target.value) {\n                            // let path = `/cars-on-sale-search?page=${1}${`&${queryStringifyNestedObject({ title: searchValue })}`}`;\n                            if (props.enterSearchCarFreaks) {\n                                let text = e.target.value || '';\n                                let canSearchHashTag = false;\n                                if (text.indexOf('#') == 0 && arrayLengthCount(text.split(' ')) == 1) {\n                                    canSearchHashTag = true;\n                                }\n                                text = text.replace('#', '');\n                                if (canSearchHashTag) {\n                                    props.router.push(`/hashtag/${text}`);\n                                } else {\n                                    props.router.push(`/search-car-freaks?matchStr=${text}`);\n                                }\n                            } else {\n                                let path = convertParameterToProductListUrl({ title: searchValue });\n                                props.router.push(path);\n                            }\n                        }\n                    }}\n                    suffix={\n                        <SearchOutlined onClick={(e) => {\n                            // let path = `/cars-on-sale-search?page=${1}${`&${queryStringifyNestedObject({ title: searchValue })}`}`;\n                            let path = convertParameterToProductListUrl({ title: searchValue });\n                            props.router.push(path);\n                        }} />\n                    }\n                />\n            </AutoComplete>\n        </React.Fragment>\n    );\n}\n\n\nconst mapStateToProps = state => ({\n    app: state.app,\n    user: state.user,\n});\n\nconst mapDispatchToProps = {\n    loading,\n};\nexport default connect(mapStateToProps, mapDispatchToProps)(withRouter(GlobalSearchBar));"]},"metadata":{},"sourceType":"module"}