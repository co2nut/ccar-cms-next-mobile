{"ast":null,"code":"function ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); if (enumerableOnly) { symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; }); } keys.push.apply(keys, symbols); } return keys; }\n\nfunction _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; if (i % 2) { ownKeys(Object(source), true).forEach(function (key) { _defineProperty(target, key, source[key]); }); } else if (Object.getOwnPropertyDescriptors) { Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)); } else { ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } } return target; }\n\nfunction _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }\n\nimport { STEPS_PROPS_CURRENT, FORM_ONE } from '../actions/register-actions';\nimport localStorage from 'local-storage';\nimport { checkIsNeedPersist, checkNeedPersist, getPersistObj, persistRedux } from '../config';\nimport _ from 'lodash';\nconst INITIAL_STATE = {\n  current: 0,\n  formOne: {}\n};\n\nconst appReducer = (state = INITIAL_STATE, action) => {\n  // checkNeedPersist(_.get(action, 'type'), 'register', _.get(action, 'payload'), _.get(action, 'isRestoreData'));\n  let persistStates = _.get(localStorage.get('redux') || {}, 'productsList') || INITIAL_STATE;\n\n  let newState = _objectSpread(_objectSpread({}, state), persistStates);\n\n  if (!_.isEqual(state, newState)) {\n    state = newState;\n  }\n\n  switch (action.type) {\n    case STEPS_PROPS_CURRENT:\n      state = _objectSpread(_objectSpread({}, state), {}, {\n        current: action.data\n      });\n      break;\n\n    case FORM_ONE:\n      state = _objectSpread(_objectSpread({}, state), {}, {\n        formOne: action.data\n      });\n      break;\n\n    default:\n      state = state;\n      break;\n  }\n\n  persistRedux('register', state);\n  return state;\n};\n\nexport default appReducer;","map":{"version":3,"sources":["/Users/faraheen/ccar-cms-next-mobile/redux/reducers/register-reducer.js"],"names":["STEPS_PROPS_CURRENT","FORM_ONE","localStorage","checkIsNeedPersist","checkNeedPersist","getPersistObj","persistRedux","_","INITIAL_STATE","current","formOne","appReducer","state","action","persistStates","get","newState","isEqual","type","data"],"mappings":";;;;;;AAAA,SACEA,mBADF,EAEEC,QAFF,QAGO,6BAHP;AAIA,OAAOC,YAAP,MAAyB,eAAzB;AACA,SAASC,kBAAT,EAA6BC,gBAA7B,EAA+CC,aAA/C,EAA8DC,YAA9D,QAAkF,WAAlF;AACA,OAAOC,CAAP,MAAc,QAAd;AAEA,MAAMC,aAAa,GAAG;AACpBC,EAAAA,OAAO,EAAE,CADW;AAEpBC,EAAAA,OAAO,EAAE;AAFW,CAAtB;;AAKA,MAAMC,UAAU,GAAG,CAACC,KAAK,GAAGJ,aAAT,EAAwBK,MAAxB,KAAmC;AAGpD;AAEA,MAAIC,aAAa,GAAGP,CAAC,CAACQ,GAAF,CAAMb,YAAY,CAACa,GAAb,CAAiB,OAAjB,KAA6B,EAAnC,EAAuC,cAAvC,KAA0DP,aAA9E;;AACA,MAAIQ,QAAQ,mCACPJ,KADO,GAEPE,aAFO,CAAZ;;AAIA,MAAG,CAACP,CAAC,CAACU,OAAF,CAAUL,KAAV,EAAiBI,QAAjB,CAAJ,EAA+B;AAC7BJ,IAAAA,KAAK,GAAGI,QAAR;AACD;;AACD,UAAQH,MAAM,CAACK,IAAf;AACE,SAAKlB,mBAAL;AACEY,MAAAA,KAAK,mCAAQA,KAAR;AAAeH,QAAAA,OAAO,EAAEI,MAAM,CAACM;AAA/B,QAAL;AACA;;AACF,SAAKlB,QAAL;AACEW,MAAAA,KAAK,mCAAQA,KAAR;AAAeF,QAAAA,OAAO,EAAEG,MAAM,CAACM;AAA/B,QAAL;AACA;;AACF;AACEP,MAAAA,KAAK,GAAGA,KAAR;AACA;AATJ;;AAWAN,EAAAA,YAAY,CAAC,UAAD,EAAaM,KAAb,CAAZ;AAEA,SAAOA,KAAP;AACD,CA3BD;;AA6BA,eAAeD,UAAf","sourcesContent":["import {\n  STEPS_PROPS_CURRENT,\n  FORM_ONE\n} from '../actions/register-actions';\nimport localStorage from 'local-storage';\nimport { checkIsNeedPersist, checkNeedPersist, getPersistObj, persistRedux } from '../config';\nimport _ from 'lodash';\n\nconst INITIAL_STATE = {\n  current: 0,\n  formOne: {},\n}\n\nconst appReducer = (state = INITIAL_STATE, action) => {\n\n\n  // checkNeedPersist(_.get(action, 'type'), 'register', _.get(action, 'payload'), _.get(action, 'isRestoreData'));\n\n  let persistStates = _.get(localStorage.get('redux') || {}, 'productsList') || INITIAL_STATE;\n  let newState = {\n    ...state,\n    ...persistStates\n  }\n  if(!_.isEqual(state, newState)){\n    state = newState;\n  }\n  switch (action.type) {\n    case STEPS_PROPS_CURRENT:\n      state = { ...state, current: action.data };\n      break;\n    case FORM_ONE:\n      state = { ...state, formOne: action.data };\n      break;\n    default:\n      state = state;\n      break;\n  }\n  persistRedux('register', state)\n\n  return state;\n};\n\nexport default appReducer;\n"]},"metadata":{},"sourceType":"module"}