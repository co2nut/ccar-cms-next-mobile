{"ast":null,"code":"var __jsx = React.createElement;\n\nfunction ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); if (enumerableOnly) { symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; }); } keys.push.apply(keys, symbols); } return keys; }\n\nfunction _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; if (i % 2) { ownKeys(Object(source), true).forEach(function (key) { _defineProperty(target, key, source[key]); }); } else if (Object.getOwnPropertyDescriptors) { Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)); } else { ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } } return target; }\n\nfunction _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }\n\nimport { CloseOutlined } from '@ant-design/icons';\nimport { Col, Dropdown, Empty, Form, Icon, Input, Menu, message as AntMessage, Modal, Row } from 'antd';\nimport _ from \"lodash\";\nimport moment from \"moment\";\nimport React, { useEffect, useState } from 'react';\nimport { connect } from 'react-redux';\nimport { arrayLengthCount, formatNumber, getPlural, getUserName, notEmptyLength } from '../../../common-function';\nimport client from '../../../feathers';\nimport { carFreakLikeGreyIcon, carFreakLikeIcon } from '../../../icon';\nimport { loading, loginMode } from '../../../redux/actions/app-actions';\nimport LightBoxCarousel from '../../general/LightBoxCarousel';\nimport ParseTag from '../../general/ParseTag';\nimport ScrollLoadWrapper from '../../general/ScrollLoadWrapper';\nimport UserAvatar from '../../general/UserAvatar';\nimport { commentIcon } from '../../live/config';\nimport { chatRestrictTime } from '../config';\nimport CommentBox1 from './comment-box-1';\nimport LikePostButton from './like-post-button';\nimport SocialInput from './social-input';\nimport { withRouter } from 'next/router';\nimport Link from 'next/link';\nimport { routePaths } from '../../../route';\nconst messagePageSize = 6;\nconst {\n  TextArea\n} = Input;\nconst postCommentRef = React.createRef();\n\nconst PostModal = props => {\n  const {\n    0: newPostModalComment,\n    1: setNewPostModalComment\n  } = useState(false);\n  const {\n    0: messages,\n    1: setMessages\n  } = useState([]);\n  const {\n    0: post,\n    1: setPost\n  } = useState({});\n  const {\n    0: postLike,\n    1: setPostLike\n  } = useState({});\n  const {\n    0: message,\n    1: setMessage\n  } = useState('');\n  const {\n    0: messageTotal,\n    1: setMessageTotal\n  } = useState(0);\n  const {\n    0: totalLike,\n    1: setTotalLike\n  } = useState(0);\n  const {\n    0: canSendMessage,\n    1: setCanSendMessage\n  } = useState(true);\n  const {\n    0: isLoading,\n    1: setIsLoading\n  } = useState(false);\n  const {\n    0: focused,\n    1: setFocused\n  } = useState(false);\n  const {\n    form\n  } = props;\n  const {\n    getFieldDecorator\n  } = form;\n  useEffect(() => {\n    if (_.isPlainObject(props.chatInfo) && !_.isEmpty(props.chatInfo)) {\n      setFocused(false);\n      setMessages([]);\n      setPost(props.chatInfo);\n    } else {\n      setPost({});\n    }\n  }, [props.chatInfo]);\n  useEffect(() => {\n    if (_.isPlainObject(props.postLike) && !_.isEmpty(props.postLike)) {\n      setPostLike(props.postLike);\n    } else {\n      setPostLike({});\n    }\n  }, [props.postLike]);\n  useEffect(() => {\n    if (_.isPlainObject(post) && !_.isEmpty(post) && newPostModalComment) {\n      getData();\n    } else {\n      setMessages([]);\n    }\n\n    setTotalLike(!_.isNaN(parseInt(_.get(post, ['totalLike']))) ? formatNumber(_.get(post, ['totalLike']), null, true, 0, 0) : 0);\n  }, [post, newPostModalComment]);\n  useEffect(() => {\n    let visibleMode = props.visibleMode ? props.visibleMode === true ? true : false : false;\n    setNewPostModalComment(visibleMode);\n\n    if (postCommentRef.current && !focused) {\n      if (postCommentRef.current.focus) {\n        postCommentRef.current.focus();\n      }\n\n      setFocused(true);\n    }\n  });\n\n  function closeModal() {\n    props.changeVisibleMode(false);\n    setNewPostModalComment(false);\n    setMessage('');\n    setMessages([]);\n    setCanSendMessage(true);\n  }\n\n  function handleSubmit(text) {\n    if (!_.get(props.user, ['authenticated']) && !_.get(props.user, ['info', 'user', '_id'])) {\n      AntMessage.error('Please Login First!');\n      props.loginMode(true);\n      return;\n    }\n\n    if (_.get(post, ['_id']) && text) {\n      if (canSendMessage) {\n        client.authenticate().then(res => {\n          client.service('chatmessages').create({\n            chatId: post._id,\n            userId: res.user._id,\n            message: text\n          }).then(res1 => {\n            if (props.onUpdatePost) {\n              props.onUpdatePost(_objectSpread(_objectSpread({}, post), {}, {\n                totalReply: messageTotal + 1\n              }));\n            }\n\n            setMessage('');\n            setCanSendMessage(false);\n            res1.userId = res.user; //for new message appear at top after submit\n\n            let newData = [res1];\n            setMessages(newData.concat(messages)); // setMessages(messages.concat([res1]));\n\n            setMessageTotal(messageTotal + 1);\n            setTimeout(() => {\n              setCanSendMessage(true);\n            }, chatRestrictTime);\n          }).catch(err => {\n            console.log('Unable to send messages.');\n          });\n        }).catch(err => {\n          return AntMessage.error(\"Please Login.\");\n        });\n      } else {\n        AntMessage.warning('You are typing too fast...');\n      }\n    }\n  }\n\n  ;\n\n  function getData() {\n    if (_.get(post, ['_id'])) {\n      setIsLoading(true);\n      client.service('chatmessages').find({\n        query: {\n          chatId: post._id,\n          $populate: 'userId',\n          $limit: messagePageSize,\n          $sort: {\n            _id: -1\n          },\n          $skip: messages.length\n        }\n      }).then(res => {\n        setIsLoading(false);\n\n        if (res.data.length > 0) {\n          let newMessages = messages.concat(res.data);\n          setMessages(newMessages);\n        } //if not found , remain , no need set empty\n        // else {\n        //     setMessages([])\n        // }\n\n\n        setMessageTotal(res.total);\n      }).catch(err => {\n        console.log(err);\n        setIsLoading(false);\n      });\n    }\n  }\n\n  function handleCommentChange(data) {\n    if (_.isPlainObject(data) && !_.isEmpty(data)) {\n      let newMessages = _.map(messages, function (v) {\n        return _.get(v, ['_id']) == _.get(data, ['_id']) ? data : v;\n      });\n\n      setMessages(newMessages);\n    }\n  }\n\n  function handleRemoveComment(data) {\n    if (_.isPlainObject(data) && !_.isEmpty(data)) {\n      let newMessages = _.filter(messages, function (v) {\n        return _.get(v, ['_id']) != _.get(data, ['_id']);\n      });\n\n      setMessages(newMessages);\n    }\n  }\n\n  let emojiPosition = {\n    top: -360,\n    right: 0\n  };\n  return __jsx(Modal // title=\"Comment Post\"\n  , {\n    visible: newPostModalComment,\n    onCancel: e => {\n      closeModal();\n    },\n    footer: null,\n    width: 720,\n    centered: true,\n    maskClosable: false,\n    className: \" no-padding-modal-body modal-body-background-transparent\",\n    closable: true,\n    closeIcon: __jsx(\"span\", {\n      className: \"padding-md background-black-opacity-70 flex-justify-center flex-items-align-center\"\n    }, __jsx(CloseOutlined, {\n      className: \"white\",\n      style: {\n        fontSize: 20\n      }\n    }))\n  }, __jsx(\"div\", {\n    className: \"show-carousel-dots-inside carousel-background-black background-black\"\n  }, __jsx(LightBoxCarousel, {\n    height: '30vh',\n    images: _.compact(_.map(_.get(post, ['mediaList']), function (v) {\n      return _.get(v, ['url']) || null;\n    }))\n  })), __jsx(\"div\", {\n    className: \"padding-x-lg padding-y-md background-white round-border-bottom relative-wrapper\"\n  }, !props.hideAction ? __jsx(\"span\", {\n    className: \"d-inline-block\",\n    style: {\n      position: 'absolute',\n      top: 10,\n      right: 10\n    }\n  }, __jsx(Dropdown, {\n    overlay: __jsx(Menu, null, __jsx(Menu.Item, {\n      key: _.get(post, ['_id']) + 'goToPost'\n    }, __jsx(Link, {\n      shallow: false,\n      passHref: true,\n      href: routePaths.viewCarFreaks.to || '/',\n      as: typeof routePaths.viewCarFreaks.as == 'function' ? routePaths.viewCarFreaks.as(post) : '/'\n    }, __jsx(\"a\", null, __jsx(\"span\", null, \"Go To Post\")))))\n  }, __jsx(Icon, {\n    type: \"more\",\n    className: \"black\",\n    style: {\n      fontSize: 20\n    }\n  }))) : null, __jsx(ScrollLoadWrapper, {\n    autoHeight: true,\n    autoHeightMax: '50vh',\n    onScrolledBottom: () => {\n      if (arrayLengthCount(messages) < messageTotal) {\n        getData();\n      }\n    }\n  }, __jsx(\"div\", {\n    style: {\n      minHeight: '50vh'\n    }\n  }, __jsx(Row, {\n    gutter: [0, 10]\n  }, __jsx(Col, {\n    xs: 24,\n    sm: 24,\n    md: 24,\n    lg: 24,\n    xl: 24\n  }, __jsx(\"div\", {\n    className: \"fill-parent flex-justify-start flex-items-align-center\"\n  }, __jsx(UserAvatar, {\n    redirectProfile: true,\n    data: _.get(post, ['userId']),\n    size: 50\n  }), __jsx(\"div\", {\n    className: \"padding-left-md\"\n  }, __jsx(\"div\", {\n    className: \"subtitle1 font-weight-bold black\"\n  }, `${getUserName(_.get(post, ['userId']), 'freakId')}`), __jsx(\"div\", {\n    className: \"headline grey\"\n  }, `posted at ${moment(_.get(post, ['createdAt'])).fromNow()}`)))), __jsx(Col, {\n    xs: 24,\n    sm: 24,\n    md: 24,\n    lg: 24,\n    xl: 24\n  }, __jsx(\"div\", null, __jsx(ParseTag, {\n    data: _.get(post, ['title']) || '',\n    className: \"font-weight-bold subtitle1 width-100 pre-wrap\",\n    expandable: true,\n    lines: 1,\n    more: __jsx(\"span\", {\n      className: \"caption\"\n    }, \"Show More\"),\n    less: __jsx(\"span\", {\n      className: \"caption\"\n    }, \"Show Less\")\n  })), __jsx(\"div\", null, __jsx(ParseTag, {\n    data: _.get(post, ['content']) || '',\n    className: \"headline font-weight-normal width-100 pre-wrap\",\n    expandable: true,\n    lines: 1,\n    more: __jsx(\"span\", {\n      className: \"caption\"\n    }, \"Show More\"),\n    less: __jsx(\"span\", {\n      className: \"caption\"\n    }, \"Show Less\")\n  }))), __jsx(Col, {\n    xs: 24,\n    sm: 24,\n    md: 24,\n    lg: 24,\n    xl: 24\n  }, __jsx(\"div\", {\n    className: \"headline font-weight-bold\"\n  }, __jsx(\"span\", {\n    className: \"d-inline-block margin-right-md\"\n  }, getPlural('Like', 'Likes', totalLike, true)), __jsx(\"span\", {\n    className: \"d-inline-block\"\n  }, getPlural('Comment', 'Comments', messageTotal, true)))), __jsx(Col, {\n    xs: 24,\n    sm: 24,\n    md: 24,\n    lg: 24,\n    xl: 24\n  }, __jsx(\"div\", {\n    className: \"width-100 flex-justify-start flex-items-align-center\"\n  }, __jsx(LikePostButton, {\n    className: \"d-inline-block margin-right-md\",\n    chatId: post._id,\n    postLike: postLike,\n    likeOn: \"chat\",\n    onClick: liked => {\n      setTotalLike(liked ? parseInt(totalLike) + 1 : parseInt(totalLike) - 1);\n    },\n    onSuccessUpdate: (liked, data) => {\n      if (props.onPostLikeChange) {\n        props.onPostLikeChange(liked, data);\n      }\n\n      if (props.onUpdatePost) {\n        props.onUpdatePost(_objectSpread(_objectSpread({}, post), {}, {\n          totalLike: liked ? parseInt(post.totalLike) + 1 : parseInt(post.totalLike) - 1\n        }));\n      }\n    },\n    activeButton: __jsx(\"div\", {\n      className: \"flex-items-align-center\"\n    }, __jsx(\"img\", {\n      src: carFreakLikeIcon,\n      style: {\n        width: 35,\n        height: 25\n      },\n      className: \"margin-right-sm cursor-pointer\"\n    }), formatNumber(totalLike, 'auto', true, 0, true) || 0)\n  }, __jsx(\"div\", {\n    className: \"flex-items-align-center\"\n  }, __jsx(\"img\", {\n    src: carFreakLikeGreyIcon,\n    style: {\n      width: 35,\n      height: 25\n    },\n    className: \"margin-right-sm cursor-pointer\"\n  }), formatNumber(totalLike, 'auto', true, 0, true) || 0)), __jsx(\"span\", {\n    className: \"flex-items-align-center cursor-pointer\",\n    onClick: e => {\n      if (postCommentRef.current.focus) {\n        postCommentRef.current.focus();\n      }\n    }\n  }, __jsx(\"span\", {\n    className: \"margin-right-sm\"\n  }, __jsx(\"img\", {\n    src: commentIcon,\n    style: {\n      width: '20px',\n      height: '20px'\n    }\n  })), __jsx(\"span\", {\n    className: \"headline\"\n  }, \"Comment\")))), __jsx(Col, {\n    xs: 24,\n    sm: 24,\n    md: 24,\n    lg: 24,\n    xl: 24\n  }, _.isArray(messages) && notEmptyLength(messages) ? messages.map(function (v, i) {\n    return __jsx(React.Fragment, {\n      key: 'messages' + i\n    }, __jsx(CommentBox1, {\n      data: v,\n      onChange: data => {\n        handleCommentChange(data);\n      },\n      onRemove: data => {\n        handleRemoveComment(data);\n      }\n    }));\n  }) : __jsx(\"div\", {\n    className: \"width-100\",\n    style: {\n      height: 100\n    }\n  }, __jsx(Empty, {\n    description: \"No comment yet...\"\n  }))), __jsx(Col, {\n    xs: 24,\n    sm: 24,\n    md: 24,\n    lg: 24,\n    xl: 24\n  }, __jsx(\"div\", {\n    className: \"width-100 flex-justify-center\",\n    style: {\n      height: 20\n    }\n  }, isLoading ? __jsx(Icon, {\n    type: \"loading\",\n    style: {\n      fontSize: 20\n    }\n  }) : null))))), __jsx(SocialInput, {\n    placeholder: \"What's on your mind?\",\n    maxLength: 1000,\n    inputRef: postCommentRef,\n    size: \"small\",\n    onChange: v => {\n      setMessage(v);\n    },\n    emojiPosition: {\n      right: 33,\n      bottom: 0\n    },\n    onSubmit: text => {\n      handleSubmit(text);\n    },\n    autoFocus: true,\n    excludeEnter: true\n  })));\n};\n\nconst mapStateToProps = state => ({\n  app: state.app,\n  user: state.user\n});\n\nconst mapDispatchToProps = {\n  loading: loading,\n  loginMode\n};\nexport default connect(mapStateToProps, mapDispatchToProps)(Form.create()(withRouter(PostModal)));","map":{"version":3,"sources":["/Users/faraheen/ccar-cms-next-mobile/components/carFreak/components/post-modal.jsx"],"names":["CloseOutlined","Col","Dropdown","Empty","Form","Icon","Input","Menu","message","AntMessage","Modal","Row","_","moment","React","useEffect","useState","connect","arrayLengthCount","formatNumber","getPlural","getUserName","notEmptyLength","client","carFreakLikeGreyIcon","carFreakLikeIcon","loading","loginMode","LightBoxCarousel","ParseTag","ScrollLoadWrapper","UserAvatar","commentIcon","chatRestrictTime","CommentBox1","LikePostButton","SocialInput","withRouter","Link","routePaths","messagePageSize","TextArea","postCommentRef","createRef","PostModal","props","newPostModalComment","setNewPostModalComment","messages","setMessages","post","setPost","postLike","setPostLike","setMessage","messageTotal","setMessageTotal","totalLike","setTotalLike","canSendMessage","setCanSendMessage","isLoading","setIsLoading","focused","setFocused","form","getFieldDecorator","isPlainObject","chatInfo","isEmpty","getData","isNaN","parseInt","get","visibleMode","current","focus","closeModal","changeVisibleMode","handleSubmit","text","user","error","authenticate","then","res","service","create","chatId","_id","userId","res1","onUpdatePost","totalReply","newData","concat","setTimeout","catch","err","console","log","warning","find","query","$populate","$limit","$sort","$skip","length","data","newMessages","total","handleCommentChange","map","v","handleRemoveComment","filter","emojiPosition","top","right","e","fontSize","compact","hideAction","position","viewCarFreaks","to","as","minHeight","fromNow","liked","onPostLikeChange","width","height","isArray","i","bottom","mapStateToProps","state","app","mapDispatchToProps"],"mappings":"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","sourcesContent":["import { CloseOutlined } from '@ant-design/icons';\nimport { Col, Dropdown, Empty, Form, Icon, Input, Menu, message as AntMessage, Modal, Row } from 'antd';\nimport _ from \"lodash\";\nimport moment from \"moment\";\nimport React, { useEffect, useState } from 'react';\nimport { connect } from 'react-redux';\nimport { arrayLengthCount, formatNumber, getPlural, getUserName, notEmptyLength } from '../../../common-function';\nimport client from '../../../feathers';\nimport { carFreakLikeGreyIcon, carFreakLikeIcon } from '../../../icon';\nimport { loading, loginMode } from '../../../redux/actions/app-actions';\nimport LightBoxCarousel from '../../general/LightBoxCarousel';\nimport ParseTag from '../../general/ParseTag';\nimport ScrollLoadWrapper from '../../general/ScrollLoadWrapper';\nimport UserAvatar from '../../general/UserAvatar';\nimport { commentIcon } from '../../live/config';\nimport { chatRestrictTime } from '../config';\nimport CommentBox1 from './comment-box-1';\nimport LikePostButton from './like-post-button';\nimport SocialInput from './social-input';\nimport { withRouter } from 'next/router';\nimport Link from 'next/link';\nimport { routePaths } from '../../../route';\n\n\n\nconst messagePageSize = 6;\nconst { TextArea } = Input;\n\nconst postCommentRef = React.createRef();\n\n\nconst PostModal = (props) => {\n\n    const [newPostModalComment, setNewPostModalComment] = useState(false);\n    const [messages, setMessages] = useState([]);\n    const [post, setPost] = useState({});\n    const [postLike, setPostLike] = useState({});\n    const [message, setMessage] = useState('');\n    const [messageTotal, setMessageTotal] = useState(0);\n    const [totalLike, setTotalLike] = useState(0);\n    const [canSendMessage, setCanSendMessage] = useState(true);\n    const [isLoading, setIsLoading] = useState(false);\n    const [focused, setFocused] = useState(false);\n\n    const { form } = props;\n    const { getFieldDecorator } = form;\n\n\n    useEffect(() => {\n        if (_.isPlainObject(props.chatInfo) && !_.isEmpty(props.chatInfo)) {\n            setFocused(false);\n            setMessages([]);\n            setPost(props.chatInfo);\n        } else {\n            setPost({});\n        }\n\n    }, [props.chatInfo])\n\n    useEffect(() => {\n\n        if (_.isPlainObject(props.postLike) && !_.isEmpty(props.postLike)) {\n            setPostLike(props.postLike);\n        } else {\n            setPostLike({});\n        }\n\n    }, [props.postLike])\n\n    useEffect(() => {\n\n        if (_.isPlainObject(post) && !_.isEmpty(post) && newPostModalComment) {\n            getData();\n        }\n\n        else {\n            setMessages([]);\n        }\n\n        setTotalLike(!_.isNaN(parseInt(_.get(post, ['totalLike']))) ? formatNumber(_.get(post, ['totalLike']), null, true, 0, 0) : 0)\n    }, [post, newPostModalComment])\n\n\n    useEffect(() => {\n        let visibleMode = props.visibleMode ? props.visibleMode === true ? true : false : false\n        setNewPostModalComment(visibleMode)\n        if (postCommentRef.current && !focused) {\n            if (postCommentRef.current.focus) {\n                postCommentRef.current.focus();\n            }\n            setFocused(true)\n        }\n    });\n\n\n    function closeModal() {\n        props.changeVisibleMode(false);\n        setNewPostModalComment(false)\n        setMessage('');\n        setMessages([]);\n        setCanSendMessage(true);\n    }\n\n    function handleSubmit(text) {\n\n        if (!_.get(props.user, ['authenticated']) && !_.get(props.user, ['info', 'user', '_id'])) {\n            AntMessage.error('Please Login First!');\n            props.loginMode(true);\n            return;\n        }\n        if (_.get(post, ['_id']) && text) {\n            if (canSendMessage) {\n                client.authenticate()\n                    .then((res) => {\n                        client.service('chatmessages')\n                            .create({\n                                chatId: post._id,\n                                userId: res.user._id,\n                                message: text,\n                            })\n                            .then((res1) => {\n                                if (props.onUpdatePost) {\n                                    props.onUpdatePost({ ...post, totalReply: messageTotal + 1 })\n                                }\n                                setMessage('');\n                                setCanSendMessage(false);\n                                res1.userId = res.user;\n                                //for new message appear at top after submit\n                                let newData = [res1]\n                                setMessages(newData.concat(messages))\n                                // setMessages(messages.concat([res1]));\n                                setMessageTotal(messageTotal + 1);\n                                setTimeout(() => {\n                                    setCanSendMessage(true);\n                                }, chatRestrictTime);\n\n                            }).catch((err) => {\n                                console.log('Unable to send messages.')\n                            })\n\n                    })\n                    .catch((err) => {\n                        return AntMessage.error(\"Please Login.\")\n                    })\n            } else {\n                AntMessage.warning('You are typing too fast...')\n            }\n        }\n\n    };\n\n    function getData() {\n\n        if (_.get(post, ['_id'])) {\n            setIsLoading(true);\n\n            client.service('chatmessages').find(\n                {\n                    query: {\n                        chatId: post._id,\n                        $populate: 'userId',\n                        $limit: messagePageSize,\n                        $sort: { _id: -1 },\n                        $skip: messages.length\n                    }\n                }\n            ).then((res) => {\n\n                setIsLoading(false);\n                if (res.data.length > 0) {\n                    let newMessages = messages.concat(res.data)\n                    setMessages(newMessages)\n                }\n                //if not found , remain , no need set empty\n                // else {\n                //     setMessages([])\n                // }\n                setMessageTotal(res.total)\n\n            }).catch(err => {\n                console.log(err);\n                setIsLoading(false);\n            });\n\n        }\n    }\n\n    function handleCommentChange(data) {\n        if (_.isPlainObject(data) && !_.isEmpty(data)) {\n            let newMessages = _.map(messages, function (v) {\n                return _.get(v, ['_id']) == _.get(data, ['_id']) ? data : v;\n            });\n\n            setMessages(newMessages);\n        }\n    }\n\n    function handleRemoveComment(data) {\n        if (_.isPlainObject(data) && !_.isEmpty(data)) {\n            let newMessages = _.filter(messages, function (v) {\n                return _.get(v, ['_id']) != _.get(data, ['_id']);\n            });\n\n            setMessages(newMessages);\n        }\n    }\n\n    let emojiPosition = { top: -360, right: 0 }\n\n    return (\n        <Modal\n            // title=\"Comment Post\"\n            visible={newPostModalComment}\n            onCancel={(e) => { closeModal() }}\n            footer={null}\n            width={720}\n            centered\n            maskClosable={false}\n            className=\" no-padding-modal-body modal-body-background-transparent\"\n            closable={true}\n            closeIcon={\n                <span className='padding-md background-black-opacity-70 flex-justify-center flex-items-align-center' >\n                    <CloseOutlined className=\"white\" style={{ fontSize: 20 }} />\n                </span>\n            }\n        >\n\n            {/* post content section */}\n\n            <div className=\"show-carousel-dots-inside carousel-background-black background-black\">\n                <LightBoxCarousel height={'30vh'} images={_.compact(_.map(_.get(post, ['mediaList']), function (v) {\n                    return _.get(v, ['url']) || null;\n                }))} />\n            </div>\n            <div className=\"padding-x-lg padding-y-md background-white round-border-bottom relative-wrapper\">\n\n                {\n                    !props.hideAction ?\n                        <span className='d-inline-block' style={{ position: 'absolute', top: 10, right: 10 }} >\n                            <Dropdown overlay={\n                                <Menu>\n                                    <Menu.Item key={_.get(post, ['_id']) + 'goToPost'}>\n                                        <Link shallow={false} passHref \n                                        href={routePaths.viewCarFreaks.to || '/'} as={typeof (routePaths.viewCarFreaks.as) == 'function' ? routePaths.viewCarFreaks.as(post) : '/'}\n                                        >\n                                            <a>\n                                                <span>Go To Post</span>\n                                            </a>\n                                        </Link>\n                                    </Menu.Item>\n                                </Menu>\n                            }>\n                                <Icon type=\"more\" className=\"black\" style={{ fontSize: 20 }} />\n                            </Dropdown>\n                        </span>\n                        :\n                        null\n                }\n                <ScrollLoadWrapper autoHeight autoHeightMax={'50vh'} onScrolledBottom={() => { if (arrayLengthCount(messages) < messageTotal) { getData(); } }}>\n                    <div style={{ minHeight: '50vh' }}>\n                        <Row gutter={[0, 10]}>\n                            <Col xs={24} sm={24} md={24} lg={24} xl={24}>\n                                <div className=\"fill-parent flex-justify-start flex-items-align-center\">\n                                    <UserAvatar redirectProfile data={_.get(post, ['userId'])} size={50} />\n                                    <div className=\"padding-left-md\">\n                                        <div className=\"subtitle1 font-weight-bold black\">\n                                            {`${getUserName(_.get(post, ['userId']), 'freakId')}`}\n                                        </div>\n                                        <div className=\"headline grey\">\n                                            {`posted at ${moment(_.get(post, ['createdAt'])).fromNow()}`}\n                                        </div>\n                                    </div>\n                                </div>\n                            </Col>\n                            <Col xs={24} sm={24} md={24} lg={24} xl={24}>\n                                <div >\n                                    <ParseTag data={(_.get(post, ['title']) || '')} className=\"font-weight-bold subtitle1 width-100 pre-wrap\" expandable\n                                        lines={1}\n                                        more={<span className=\"caption\">Show More</span>}\n                                        less={<span className=\"caption\">Show Less</span>} />\n                                </div>\n                                <div >\n                                    <ParseTag data={(_.get(post, ['content']) || '')} className=\"headline font-weight-normal width-100 pre-wrap\" expandable\n                                        lines={1}\n                                        more={<span className=\"caption\">Show More</span>}\n                                        less={<span className=\"caption\">Show Less</span>} />\n                                </div>\n                            </Col>\n\n                            <Col xs={24} sm={24} md={24} lg={24} xl={24}>\n                                <div className=\"headline font-weight-bold\">\n                                    <span className='d-inline-block margin-right-md' >\n                                        {getPlural('Like', 'Likes', totalLike, true)}\n                                    </span>\n                                    <span className='d-inline-block' >\n                                        {getPlural('Comment', 'Comments', messageTotal, true)}\n                                    </span>\n                                </div>\n                            </Col>\n                            <Col xs={24} sm={24} md={24} lg={24} xl={24}>\n                                <div className=\"width-100 flex-justify-start flex-items-align-center\" >\n                                    <LikePostButton className='d-inline-block margin-right-md'\n                                        chatId={post._id}\n                                        postLike={postLike}\n                                        likeOn=\"chat\"\n                                        onClick={(liked) => { setTotalLike(liked ? parseInt(totalLike) + 1 : parseInt(totalLike) - 1) }}\n                                        onSuccessUpdate={(liked, data) => {\n                                            if (props.onPostLikeChange) {\n                                                props.onPostLikeChange(liked, data);\n                                            }\n                                            if (props.onUpdatePost) {\n                                                props.onUpdatePost({ ...post, totalLike: liked ? parseInt(post.totalLike) + 1 : parseInt(post.totalLike) - 1 });\n                                            }\n                                        }}\n                                        activeButton={\n                                            <div className=\"flex-items-align-center\">\n                                                <img src={carFreakLikeIcon} style={{ width: 35, height: 25 }} className=\"margin-right-sm cursor-pointer\" />\n                                                {formatNumber(totalLike, 'auto', true, 0, true) || 0}\n                                            </div>\n                                        }\n                                    >\n\n                                        <div className=\"flex-items-align-center\">\n                                            <img src={carFreakLikeGreyIcon} style={{ width: 35, height: 25 }} className=\"margin-right-sm cursor-pointer\" />\n                                            {formatNumber(totalLike, 'auto', true, 0, true) || 0}\n                                        </div>\n                                    </LikePostButton>\n                                    <span className='flex-items-align-center cursor-pointer' onClick={(e) => {\n\n                                        if (postCommentRef.current.focus) {\n                                            postCommentRef.current.focus();\n                                        }\n                                    }}>\n                                        <span className='margin-right-sm' >\n                                            <img src={commentIcon} style={{ width: '20px', height: '20px' }} />\n                                        </span>\n                                        <span className='headline' >\n                                            Comment\n                                        </span>\n                                    </span>\n                                </div>\n                            </Col>\n\n\n                            <Col xs={24} sm={24} md={24} lg={24} xl={24}>\n                                {\n                                    _.isArray(messages) && notEmptyLength(messages) ?\n                                        messages.map(function (v, i) {\n                                            return (\n                                                <React.Fragment key={'messages' + i}>\n                                                    <CommentBox1 data={v}\n                                                        onChange={(data) => {\n                                                            handleCommentChange(data);\n                                                        }}\n                                                        onRemove={(data) => {\n                                                            handleRemoveComment(data);\n                                                        }}\n                                                    />\n                                                </React.Fragment>\n                                            )\n                                        })\n                                        :\n                                        <div className=\"width-100\" style={{ height: 100 }}>\n                                            <Empty description=\"No comment yet...\" ></Empty>\n                                        </div>\n                                }\n                            </Col>\n                            <Col xs={24} sm={24} md={24} lg={24} xl={24}>\n                                <div className=\"width-100 flex-justify-center\" style={{ height: 20 }}>\n                                    {\n                                        isLoading ?\n                                            <Icon type=\"loading\" style={{ fontSize: 20 }} />\n                                            :\n                                            null\n                                    }\n                                </div>\n                            </Col>\n                        </Row>\n                    </div>\n                </ScrollLoadWrapper>\n\n                <SocialInput\n                    placeholder=\"What's on your mind?\"\n                    maxLength={1000}\n                    inputRef={postCommentRef}\n                    size=\"small\"\n                    onChange={(v) => {\n                        setMessage(v)\n                    }}\n                    emojiPosition={{ right: 33, bottom: 0 }}\n                    onSubmit={(text) => {\n                        handleSubmit(text);\n                    }}\n                    autoFocus={true}\n                    excludeEnter\n                />\n\n            </div>\n        </Modal>\n    );\n}\n\n\nconst mapStateToProps = state => ({\n    app: state.app,\n    user: state.user,\n});\n\nconst mapDispatchToProps = {\n    loading: loading,\n    loginMode,\n};\nexport default connect(mapStateToProps, mapDispatchToProps)(Form.create()(withRouter(PostModal)));"]},"metadata":{},"sourceType":"module"}