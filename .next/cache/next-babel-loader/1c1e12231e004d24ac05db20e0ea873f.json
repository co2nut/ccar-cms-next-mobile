{"ast":null,"code":"var __jsx = React.createElement;\nimport { Col, Form, Progress, Row } from 'antd';\nimport React from 'react';\nimport { connect } from 'react-redux';\nimport { withRouter } from 'next/router';\nimport { isObject, notEmptyLength } from '../../common-function';\n\nvar RatingProgress = function RatingProgress(props) {\n  function setToSize(data, size, startFrom) {\n    if (isNaN(parseInt(startFrom))) {\n      startFrom = 0;\n    } else {\n      startFrom = parseInt(startFrom);\n    }\n\n    if (!isNaN(parseInt(size)) && data.length < parseInt(size)) {\n      data = data.map(function (item, index) {\n        if (isNaN(parseInt(item.position))) {\n          if (isObject(item)) {\n            item.position = index + startFrom;\n          } else {\n            item = {\n              label: index + startFrom,\n              position: index + startFrom,\n              total: item\n            };\n          }\n        }\n\n        return item;\n      });\n      var finaldata = [];\n\n      var _loop = function _loop(index) {\n        var replace = data.find(function (item) {\n          return item.position == index + startFrom;\n        });\n\n        if (replace) {\n          finaldata[index] = replace;\n        } else {\n          finaldata[index] = {\n            label: index + startFrom,\n            position: index + startFrom,\n            total: 0\n          };\n        }\n      };\n\n      for (var index = 0; index < size; index++) {\n        _loop(index);\n      }\n\n      finaldata = finaldata.reverse();\n      return finaldata;\n    } else {\n      return data;\n    }\n  }\n\n  var _renderRatingProgress = function _renderRatingProgress(data, total, size, startFrom) {\n    if (isNaN(parseInt(total))) {\n      total = 100;\n    } else {\n      total = parseInt(total);\n    }\n\n    if (isNaN(parseInt(startFrom))) {\n      startFrom = 0;\n    } else {\n      startFrom = parseInt(startFrom);\n    }\n\n    if (notEmptyLength(data)) {\n      if (size) {\n        data = setToSize(data, size, startFrom);\n      }\n\n      return data.map(function (item, index) {\n        if (item != null) {\n          var num = 0;\n\n          if (isObject(item)) {\n            if (item.total && !isNaN(parseFloat(item.total))) {\n              num = item.total;\n            } else {\n              num = 0;\n            }\n          } else {\n            if (!isNaN(parseFloat(item))) {\n              num = parseFloat(item);\n            } else {\n              num = 0;\n            }\n          }\n\n          return __jsx(Col, {\n            span: 24\n          }, __jsx(\"div\", null, __jsx(\"span\", {\n            className: \"headline   font-weight-bold margin-right-md\"\n          }, item.label != null ? item.label : index + startFrom), __jsx(\"span\", null, __jsx(Progress, {\n            percent: parseFloat(num / total) * 100,\n            type: \"line\",\n            showInfo: false,\n            strokeColor: \"#F9A825\",\n            style: {\n              display: 'inline-block',\n              width: '80%'\n            }\n          }))));\n        } else {\n          return null;\n        }\n      });\n    } else {\n      return null;\n    }\n  };\n\n  return __jsx(\"div\", {\n    className: props.className ? props.className : null,\n    style: props.style ? props.style : null\n  }, __jsx(Row, {\n    type: \"flex\",\n    justify: \"center\",\n    align: \"middle\",\n    gutter: [0, 0]\n  }, props.render ? props.render(notEmptyLength(props.data) ? props.data : [], props.total ? props.total : null) : _renderRatingProgress(notEmptyLength(props.data) ? props.data : [], props.total ? props.total : null, props.size ? props.size : null, props.startFrom ? props.startFrom : null)));\n};\n\n_c = RatingProgress;\n\nvar mapStateToProps = function mapStateToProps(state) {\n  return {\n    app: state.app,\n    user: state.user\n  };\n};\n\nvar mapDispatchToProps = {};\nexport default connect(mapStateToProps, mapDispatchToProps)(Form.create()(withRouter(RatingProgress)));\n\nvar _c;\n\n$RefreshReg$(_c, \"RatingProgress\");","map":{"version":3,"sources":["/Users/faraheen/ccar-cms-next-mobile/components/profile/RatingProgress.jsx"],"names":["Col","Form","Progress","Row","React","connect","withRouter","isObject","notEmptyLength","RatingProgress","props","setToSize","data","size","startFrom","isNaN","parseInt","length","map","item","index","position","label","total","finaldata","replace","find","reverse","_renderRatingProgress","num","parseFloat","display","width","className","style","render","mapStateToProps","state","app","user","mapDispatchToProps","create"],"mappings":"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","sourcesContent":["import { Col, Form, Progress, Row } from 'antd';\nimport React from 'react';\nimport { connect } from 'react-redux';\nimport { withRouter } from 'next/router';\nimport {  isObject, notEmptyLength  } from '../../common-function';\n\nconst RatingProgress = (props) => {\n\n\n    function setToSize(data, size, startFrom) {\n\n        if (isNaN(parseInt(startFrom))) {\n            startFrom = 0;\n        } else {\n            startFrom = parseInt(startFrom);\n        }\n\n        if (!isNaN(parseInt(size)) && data.length < parseInt(size)) {\n\n            data = data.map((item, index) => {\n\n                if (isNaN(parseInt(item.position))) {\n                    if (isObject(item)) {\n                        item.position = index + startFrom;\n                    } else {\n                        item = {\n                            label: index + startFrom,\n                            position: index + startFrom,\n                            total: item,\n                        }\n                    }\n                }\n\n                return item;\n\n            });\n\n\n            let finaldata = [];\n            for (let index = 0; index < size; index++) {\n\n                let replace = data.find(function (item) {\n                    return item.position == index + startFrom;\n                })\n\n                if (replace) {\n                    finaldata[index] = replace;\n                } else {\n                    finaldata[index] = {\n                        label: index + startFrom,\n                        position: index + startFrom,\n                        total: 0\n                    };\n                }\n            }\n\n\n\n\n\n            finaldata = finaldata.reverse();\n            return finaldata;\n        } else {\n            return data;\n        }\n\n    }\n\n    const _renderRatingProgress = (data, total, size, startFrom) => {\n\n        if (isNaN(parseInt(total))) {\n            total = 100;\n        } else {\n            total = parseInt(total);\n        }\n\n        if (isNaN(parseInt(startFrom))) {\n            startFrom = 0;\n        } else {\n            startFrom = parseInt(startFrom);\n        }\n\n        if (notEmptyLength(data)) {\n\n            if (size) {\n                data = setToSize(data, size, startFrom);\n            }\n\n            return data.map(function (item, index) {\n\n                if (item != null) {\n                    var num = 0;\n                    if (isObject(item)) {\n                        if (item.total && !isNaN(parseFloat(item.total))) {\n                            num = item.total;\n                        } else {\n                            num = 0;\n                        }\n                    } else {\n                        if (!isNaN(parseFloat(item))) {\n                            num = parseFloat(item);\n                        } else {\n                            num = 0;\n                        }\n                    }\n\n                    return (<Col span={24}>\n                        <div>\n                            <span className=\"headline   font-weight-bold margin-right-md\">{item.label != null ? item.label : index + startFrom}</span>\n                            <span>\n                                <Progress percent={parseFloat(num / total) * 100} type=\"line\" showInfo={false} strokeColor=\"#F9A825\" style={{ display: 'inline-block', width: '80%' }} />\n                            </span>\n                        </div>\n                    </Col>)\n                } else {\n                    return null;\n                }\n            });\n        } else {\n            return null;\n        }\n    }\n\n\n    return (\n        <div className={props.className ? props.className : null} style={props.style ? props.style : null}>\n\n            <Row type=\"flex\" justify=\"center\" align=\"middle\" gutter={[0, 0]}>\n                {\n                    props.render ?\n                        props.render(notEmptyLength(props.data) ? props.data : [], props.total ? props.total : null)\n                        :\n                        _renderRatingProgress(notEmptyLength(props.data) ? props.data : [], props.total ? props.total : null, props.size ? props.size : null, props.startFrom ? props.startFrom : null)\n                }\n            </Row>\n        </div>\n    );\n}\n\n\nconst mapStateToProps = state => ({\n    app: state.app,\n    user: state.user,\n});\n\nconst mapDispatchToProps = {\n};\nexport default connect(mapStateToProps, mapDispatchToProps)(Form.create()(withRouter(RatingProgress)));"]},"metadata":{},"sourceType":"module"}