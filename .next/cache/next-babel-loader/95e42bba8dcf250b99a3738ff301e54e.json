{"ast":null,"code":"function ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); if (enumerableOnly) { symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; }); } keys.push.apply(keys, symbols); } return keys; }\n\nfunction _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; if (i % 2) { ownKeys(Object(source), true).forEach(function (key) { _defineProperty(target, key, source[key]); }); } else if (Object.getOwnPropertyDescriptors) { Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)); } else { ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } } return target; }\n\nfunction _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }\n\nimport { UPDATE_SOCKET_INFO, DELETE_SOCKET_INFO } from '../actions/socketRefresh-actions';\nimport localStorage from 'local-storage';\nimport { checkIsNeedPersist, checkNeedPersist, getPersistObj, persistRedux } from '../config';\nimport _ from 'lodash';\nconst INITIAL_STATE = {};\nexport default function (state = INITIAL_STATE, action) {\n  // checkNeedPersist(_.get(action, 'type'), 'socketRefresh', _.get(action, 'payload'), _.get(action, 'isRestoreData'));\n  let persistStates = _.get(localStorage.get('redux') || {}, 'socketRefresh') || INITIAL_STATE;\n\n  let newState = _objectSpread(_objectSpread({}, state), persistStates);\n\n  if (!_.isEqual(state, newState)) {\n    state = newState;\n  }\n\n  switch (action.type) {\n    case UPDATE_SOCKET_INFO:\n      state = action.payload; // state = {\n      //   ...state,\n      //   shouldRefresh: action.payload\n      // }\n      //not really used we can just update with falsh\n\n      break;\n\n    case DELETE_SOCKET_INFO:\n      state = _objectSpread({}, state);\n      break;\n\n    default:\n      state = state;\n      break;\n  }\n\n  persistRedux('socketRefresh', state);\n  return state;\n}","map":{"version":3,"sources":["/Users/faraheen/ccar-cms-next-mobile/redux/reducers/socketRefresh-reducer.js"],"names":["UPDATE_SOCKET_INFO","DELETE_SOCKET_INFO","localStorage","checkIsNeedPersist","checkNeedPersist","getPersistObj","persistRedux","_","INITIAL_STATE","state","action","persistStates","get","newState","isEqual","type","payload"],"mappings":";;;;;;AAAA,SAASA,kBAAT,EAA6BC,kBAA7B,QAAuD,kCAAvD;AACA,OAAOC,YAAP,MAAyB,eAAzB;AACA,SAASC,kBAAT,EAA6BC,gBAA7B,EAA+CC,aAA/C,EAA8DC,YAA9D,QAAkF,WAAlF;AACA,OAAOC,CAAP,MAAc,QAAd;AAEA,MAAMC,aAAa,GAAG,EAAtB;AAIA,eAAe,UAAUC,KAAK,GAAGD,aAAlB,EAAiCE,MAAjC,EAAyC;AAEtD;AAEA,MAAIC,aAAa,GAAGJ,CAAC,CAACK,GAAF,CAAMV,YAAY,CAACU,GAAb,CAAiB,OAAjB,KAA6B,EAAnC,EAAuC,eAAvC,KAA2DJ,aAA/E;;AACA,MAAIK,QAAQ,mCACPJ,KADO,GAEPE,aAFO,CAAZ;;AAIA,MAAG,CAACJ,CAAC,CAACO,OAAF,CAAUL,KAAV,EAAiBI,QAAjB,CAAJ,EAA+B;AAC7BJ,IAAAA,KAAK,GAAGI,QAAR;AACD;;AACD,UAAQH,MAAM,CAACK,IAAf;AACE,SAAKf,kBAAL;AACES,MAAAA,KAAK,GAAGC,MAAM,CAACM,OAAf,CADF,CAEE;AACA;AACA;AACA;AACA;;AACA;;AACF,SAAKf,kBAAL;AACEQ,MAAAA,KAAK,qBACAA,KADA,CAAL;AAGA;;AACF;AACEA,MAAAA,KAAK,GAAGA,KAAR;AACA;AAhBJ;;AAkBAH,EAAAA,YAAY,CAAC,eAAD,EAAkBG,KAAlB,CAAZ;AAEA,SAAOA,KAAP;AACD","sourcesContent":["import { UPDATE_SOCKET_INFO, DELETE_SOCKET_INFO } from '../actions/socketRefresh-actions';\nimport localStorage from 'local-storage';\nimport { checkIsNeedPersist, checkNeedPersist, getPersistObj, persistRedux } from '../config';\nimport _ from 'lodash'\n\nconst INITIAL_STATE = {\n};\n\n\nexport default function (state = INITIAL_STATE, action) {\n\n  // checkNeedPersist(_.get(action, 'type'), 'socketRefresh', _.get(action, 'payload'), _.get(action, 'isRestoreData'));\n\n  let persistStates = _.get(localStorage.get('redux') || {}, 'socketRefresh') || INITIAL_STATE;\n  let newState = {\n    ...state,\n    ...persistStates\n  }\n  if(!_.isEqual(state, newState)){\n    state = newState;\n  }\n  switch (action.type) {\n    case UPDATE_SOCKET_INFO:\n      state = action.payload;\n      // state = {\n      //   ...state,\n      //   shouldRefresh: action.payload\n      // }\n      //not really used we can just update with falsh\n      break;\n    case DELETE_SOCKET_INFO:\n      state = {\n        ...state\n      };\n      break;\n    default:\n      state = state;\n      break;\n  }\n  persistRedux('socketRefresh', state)\n\n  return state;\n}\n"]},"metadata":{},"sourceType":"module"}